<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Trey Hunner]]></title>
  <link href="https://treyhunner.com/atom.xml" rel="self"/>
  <link href="https://treyhunner.com/"/>
  <updated>2024-08-12T07:14:29-07:00</updated>
  <id>https://treyhunner.com/</id>
  <author>
    <name><![CDATA[Trey Hunner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Quickly find the right datetime format code for your date]]></title>
    <link href="https://treyhunner.com/2024/08/find-the-datetime-format-code-for-your-date/"/>
    <updated>2024-08-05T11:30:00-07:00</updated>
    <id>https://treyhunner.com/2024/08/find-the-datetime-format-code-for-your-date</id>
    <content type="html"><![CDATA[<p>I often find myself with a string representing a date and time and the need to create a format string that will parse this string into a <code>datetime</code> object.</p>

<p>I decided to make a tool that solves this problem for me: <a href="https://pym.dev/strptime">https://pym.dev/strptime</a></p>

<h2>Finding the code to parse a date format with <code>strptime</code></h2>

<p>Here&rsquo;s how I&rsquo;m now using this new tool.</p>

<p>I find a date string in a random spreadsheet or log file that I need to parse.
For example, the string <code>30-Jun-2024 20:09</code>, which I recently found in a spreadsheet.</p>

<p>I then paste the string into the tool and watch the format appear:</p>

<p><a href="https://pym.dev/strptime"><img src="https://treyhunner.com/images/strptime-1.png"></a></p>

<p>Then I click on the date format to copy-paste it.
That&rsquo;s it!</p>

<p>This tool works by cycling through a number of common formats.
It also works for dates without a time, like <code>Jul 1, 2024</code>.</p>

<p><a href="https://pym.dev/strptime"><img src="https://treyhunner.com/images/strptime-2.png"></a></p>

<p>This input field works great when you&rsquo;re in need of a code for the <code>datetime</code> class&rsquo;s <code>strptime</code> method (which <em>parses</em> dates).
But what if you need a code for <code>strftime</code> (for <em>formatting</em> dates)?</p>

<h2>Finding the code to format a date with <code>strftime</code></h2>

<p>If you don&rsquo;t have a date but instead want to <em>construct</em> a date in a specific common format, scroll down the page a bit.</p>

<p>This page includes a table of common formats.</p>

<p><a href="https://pym.dev/strptime#formats"><img src="https://treyhunner.com/images/strptime-table.png"></a></p>

<p>Click on the format to copy it.
That&rsquo;s it.</p>

<h2>Playing with format codes</h2>

<p>What if you have a date format already but you&rsquo;re not sure what it represents?</p>

<p>Paste it in the box!</p>

<p>For example if you&rsquo;re wondering what the <code>%B</code> in <code>%B %d, %Y</code> means, paste it in to see what that represent with the current date and time:</p>

<p><a href="https://pym.dev/strptime"><img src="https://treyhunner.com/images/strptime-reverse.png"></a></p>

<h2>Other features</h2>

<p>There are a few other hidden features in this tool:</p>

<ul>
<li>After a date or date format is pasted, if it corresponds to one of the formats listed in the table of common formats, that row will be highlighted</li>
<li>Hitting the <code>Enter</code> key anywhere on the page will select the input field</li>
<li>Clicking on a date within the format table will fill that date into the input box</li>
<li>The bottom of the page includes links to other useful datetime formatting/parsing tools as well as a link to the relevant Python documentation</li>
</ul>


<h2>Thoughts? Feature requests?</h2>

<p>What do you think of this tool?</p>

<p>Is this something you&rsquo;d bookmark and use often?
Is this missing a key feature that you would need for it to be valuable for your use?</p>

<p>Are there date and time formats you&rsquo;d like to see that don&rsquo;t seem to be supported yet?</p>

<p>Comment or email me to let me know!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why does "python -m json" not work? Why is it "json.tool"?]]></title>
    <link href="https://treyhunner.com/2024/08/why-does-python-m-json-not-work/"/>
    <updated>2024-08-01T14:00:00-07:00</updated>
    <id>https://treyhunner.com/2024/08/why-does-python-m-json-not-work</id>
    <content type="html"><![CDATA[<p><strong>Update</strong>: upon the encouragement of a few CPython core team members, I <a href="https://github.com/python/cpython/pull/122884">opened a pull request</a> to add this to Python 3.14.</p>

<p>Have you ever used Python&rsquo;s <code>json.tool</code> command-line interface?</p>

<p>You can run <code>python -m json.tool</code> against a JSON file and Python will print a nicely formatted version of the file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>python -m json.tool example.json
</span><span class='line'><span class="o">[</span>
</span><span class='line'>    1,
</span><span class='line'>    2,
</span><span class='line'>    3,
</span><span class='line'>    4
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Why do we need to run <code>json.tool</code> instead of <code>json</code>?</p>

<h2>The history of <code>python -m</code></h2>

<p>Python 3.5 added the ability to run a module as a command-line script using the <code>-m</code> argument (see <a href="https://peps.python.org/pep-0338/">PEP 338</a>) which was implemented in Python 2.5.
While that feature was being an additional feature/bug was accidentally added, alowing packages to be run with the <code>-m</code> flag as well.
When a package was run with the <code>-m</code> flag, the package&rsquo;s <code>__init__.py</code> file would be run, with the <code>__name__</code> variable set to <code>__main__</code>.</p>

<p>This accidental feature/bug was <a href="https://github.com/python/cpython/issues/47000">removed in Python 2.6</a>.</p>

<p>It wasn&rsquo;t until Python 2.7 that the ability to run <code>python -m package</code> was re-added (see below).</p>

<h2>The history of the <code>json</code> module</h2>

<p>The <code>json</code> module was <a href="https://docs.python.org/3/whatsnew/2.6.html#the-json-module-javascript-object-notation">added in Python 2.6</a>.
It was based on the third-party <code>simplejson</code> library.</p>

<p>That library originally relied on the fact that Python packages could be run with the <code>-m</code> flag to run the package&rsquo;s <code>__init__.py</code> file with <code>__name__</code> set to <code>__main__</code> (see <a href="https://github.com/simplejson/simplejson/blob/v1.8.1/simplejson/__init__.py#L368">this code from version 1.8.1</a>).</p>

<p>When <code>simplejson</code> was added to Python as the <code>json</code> module in Python 2.6, this bug/feature could no longer be relied upon as it was fixed in Python 2.6.
To continue allowing for a nice command-line interface, it was decided that running a <code>tool</code> submodule would be the way to add a command-line interface to the <code>json</code> package (<a href="https://github.com/simplejson/simplejson/commit/74d9c5c4c4339db47dfa86bf37858cae80ed3776">discussion here</a>).</p>

<p>Python 2.7 <a href="https://docs.python.org/2.7/using/cmdline.html?highlight=__main__#cmdoption-m">added the ability to run any package as a command-line tool</a>.
The package would simply need a <code>__main__.py</code> file within it, which Python would run as the entry point to the package.</p>

<p>At this point, <code>json.tool</code> had already been added in Python 2.6 and no attempt was made (as far as I can tell) to allow <code>python -m json</code> to work instead.
Once you&rsquo;ve added a feature, removing or changing it can be painful.</p>

<h2>Could we make <code>python -m json</code> work today?</h2>

<p>We could.
We would just need to <a href="https://github.com/treyhunner/cpython/commit/1226315e2df0d4229558734d5f0d50f1386a025e">rename <code>tool.py</code> to <code>__main__.py</code></a>.
To allow <code>json.tool</code> to still work <em>also</em>, would could <a href="https://github.com/python/cpython/commit/7ce95d21886c7ad5278c07c1a20cda5bebab4731">make a new <code>tool.py</code> module</a> that simply imports <code>json.__main__</code>.</p>

<p>We could even go so far as to <a href="https://github.com/treyhunner/cpython/commit/ae4ca62346c690e1c6aaf1ccfed37069984b5d67">deprecate <code>json.tool</code></a> if we wanted to.</p>

<p>Should we do this though? 🤔</p>

<h2>Should we make <code>python -m json</code> work?</h2>

<p>I don&rsquo;t know about you, but I would rather type <code>python -m json</code> than <code>python -m json.tool</code>.
It&rsquo;s more memorable <em>and</em> easier to guess, if you&rsquo;re not someone who has memorized <a href="https://www.pythonmorsels.com/cli-tools/">all the command-line tools hiding in Python</a>.</p>

<p>But would this actually be used?
I mean, don&rsquo;t people just use the <a href="https://jqlang.github.io/jq/">jq</a> tool instead?</p>

<p>Well, a <code>sqlite3</code> shell was <a href="https://docs.python.org/3/library/sqlite3.html#command-line-interface">added to Python 3.12</a> despite the fact that third-party interactive sqlite prompts are fairly common.</p>

<p>It is pretty handy to have a access to a tool within an unfamiliar environment where installing yet-another-tool might pose a problem.
Think Docker, a locked-down Windows machine, or any computer without network or with network restrictions.</p>

<p>Personally, I&rsquo;d like to see <code>python3 -m json</code> work.
I can&rsquo;t think of any big downsides.
Can you?</p>

<p><strong>Update</strong>: <a href="https://github.com/python/cpython/pull/122884">pull request opened</a>.</p>

<h2>Too long; didn&rsquo;t read</h2>

<p>The &ldquo;too long didn&rsquo;t read version&rdquo;:</p>

<ul>
<li>Python 2.5 added support for the <code>-m</code> argument for <em>modules</em>, but not <em>packages</em></li>
<li>A third-party <code>simplejson</code> app existed with a nice CLI that relied on a <code>-m</code> implementation bug allowing packages to be run using <code>-m</code></li>
<li>Python 2.6 fixed that implementation quirk and broke the previous ability to run <code>python -m simplejson</code></li>
<li>Python 2.6 also added the <code>json</code> module, which was based on this third-party <code>simplejson</code> package</li>
<li>Since <code>python -m json</code> couldn&rsquo;t work anymore, the ability to run <code>python -m json.tool</code> was added</li>
<li>Python 2.7 added official support for <code>python -m some_package</code> by running a <code>__main__</code> submodule</li>
<li>The <code>json.tool</code> module already existed in Python 2.6 and the ability to run <code>python -m json</code> was (as far as I can tell) never seriously considered</li>
</ul>


<h2>All thanks to git history and issue trackers</h2>

<p>I discovered this by noting <a href="https://github.com/simplejson/simplejson/commit/74d9c5c4c4339db47dfa86bf37858cae80ed3776">the first commit</a> that added the <code>tool</code> submodule to <code>simplejson</code>, which notes the fact that this was for consistency with the new <code>json</code> standard library module.</p>

<p>Thank you git history.
And thank you to the folks who brought us the <code>simplejson</code> library, the <code>json</code> module, and the ability to use <code>-m</code> on both a module and a package!</p>

<p>Also, thank you to Alyssa Coghlan, Hugo van Kemenade, and Adam Turner for reviewing my pull request to add this feature to Python 3.14. 💖</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GPT and Claude from your URL bar]]></title>
    <link href="https://treyhunner.com/2024/07/chatgpt-and-claude-from-your-browser-url-bar/"/>
    <updated>2024-07-11T09:00:00-07:00</updated>
    <id>https://treyhunner.com/2024/07/chatgpt-and-claude-from-your-browser-url-bar</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been playing with using <a href="https://kagi.com">Kagi</a> and <a href="https://www.perplexity.ai">Perplexity</a> as my browser&rsquo;s default search engine recently.</p>

<p>Currently I have Kagi setup as my default search engine and I added a <a href="https://help.kagi.com/kagi/features/bangs.html#custom-bangs">custom bang</a> command in my Kagi account so that <strong>!x</strong> will trigger a search with Perplexity.</p>

<p>This got me thinking&hellip; could I trigger a new <a href="https://chatgpt.com">Chat GPT</a> or <a href="https://claude.ai">Claude</a> chat from my browser&rsquo;s URL bar?</p>

<h2>How browsers query search engines</h2>

<p>Whether you&rsquo;re using <a href="https://superuser.com/questions/1772248/how-to-add-custom-search-engine-to-chrome">Chrome</a>, <a href="https://support.mozilla.org/en-US/kb/change-your-default-search-settings-firefox">Firefox</a>, or some other browser (I&rsquo;m trying <a href="https://vivaldi.com/blog/search-favorite-websites-quickly/">Vivaldi</a>) you can add custom search engines to your browser.</p>

<p>Custom search engines use a template URL that looks something like this:</p>

<p><code>https://duckduckgo.com/?q=%s</code></p>

<p>Note that this URL is a <em>template</em> because of that <code>%s</code>.
That <code>%s</code> bit will be replaced by the actual query you search for.</p>

<p>So if Chat GPT and Claude have URLs that allow creating a new chat via a URL&rsquo;s query string (the thing after the <code>?</code>), then they could be used as search engines.</p>

<p>And it turns out&hellip; they do!</p>

<h2>Querying Chat GPT via a URL</h2>

<p>To query Chat GPT via a URL query string, use:</p>

<p><code>https://chatgpt.com/?q=%s</code></p>

<p>Set that URL as a custom &ldquo;search engine&rdquo; in your browser.
Then whenever you&rsquo;d like to start a new Chat GPT conversation, select your browser&rsquo;s URL bar, type the search engine prefix followed by a space, type your query, and hit Enter!</p>

<h2>Querying Claude via a URL</h2>

<p>To query Claude via a URL query string, use:</p>

<p><code>https://claude.ai/new?q=%s</code></p>

<p>It works the same way as the Chat GPT URL.</p>

<h2>Querying Perplexity via a URL</h2>

<p>This may be a bit redundant, as you may have thought to use Perplexity can be used as a &ldquo;search engine&rdquo; in your browser, but here&rsquo;s the URL in case you&rsquo;re looking for it:</p>

<p><code>https://www.perplexity.ai/search?q=%s</code></p>

<h2>Kagi bangs</h2>

<p>If you&rsquo;re a <a href="https://kagi.com">Kagi</a> user, you can setup each of these as a custom bang.</p>

<p><strong>Chat GPT</strong></p>

<p><img src="https://treyhunner.com/images/kagi-chatgpt-bang.png" title="Screenshot of Chat GPT bang settings for Chat GPT" ></p>

<p><strong>Claude</strong></p>

<p><img src="https://treyhunner.com/images/kagi-claude-bang.png" title="Screenshot of Chat GPT bang settings for Claude" ></p>

<p><strong>Perplexity</strong></p>

<p><img src="https://treyhunner.com/images/kagi-perplexity-bang.png" title="Screenshot of Perplexity bang settings for Kagi" ></p>

<p>I&rsquo;m not sure what bangs I ultimately want to use in the long-term.
Right now I have <strong>!x</strong> set to query Perplexity, <strong>!c</strong> set to query Chat GPT, and <strong>!l</strong> set to query Claude.</p>

<p>I was considering <strong>!g</strong> for Chat <strong>G</strong>PT but that searches Google already and I was considering <strong>!c</strong> for Claude, but I had already set that to search Chat GPT, so I went with <strong>!l</strong> for C<strong>l</strong>aude&hellip; or maybe it&rsquo;s <strong>!l</strong> for <strong>L</strong>LM. 🤔</p>

<h2>No Gemini &ldquo;search&rdquo; support</h2>

<p>So Claude, Chat GPT, and Kagi can all initiate new conversations directly from your browser&rsquo;s URL bar using these 3 URLs:</p>

<ul>
<li><code>https://chatgpt.com/?q=%s</code></li>
<li><code>https://claude.ai/new?q=%s</code></li>
<li><code>https://www.perplexity.ai/search?q=%s</code></li>
</ul>


<p>As far as I can tell, Gemini does not support starting a conversation via a query string.
Maybe this is related to Google embedding a similar feature <a href="https://chromeunboxed.com/chromes-url-bar-is-getting-quick-access-to-gemini-ai/">directly into Chrome</a>. 🤷</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A beautiful Python monstrosity]]></title>
    <link href="https://treyhunner.com/2024/06/a-beautiful-python-monstrosity/"/>
    <updated>2024-06-08T14:30:00-07:00</updated>
    <id>https://treyhunner.com/2024/06/a-beautiful-python-monstrosity</id>
    <content type="html"><![CDATA[<p>Creating performance tests for <a href="https://www.pythonmorsels.com">Python Morsels</a> exercises is a frequent annoyance</p>

<p>I loathe writing automated tests for performance-related exercises because they&rsquo;re <em>always</em> flaky.
How flaky depends on the exercise, what I&rsquo;m testing, and the time variability inherent in the particular Python features that a learner might use.</p>

<p>I came up with a solution for flaky tests recently, but it also makes my tests less readable.
I then came up with a tool to improve the readability, but that has its own trade-offs.</p>

<p>The code I eventually came up with is a <strong>beautiful Python monstrosity</strong>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@attempt_n_times</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">_</span><span class="p">():</span>
</span><span class='line'>    <span class="n">nonlocal</span> <span class="n">micro_time</span><span class="p">,</span> <span class="n">tiny_time</span>
</span><span class='line'>    <span class="n">micro_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="n">micro_numbers</span><span class="p">)</span>
</span><span class='line'>    <span class="n">tiny_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="n">tiny_numbers</span><span class="p">)</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">assertLess</span><span class="p">(</span><span class="n">tiny_time</span><span class="p">,</span> <span class="n">micro_time</span><span class="o">*</span><span class="n">n</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ll explain what that code does, but first let&rsquo;s talk about why it&rsquo;s needed.</p>

<h2>The flaky performance tests</h2>

<p>My flaky performance tests initially looked like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">test_some_test</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="n">n</span><span class="p">,</span> <span class="n">m</span> <span class="o">=</span> <span class="mf">2.45</span><span class="p">,</span> <span class="mf">2.04</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">micro_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="n">micro_numbers</span><span class="p">)</span>
</span><span class='line'>    <span class="n">tiny_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="n">tiny_numbers</span><span class="p">)</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">assertLess</span><span class="p">(</span><span class="n">tiny_time</span><span class="p">,</span> <span class="n">micro_time</span><span class="o">*</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">small_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="n">small_numbers</span><span class="p">)</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">assertLess</span><span class="p">(</span><span class="n">small_time</span><span class="p">,</span> <span class="n">tiny_time</span><span class="o">*</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">assertLess</span><span class="p">(</span><span class="n">small_time</span><span class="p">,</span> <span class="n">micro_time</span><span class="o">*</span><span class="n">n</span><span class="o">*</span><span class="n">m</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">medium_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="n">medium_numbers</span><span class="p">)</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">assertLess</span><span class="p">(</span><span class="n">medium_time</span><span class="p">,</span> <span class="n">micro_time</span><span class="o">*</span><span class="n">n</span><span class="o">*</span><span class="n">m</span><span class="o">*</span><span class="n">m</span><span class="p">)</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">assertLess</span><span class="p">(</span><span class="n">medium_time</span><span class="p">,</span> <span class="n">tiny_time</span><span class="o">*</span><span class="n">n</span><span class="o">*</span><span class="n">m</span><span class="p">)</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">assertLess</span><span class="p">(</span><span class="n">medium_time</span><span class="p">,</span> <span class="n">small_time</span><span class="o">*</span><span class="n">n</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first block runs a performance test for the user&rsquo;s function on a very small list and on a slightly larger list and then asserting that the slightly larger list didn&rsquo;t take <em>too</em> much longer to run.
The next two blocks run the same code on even larger lists and make further assertions about the relative times that the code took to run.</p>

<p>This roughly approximates the <a href="https://www.pythonmorsels.com/time-complexities/">time complexity</a> of this code.</p>

<h2>Running performance checks in a loop</h2>

<p>These performance checks need to:</p>

<ol>
<li>Predictably fail for inefficient solutions</li>
<li>Predictably pass for efficient solutions</li>
<li>Run <em>fast</em> (within just a few seconds) even when the code is inefficient</li>
<li>Avoid the use of <code>threading</code> because they&rsquo;ll be running on WebAssembly in the browser</li>
<li>Run consistently on pretty much any computer</li>
</ol>


<p>These 5 requirements together have caused me countless headaches.
I get the tests passing well, but they don&rsquo;t always fail when they should.
I get the tests failing and passing when they should, but then they&rsquo;re too slow.
And so on&hellip;</p>

<p>Notice the <code>n</code> and <code>m</code> factors in the above assertions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="bp">self</span><span class="o">.</span><span class="n">assertLess</span><span class="p">(</span><span class="n">small_time</span><span class="p">,</span> <span class="n">micro_time</span><span class="o">*</span><span class="n">n</span><span class="o">*</span><span class="n">m</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If <code>n</code> and <code>m</code> are too big, we&rsquo;ll get false positives (tests passing when they should fail).
If <code>n</code> and <code>m</code> are too small, we&rsquo;ll get false negatives (tests failing when they should pass).</p>

<p>To avoid both <a href="https://en.wikipedia.org/wiki/Type_I_and_type_II_errors">Type I and Type II errors</a>, I decided to keep <code>n</code> and <code>m</code> small but attempt the assertion block multiple times.</p>

<p>Here&rsquo;s the (far less flaky) revised code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">test_some_test</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="n">n</span><span class="p">,</span> <span class="n">m</span> <span class="o">=</span> <span class="mf">2.45</span><span class="p">,</span> <span class="mf">2.04</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">attempts_left</span> <span class="ow">in</span> <span class="nb">reversed</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)):</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="n">micro_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="n">micro_numbers</span><span class="p">)</span>
</span><span class='line'>            <span class="n">tiny_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="n">tiny_numbers</span><span class="p">)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">assertLess</span><span class="p">(</span><span class="n">tiny_time</span><span class="p">,</span> <span class="n">micro_time</span><span class="o">*</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>            <span class="k">break</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">AssertionError</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">attempts_left</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="k">raise</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">attempts_left</span> <span class="ow">in</span> <span class="nb">reversed</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)):</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="n">small_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="n">small_numbers</span><span class="p">)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">assertLess</span><span class="p">(</span><span class="n">small_time</span><span class="p">,</span> <span class="n">tiny_time</span><span class="o">*</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">assertLess</span><span class="p">(</span><span class="n">small_time</span><span class="p">,</span> <span class="n">micro_time</span><span class="o">*</span><span class="n">n</span><span class="o">*</span><span class="n">m</span><span class="p">)</span>
</span><span class='line'>            <span class="k">break</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">AssertionError</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">attempts_left</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="k">raise</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">attempts_left</span> <span class="ow">in</span> <span class="nb">reversed</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">)):</span>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="n">medium_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="n">medium_numbers</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertLess</span><span class="p">(</span><span class="n">medium_time</span><span class="p">,</span> <span class="n">micro_time</span><span class="o">*</span><span class="n">n</span><span class="o">*</span><span class="n">m</span><span class="o">*</span><span class="n">m</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertLess</span><span class="p">(</span><span class="n">medium_time</span><span class="p">,</span> <span class="n">tiny_time</span><span class="o">*</span><span class="n">n</span><span class="o">*</span><span class="n">m</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertLess</span><span class="p">(</span><span class="n">medium_time</span><span class="p">,</span> <span class="n">small_time</span><span class="o">*</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">AssertionError</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">attempts_left</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="k">raise</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>for</code> loop runs the code multiple times, the <code>break</code> statement stops the code as soon as the assertions all pass, and the <code>except</code> and <code>if</code> ensure that any assertion errors are suppressed until/unless we&rsquo;re on the final iteration of the loop.</p>

<p>Let&rsquo;s call this a <code>for</code>-<code>try</code>-<code>break</code>-<code>except</code>-<code>if</code>-<code>raise</code> pattern.
It&rsquo;s an absurdly verbose name fitting of absurdly verbose code.</p>

<p>This <code>for</code>-<code>try</code>-<code>break</code>-<code>except</code>-<code>if</code>-<code>raise</code> pattern works pretty well!
But it&rsquo;s not pretty.</p>

<p>Like many programmers, I believe that <strong>Don&rsquo;t Repeat Yourself</strong> (<a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">DRY</a>) need not apply to tests.
Tests are <em>allowed</em> to be repetitive if <a href="https://stackoverflow.com/questions/6453235/what-does-damp-not-dry-mean-when-talking-about-unit-tests">the verbosity improves readability</a>.</p>

<p>But there is <em>so much noise</em> in that code!
I decided that removing some noise might improve readability.
So I devised a helper utility to reduce the repetition.</p>

<h2>In search of a solution</h2>

<p>While pondering the repetitive noise in this code, I wondered what Python features I could use to abstract away this <code>for</code>-<code>try</code>-<code>break</code>-<code>except</code>-<code>if</code>-<code>raise</code> pattern.</p>

<p>Could I make a context manager and use a <code>with</code> block?
That might help with the <code>try</code>-<code>except</code>, but context managers can&rsquo;t run their code block multiple times, so that wouldn&rsquo;t help with the <code>for</code> and the <code>break</code>.
So a context manager is out.</p>

<p>Could I abstract this away into a looping helper by implementing a generator function?
We <em>are</em> looping and generator functions <em>can</em> <code>break</code> early.
But, a generator function can&rsquo;t catch an exception that&rsquo;s raised within the <em>body</em> of a loop.
So a generator function wouldn&rsquo;t work either.</p>

<p>What about a decorator? 🤔</p>

<p>Context managers and decorators both sandwich a block of code.
But decorators sandwich functions and they have the power to run the same function <em>repeatedly</em>.
A decorator might work!</p>

<p>Here&rsquo;s a decorator that will run a given function up to 10 times (until no <code>AssertionError</code> is raised):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">try_10_times</span><span class="p">(</span><span class="n">function</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">():</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">attempts_left</span> <span class="ow">in</span> <span class="nb">reversed</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)):</span>
</span><span class='line'>            <span class="k">try</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">function</span><span class="p">()</span>
</span><span class='line'>            <span class="k">except</span> <span class="ne">AssertionError</span><span class="p">:</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">attempts_left</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">raise</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">wrapper</span>
</span></code></pre></td></tr></table></div></figure>


<p>To use this decorator, we would need to define a function and then call that function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@try_10_times</span>
</span><span class='line'><span class="k">def</span> <span class="nf">assertions</span><span class="p">():</span>
</span><span class='line'>    <span class="n">micro_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="n">micro_numbers</span><span class="p">)</span>
</span><span class='line'>    <span class="n">tiny_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="n">tiny_numbers</span><span class="p">)</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">assertLess</span><span class="p">(</span><span class="n">tiny_time</span><span class="p">,</span> <span class="n">micro_time</span><span class="o">*</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">assertions</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>This isn&rsquo;t <em>quite</em> good enough though&hellip;</p>

<ol>
<li>We need a pattern to run code N times (not necessarily exactly 10)</li>
<li>We reference the variables defined in each block in later blocks, so <code>micro_time</code> and <code>tiny_time</code> will need to be available <em>outside</em> that function</li>
<li>We need this function to run just one time right after it&rsquo;s defined&hellip; could we do that automatically?</li>
</ol>


<p>All 3 of these problems are solvable:</p>

<ol>
<li>We need a decorator that accepts arguments</li>
<li>We need to use <em>rarely seen</em> <a href="https://stackoverflow.com/a/1261961/98187"><code>nonlocal</code></a> statement</li>
<li>We could have the decorator automatically call the decorated function</li>
</ol>


<h2>The final <em>weird</em> decorator</h2>

<p>Here&rsquo;s the decorator I ended up with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">attempt_n_times</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Run tests multiple times if assertions are raised.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    Allows for more forgiving tests when assertions may be a bit flaky.</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">decorator</span><span class="p">(</span><span class="n">function</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;This looks like a decorator, but it actually runs the function!&quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">attempts_left</span> <span class="ow">in</span> <span class="nb">reversed</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)):</span>
</span><span class='line'>            <span class="k">try</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">function</span><span class="p">()</span>
</span><span class='line'>            <span class="k">except</span> <span class="ne">AssertionError</span><span class="p">:</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">attempts_left</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                    <span class="k">raise</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">decorator</span>
</span></code></pre></td></tr></table></div></figure>


<p>This decorator accepts an <code>n</code> argument which determines the maximum number of times the decorated function should be called.
The decorator then <em>calls</em> the function repeatedly in a <code>for</code> loop and a <code>try</code>-<code>except</code> block.
As soon as an <code>AssertionError</code> is <em>not</em> raised during one of these function calls, the looping stops.</p>

<p>The <em>weirdest</em> part about this decorator is that it calls the decorated function.
Note that the <code>decorator</code> function doesn&rsquo;t define a <code>wrapper</code> function within itself&hellip; it just runs code right away!</p>

<h2>The resulting beautiful Python monstrosity</h2>

<p>Here&rsquo;s the final refactored test code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">test_some_test</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="n">n</span><span class="p">,</span> <span class="n">m</span> <span class="o">=</span> <span class="mf">2.45</span><span class="p">,</span> <span class="mf">2.04</span>
</span><span class='line'>    <span class="n">micro_time</span> <span class="o">=</span> <span class="n">tiny_time</span> <span class="o">=</span> <span class="n">small_time</span> <span class="o">=</span> <span class="n">medium_time</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@attempt_n_times</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_</span><span class="p">():</span>
</span><span class='line'>        <span class="n">nonlocal</span> <span class="n">micro_time</span><span class="p">,</span> <span class="n">tiny_time</span>
</span><span class='line'>        <span class="n">micro_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="n">micro_numbers</span><span class="p">)</span>
</span><span class='line'>        <span class="n">tiny_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="n">tiny_numbers</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertLess</span><span class="p">(</span><span class="n">tiny_time</span><span class="p">,</span> <span class="n">micro_time</span><span class="o">*</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@attempt_n_times</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_</span><span class="p">():</span>
</span><span class='line'>        <span class="n">nonlocal</span> <span class="n">small_time</span>
</span><span class='line'>        <span class="n">small_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="n">small_numbers</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertLess</span><span class="p">(</span><span class="n">small_time</span><span class="p">,</span> <span class="n">tiny_time</span><span class="o">*</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertLess</span><span class="p">(</span><span class="n">small_time</span><span class="p">,</span> <span class="n">micro_time</span><span class="o">*</span><span class="n">n</span><span class="o">*</span><span class="n">m</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@attempt_n_times</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_</span><span class="p">():</span>
</span><span class='line'>        <span class="n">nonlocal</span> <span class="n">medium_time</span>
</span><span class='line'>        <span class="n">medium_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="n">medium_numbers</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertLess</span><span class="p">(</span><span class="n">medium_time</span><span class="p">,</span> <span class="n">micro_time</span><span class="o">*</span><span class="n">n</span><span class="o">*</span><span class="n">m</span><span class="o">*</span><span class="n">m</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertLess</span><span class="p">(</span><span class="n">medium_time</span><span class="p">,</span> <span class="n">tiny_time</span><span class="o">*</span><span class="n">n</span><span class="o">*</span><span class="n">m</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">assertLess</span><span class="p">(</span><span class="n">medium_time</span><span class="p">,</span> <span class="n">small_time</span><span class="o">*</span><span class="n">n</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>attempt_n_times</code> decorator <strong>immediately calls the function it decorates</strong>.
Each function is defined and immediately called one or more times, in a <code>try</code>-<code>except</code> block within a loop.</p>

<p>That&rsquo;s why we&rsquo;ve named these functions with the <a href="https://stackoverflow.com/questions/36315309/how-does-python-throw-away-variable-work">throwaway</a> <code>_</code> name: <strong>we don&rsquo;t care about the name of a function we&rsquo;re never going to refer to again</strong>.</p>

<p>Also note the use of the <code>nonlocal</code> statement.
Each function in Python has its own scope and all assignments <a href="https://www.pythonmorsels.com/local-and-global-variables/#assigning-to-local-and-global-variables">assign to the local scope</a> by default.
That <code>nonlocal</code> variable pulls those variables to the scope of the outer function instead.</p>

<p>Compare the above code to the code just before this refactor:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">test_some_test</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="n">n</span><span class="p">,</span> <span class="n">m</span> <span class="o">=</span> <span class="mf">2.45</span><span class="p">,</span> <span class="mf">2.04</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">attempts_left</span> <span class="ow">in</span> <span class="nb">reversed</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)):</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="n">micro_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="n">micro_numbers</span><span class="p">)</span>
</span><span class='line'>            <span class="n">tiny_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="n">tiny_numbers</span><span class="p">)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">assertLess</span><span class="p">(</span><span class="n">tiny_time</span><span class="p">,</span> <span class="n">micro_time</span><span class="o">*</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>            <span class="k">break</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">AssertionError</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">attempts_left</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="k">raise</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">attempts_left</span> <span class="ow">in</span> <span class="nb">reversed</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)):</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="n">small_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="n">small_numbers</span><span class="p">)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">assertLess</span><span class="p">(</span><span class="n">small_time</span><span class="p">,</span> <span class="n">tiny_time</span><span class="o">*</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">assertLess</span><span class="p">(</span><span class="n">small_time</span><span class="p">,</span> <span class="n">micro_time</span><span class="o">*</span><span class="n">n</span><span class="o">*</span><span class="n">m</span><span class="p">)</span>
</span><span class='line'>            <span class="k">break</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">AssertionError</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">attempts_left</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="k">raise</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">attempts_left</span> <span class="ow">in</span> <span class="nb">reversed</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">)):</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="n">medium_time</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="n">medium_numbers</span><span class="p">)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">assertLess</span><span class="p">(</span><span class="n">medium_time</span><span class="p">,</span> <span class="n">micro_time</span><span class="o">*</span><span class="n">n</span><span class="o">*</span><span class="n">m</span><span class="o">*</span><span class="n">m</span><span class="p">)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">assertLess</span><span class="p">(</span><span class="n">medium_time</span><span class="p">,</span> <span class="n">tiny_time</span><span class="o">*</span><span class="n">n</span><span class="o">*</span><span class="n">m</span><span class="p">)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">assertLess</span><span class="p">(</span><span class="n">medium_time</span><span class="p">,</span> <span class="n">small_time</span><span class="o">*</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>            <span class="k">break</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">AssertionError</span><span class="p">:</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">attempts_left</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="k">raise</span>
</span></code></pre></td></tr></table></div></figure>


<p>I find the refactored version easier to skim.</p>

<p>But that <code>attempt_n_times</code> decorator <em>does</em> abuse the decorator syntax.
Decorators aren&rsquo;t <em>meant</em> to call the function they&rsquo;re decorating.</p>

<p>Is this misuse of decorators worth it?</p>

<h2>Is this worth it?</h2>

<p>Decorators aren&rsquo;t supposed to immediately call the function they decorate.
But there&rsquo;s nothing stopping them from doing so.
I feel that I&rsquo;ve traded &ldquo;normal code&rdquo; for a beautiful monstrosity that&rsquo;s easier to skim at a glance.</p>

<p>The <code>attempt_n_times</code> decorator is pretending that it&rsquo;s a block-level tool by using a function because there&rsquo;s no other way to invent such a tool in Python.</p>

<p>I think abstracting away the <code>for</code>-<code>try</code>-<code>break</code>-<code>except</code>-<code>if</code>-<code>raise</code> pattern was worth it, even though I ended up abusing Python&rsquo;s decorator syntax in the process.</p>

<p>What do you think?
Was that <code>attempt_n_times</code> abstraction worth it?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PyCon 2024 Reflection]]></title>
    <link href="https://treyhunner.com/2024/05/pycon-2024-reflection/"/>
    <updated>2024-05-28T13:00:00-07:00</updated>
    <id>https://treyhunner.com/2024/05/pycon-2024-reflection</id>
    <content type="html"><![CDATA[<p>I traveled back home from PyCon US 2024 last week.
This is my reflection on my time at PyCon.</p>

<h2>Attempting to eat vegan</h2>

<p>Since 2020, I&rsquo;ve been <a href="https://mastodon.social/@treyhunner/111794737871397453">gradually eating more plant-based</a> and <a href="https://mastodon.social/@treyhunner/111982459215543497">a few months ago</a> I decided to take PyCon as an opportunity to attempt exclusively vegan eating outside my own home.
As <a href="https://mastodon.social/@treyhunner/112493037289419028">I noted on Mastodon</a>, it was a challenge and I failed every day at least once but I found the experience worthwhile.
Our food system is <em>very</em> dairy-oriented.</p>

<h2>Staying hydrated and fed</h2>

<p>One of the first things I did before heading to the convention center was walk to Target and buy snacks and drinks.
When at PyCon, I prefer to spend 30 minutes and $20 to have a backup plan for last minute hydration and calories (even if not the <em>greatest</em> calories).
I never quite know when I might sleep through breakfast, find lunch lacking, or wish I&rsquo;d eaten more dinner.</p>

<h2>A tutorial, an orientation, a lightning talk, and open spaces</h2>

<p>My responsibilities at PyCon this year included teaching a tutorial and helping run the Newcomer&rsquo;s Orientation with <a href="https://x.com/KojoIdrissa">Kojo</a> and <a href="https://social.coop/@brainwane">Sumana</a>.</p>

<p><a href="https://mastodon.social/@treyhunner/112479031063220835">Yngve and Marie</a> offered to act as teaching assistants during my tutorial and I was very grateful for their help!
<a href="https://x.com/mathsppblog">Rodrigo</a> and Krishna also offered to TA just before my tutorial started and I was extra grateful to have even more help than I&rsquo;d expected.
The attendees were mostly better prepared than I expected they would be, which was also great.
It&rsquo;s always great to spend less time on setup and more time exploring Python together.</p>

<p>The newcomer&rsquo;s orientation the next day went well.
We kept it fairly brief and were able to address about 10 minutes of audience questions before the opening reception started.</p>

<p>Once my PyCon responsibilities completed, I invented a few more (light) responsibilities for myself. 😅
I signed up to give a lightning talk on how to give a lightning talk.
They slotted it as the first talk of the first lightning talk session on Friday night.
I kept this talk pretty much the same as the one <a href="https://youtu.be/aNHBr7q-KVw?feature=shared&amp;t=915">I presented DjangoCon 2016</a>.
I could have made the transitions fancier, but I decided to embrace the idea of simplicity with the hope that audience members might think &ldquo;look if that first speaker can give such a simple and succinct presentation, maybe I can too.&rdquo;</p>

<p>On Saturday I ran <a href="https://mastodon.social/@treyhunner/112457077109815019">an open space on Python Learning</a>.
Some of you showed up because you&rsquo;re on my mailing list or you&rsquo;re paying Python Morsels subscribers.
Many folks showed up because the topic was interesting, either as a learner or as a teacher.
I really enjoyed the round-table-style conversation we had.</p>

<p>I also ran a <a href="https://mastodon.social/@treyhunner/112468136603503893">Cabo Card game open space</a> during lunch on Sunday on the 4th floor rooftop.
Cabo is my usual conference ice breaker game and I played it at least a few nights <a href="https://mas.to/@davidism/112465501797531611">in The Westin lobby</a> as well.</p>

<h2>Seeing conference friends, old and new</h2>

<p>For me, PyCon is largely about having conversations.
The talks and tutorials are great for starting me thinking about an idea.
The hallway track, open spaces, and meals are great for continuing conversations about those ideas (or <em>other</em> ideas).</p>

<p>My first morning in Pittsburgh, I chatted with <a href="https://www.linkedin.com/in/naomiceder/">Naomi</a> and <a href="https://x.com/reuvenmlerner/">Reuven</a>.
I&rsquo;m glad I ran into them before the conference kicked off because (as often happens at PyCon) I only very briefly saw either of them during the rest of PyCon!</p>

<p>After my tutorial that afternoon, I did dinner with Marie, Yngve, and Rodrigo at Rosewater Mediterranean (good vegan options, assuming you enjoy falafel and various sauces).
As sometimes happens at PyCon, another PyCon attendee, Sachin, joined our table because we noticed him eating on his own at a table near us and invited him to join us.</p>

<p>On Saturday, <a href="https://hachyderm.io/@melaniearbor">Melanie</a>, <a href="https://mas.to/@davidism">David</a>, <a href="https://x.com/kjaymiller">Jay</a>, and I had a sort of mini San Diego Python study group reunion dinner before inviting folks to join us for <a href="https://mastodon.social/@treyhunner/112465503888730383">Cabo and Knucklebones</a> one night.
The 4 of us originally met each other (along with <a href="https://hachyderm.io/@willingc">Carol</a> and other wonderful Python folks) at the San Diego Python study group about 10 years ago.</p>

<p>I had some wonderful conversations about ways to improve the Python documentation over dinner (at Nicky&rsquo;s Thai) on Sunday night with <em>so</em> many docs-concerned folks who I highly respect.
I&rsquo;m really excited that Python has <a href="https://peps.python.org/pep-0732/">the documentation editorial board</a> and I&rsquo;m hopeful that that board, with the help of many others community members, will usher in big improvements to the documentation in the coming years.</p>

<p>I also met a number of Internet acquaintances IRL for the first time at PyCon.
I met <a href="https://www.linkedin.com/in/tereza-iofciu/">Tereza</a> and <a href="https://www.linkedin.com/in/jessica0greene/">Jessica</a>, who I know from our work in the PSF Code of Conduct workgroup.
I met <a href="https://fosstodon.org/@slott56">Steve Lott</a>, who I originally knew as <a href="https://stackoverflow.com/users/10661/s-lott">a prolific question-answerer</a>.
I also met <a href="https://github.com/hugovk">Hugo</a>, a CPython core dev, the Python 3.14 &amp; 3.15 release manager, and a <a href="https://mastodon.social/@hugovk">social media user</a> (which is how I&rsquo;ve primarily interacted with him because the Internet is occasionally lovely).
I was also very excited to meet many <a href="https://www.pythonmorsels.com">Python Morsels members</a> as well as folks who know me through <a href="https://www.pythonmorsels.com/newsletter/">my weekly Python tips newsletter</a>.</p>

<p>I was grateful to chat with <a href="https://mastodon.social/@hynek">Hynek</a> and <a href="https://mastodon.social/@AlSweigart">Al</a> about creating talks, YouTube videos, and other online content.
I also enjoyed chatting with <a href="https://mastodon.social/@glyph">Glyph</a> a bit about our experiences consulting and training and (in hindsight) wished I&rsquo;d planned an open space for either consultants or trainers, both of which have been held at PyCon before but it just takes someone to stick it on the open space board.</p>

<p>Many folks I only saw very briefly (I said a quick hi and bye to <a href="https://aeracode.org/@andrew">Andrew</a> over lunch during the sprints) and some I didn&rsquo;t see at all (<a href="https://mastodon.social/@frank@frankwiles.social">Frank</a> was at PyCon but we never ran into each other).
Some I essentially saw through playing a few rounds of Cabo (<a href="https://social.coop/@Yhg1s">Thomas</a> and <a href="https://hachyderm.io/@ethantyping">Ethan</a> among many others).
We also ran into at least 4 other PyCon attendees in the airport on Tuesday afternoon, including <a href="https://www.linkedin.com/in/bbelderbos/">Bob</a> and <a href="https://www.linkedin.com/in/juliansequeira/">Julian</a>, who it&rsquo;s always a pleasure to see.</p>

<h2>A Mastodon-oriented PyCon</h2>

<p>On Thursday night I had the feeling that the number of Mastodon posts I saw on the <strong>#PyConUS</strong> hashtag was greater than the number of Twitter posts.
I (very unscientifically) counted up the number of posts I was seeing on each and found that my perception was correct: <a href="https://mastodon.social/@treyhunner/112453920848761679">Mastodon seemed to slightly overtake Twitter at PyCon this year</a>.</p>

<p>Over dinner on Wednesday, I tried to convince Marie, Yngve, and Rodrigo to get Mastodon accounts just to follow the hashtag during PyCon.
I succeeded: <a href="https://mastodon.social/@treyhunner/112479031063220835">Marie and Yngve</a> and <a href="https://fosstodon.org/@davep/112458736212760528">Rodrigo</a>!</p>

<p>Mastodon will never be <em>the</em> social media platform.
Its decentralized nature is too much of a barrier for many folks.
However, it does seem to be used by <em>enough</em> somewhat nerdy Python folks to now be one the most used social media platform for PyCon posting.</p>

<h2>The talks</h2>

<p>I ended up spending little time in the talks during PyCon.
This wasn&rsquo;t on purpose.
I just happened to attend many open spaces, take personal breaks, and end up in hallway conversations often.
I did see many of the lightning talks live, as well as <a href="https://x.com/kjaymiller">Jay</a>, <a href="https://simonwillison.net/@simon">Simon</a>, and <a href="https://social.coop/@brainwane">Sumana</a>&rsquo;s keynotes (all of them were exceptional) and the opening and closing remarks.
I also watched a few talks from my hotel room while taking breaks.</p>

<p>While I&rsquo;m often a bit light on my talk load at PyCon, I do recommend folks attend a good handful of live talks during PyCon, <a href="https://mastodon.social/@jonafato/112514979873634457">as Jon</a> and <a href="https://hynek.me/articles/hallway-track/">others</a> recommend.
I wish I had seen more talks live.
I also wish I had attended a few open spaces that I missed.</p>

<p>At any one time, I know that I&rsquo;m always missing about 90% of what&rsquo;s scheduled during PyCon (if you include the talks <em>and</em> the open spaces).
That&rsquo;s assuming I don&rsquo;t ditch the conference entirely for a few hours and <a href="https://social.coop/@bitprophet/112452662184950234">walk across a bridge</a> or <a href="https://mastodon.social/@AlSweigart/112514009252817862">ride a funicular</a> (neither of which I did, as I stuck around the venue the whole time this year).
I am glad I saw, did, and talked about everything I did, but there&rsquo;s always something I wish I&rsquo;d seen/done!</p>

<h2>The sprints</h2>

<p>Thanks to the documentation dinner, I had a couple documentation-related ideas in mind on the first day of sprints.
But I&rsquo;m also <em>really</em> excited about the new Python REPL coming in Python 3.13 (<a href="https://x.com/treyhunner/status/1720185049461801371">in case</a> you <a href="https://treyhunner.com/2024/05/installing-a-custom-python-build-with-pyenv/">can&rsquo;t tell</a> from <a href="https://treyhunner.com/2024/05/my-favorite-python-3-dot-13-feature/">how much</a> I <a href="https://x.com/treyhunner/status/1788307498715554160">talk</a> about <a href="https://www.linkedin.com/posts/treyhunner_python-activity-7194082747315859456-qQjk/?utm_source=share&amp;utm_medium=member_desktop">it</a>), so I sprinted on that instead.
<a href="https://github.com/ambv">Łukasz</a> assigned me the task of researching keyboard shortcuts that the new REPL is missing (compared to the current one on Linux and Mac) so <a href="https://github.com/python/cpython/issues/119034#issuecomment-2121142576">I spent some time researching that</a>.
I got to see the REPL running on <a href="https://fosstodon.org/@tonybaloney/112477098396842900">Anthony&rsquo;s laptop</a> on Windows and I am <em>so excited</em> that Windows support will be included before 3.13.0 lands! 🎉</p>

<p>Partly inspired by <a href="https://youtu.be/RL3HFj5SDqI?t=1549">Carol Willing&rsquo;s PyCon preview message</a>, I also thanked <a href="https://github.com/pablogsal">Pablo</a>, <a href="https://github.com/ambv">Łukasz</a>, and <a href="https://github.com/lysnikolaou">Lysandros</a> in-person for all their work on the new Python REPL. 🤗</p>

<h2>Until next year</h2>

<p>I&rsquo;ll be <a href="https://www.pyohio.org/2024/program/speakers/keynote-speakers/#trey-hunner">keynoting at PyOhio</a> this year.</p>

<p>Besides PyOhio, I&rsquo;m not sure whether I&rsquo;ll make it to another conference until PyCon US next year.
I&rsquo;d love to attend all of them, but I do have work and personal goals that need accomplishing too!</p>

<p>I hope to see you at PyCon US 2025!
In the meantime, if you&rsquo;re wishing we&rsquo;d exchanged contact details or met in-person, please feel free to stay in touch through <a href="https://mastodon.social/@treyhunner">Mastodon</a>, <a href="https://mastodon.social/@treyhunner">LinkedIn</a>, <a href="https://pym.dev/newsletter">my weekly emails</a>, <a href="https://www.youtube.com/@PythonMorsels">YouTube</a>, or <a href="http://twitter.com/treyhunner">Twitter</a>.</p>

<p><img class="no-border" src="https://treyhunner.com/images/pycon2024-pic.jpg"  alt="Yellow bridges over a river just outside the PyCon 2024 conference center in Pittsburgh"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The new REPL in Python 3.13]]></title>
    <link href="https://treyhunner.com/2024/05/my-favorite-python-3-dot-13-feature/"/>
    <updated>2024-05-08T13:30:00-07:00</updated>
    <id>https://treyhunner.com/2024/05/my-favorite-python-3-dot-13-feature</id>
    <content type="html"><![CDATA[<p>Python 3.13 just hit feature freeze with <a href="https://www.python.org/downloads/release/python-3130b1/">the first beta release today</a>.</p>

<p>Just before the feature freeze, a shiny new feature was added: <strong>a brand new Python REPL</strong>. ✨</p>

<p>This new Python REPL is the feature I&rsquo;m most looking forward to using while teaching after 3.13.0 final is released later this year.
In terms of improving my quality of life while teaching Python, this new REPL may be my favorite feature since f-strings were added in Python 3.6.</p>

<p>I&rsquo;d like to share what&rsquo;s so great about this new REPL and what additional improvements I&rsquo;m hoping we might see in future Python releases.</p>

<p>None of these features will be ground breaking for folks who are already using <a href="https://github.com/ipython/ipython">IPython</a> day-to-day.
This new REPL really shines when you can&rsquo;t or shouldn&rsquo;t install PyPI packages (as when teaching a brand new Pythonistas in a locked-down corporate environment).</p>

<h2>Little niceties</h2>

<p>The first thing you&rsquo;ll notice when you launch the new REPL is the colored prompt.</p>

<p><img src="https://treyhunner.com/images/new-repl-intro.gif"></p>

<p>You may also notice that as you type a block of code, after the first indented line, the next line will be auto-indented!
Additionally, hitting the Tab key inserts 4 spaces now, which means there&rsquo;s no more need to ever hit <code>Space Space Space Space</code> to indent ever again.</p>

<p>At this point you might be thinking, &ldquo;wait did I accidentally launch ptpython or some other alternate REPL?&rdquo;
But it gets even better!</p>

<h2>You can &ldquo;exit&rdquo; now</h2>

<p>Have you ever typed <code>exit</code> at the Python REPL?
If so, you&rsquo;ve seen a message like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">exit</span>
</span><span class='line'><span class="go">Use exit() or Ctrl-D (i.e. EOF) to exit</span>
</span></code></pre></td></tr></table></div></figure>


<p>That feels a bit silly, doesn&rsquo;t it?
Well, typing <code>exit</code> will exit immediately.</p>

<p><img src="https://treyhunner.com/images/new-repl-exit.gif"></p>

<p>Typing <code>help</code> also enters help mode now (previously you needed to call <code>help()</code> as a function).</p>

<h2>Block-level history</h2>

<p>The feature that will make the biggest different in my own usage of the Python REPL is block-level history.</p>

<p><img src="https://treyhunner.com/images/new-repl-block.gif"></p>

<p>I make typos all the time while teaching.
I also often want to re-run a specific block of code with a couple small changes.</p>

<p>The old-style Python REPL stores history line-by-line.
So editing a block of code in the old REPL required hitting the up arrow many times, hitting Enter, hitting the up arrow many more times, hitting Enter, etc. until each line in a block was chosen.
At the same time you also needed to make sure to edit your changes along the way&hellip; or you&rsquo;ll end up re-running the same block with the same typo as before!</p>

<p>The ability to edit a previously typed <em>block</em> of code is huge for me.
For certain sections of my Python curriculum, I hop into <a href="https://github.com/prompt-toolkit/ptpython">ptpython</a> or <a href="https://github.com/ipython/ipython">IPython</a> specifically for this feature.
Now I&rsquo;ll be able to use the default Python REPL instead.</p>

<h2>Pasting code <em>just works</em></h2>

<p>The next big feature for me is the ability to paste code.</p>

<p>Check this out:</p>

<p><img src="https://treyhunner.com/images/new-repl-paste.gif"></p>

<p>Not impressed?
Well, watch what happens when we paste that same block of code into the old Python REPL:</p>

<p><img src="https://treyhunner.com/images/old-repl-paste.gif"></p>

<p>The old REPL treated pasted text the same as manually typed text.
When two consecutive newlines were encountered in the old REPL, it would end the current block of code because it assumed the Enter key had been pressed twice.</p>

<p>The new REPL supports <a href="https://en.wikipedia.org/wiki/Bracketed-paste">bracketed paste</a>, which is was invented in 2002 and has since been adopted by all modern terminal emulators.</p>

<h2>No Windows support? Curses!</h2>

<p><strong>EDIT</strong>: This whole section is now irrelevant!
During the PyCon US sprints in late May 2024, the <code>readline</code> and <code>curses</code> dependencies were removed and <a href="https://mastodon.social/@tonybaloney@fosstodon.org/112477098540793635">Windows support</a> will be included in the second beta release of Python 3.13.0! 🎉</p>

<p>Unfortunately, this new REPL <strike>doesn&rsquo;t currently work on Windows</strike>.
This new REPL relies on the <code>curses</code> and <code>readline</code> modules, neither of which are available on Windows.</p>

<p>The <a href="https://pym.dev/repl">in-browser Python REPL</a> on Python Morsels also won&rsquo;t be able to use the new REPL because readline and curses aren&rsquo;t available in the WebAssembly Python build.</p>

<h2>Beta test Python 3.13 to try out the new REPL 💖</h2>

<p>Huge thanks to Pablo Galindo Salgado, Łukasz Langa, and Lysandros Nikolaou <a href="https://docs.python.org/3.13/whatsnew/3.13.html">for implementing this new feature</a>!
And thanks to Michael Hudson-Doyle and Armin Rigo for implementing the original version of this REPL, which was <a href="https://github.com/pypy/pyrepl">heavily borrowed from PyPy&rsquo;s pyrepl project</a>.</p>

<p>The new Python REPL coming in 3.13 is a major improvement over the old REPL.</p>

<p>Want to try out this new REPL?
Download and install <a href="https://www.python.org/downloads/release/python-3130b1/">Python 3.13.0 beta 1</a>!</p>

<p>Beta testing new Python releases helps the Python core team ensure the final release of 3.13.0 is as stable and functional as possible.
If you notice a bug, <a href="https://github.com/python/cpython/issues">check the issue tracker</a> to see if it&rsquo;s been reported yet and if not report it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing a custom Python build with pyenv]]></title>
    <link href="https://treyhunner.com/2024/05/installing-a-custom-python-build-with-pyenv/"/>
    <updated>2024-05-03T21:26:23-07:00</updated>
    <id>https://treyhunner.com/2024/05/installing-a-custom-python-build-with-pyenv</id>
    <content type="html"><![CDATA[<p>I am <em>so</em> excited about the new Python REPL that will <em>likely</em> land in Python 3.13.
I&rsquo;ve been following <a href="https://github.com/python/cpython/pull/111567">this CPython pull request</a> since I heard <a href="https://github.com/pablogsal">Pablo</a> and <a href="https://lukasz.langa.pl">Łukasz</a> announce their work on the new Python REPL <a href="https://twitter.com/treyhunner/status/1720186574032531780">in episode 1</a> of their new <a href="https://podcasts.apple.com/us/podcast/core-py/id1712665877">core.py podcast</a>.</p>

<h2>Github notifications? 🤔</h2>

<p>That pull request was quiet for many months, but in the last couple weeks, I started seeing email notifications in my inbox about it.
I&rsquo;ve never fancied myself a competent C developer and I try to steer clear from understanding TTY magic, so I have <em>no idea</em> what most of the commits do.
But seeing activity on this pull request rejuvenated my excitement about this upcoming feature!</p>

<p>I also remember reading that the Python 3.13 feature freeze is coming up soon, so I&rsquo;ve been silently cheering for that PR to make the cut before the deadline.</p>

<p>In the last few days, I decided that I should try committing to use this new REPL locally as my default Python environment.
When I type <code>python</code> on my machine, I want to live in this new shiny REPL.
I figure this will make it easier to spot bugs that might not have been noticed yet&hellip; though honestly it&rsquo;ll mostly just allow me to try out this fancy new REPL first-hand.</p>

<h2>Installing a custom CPython build in pyenv</h2>

<p>I use pyenv to manage the many Python versions I have installed on my machine.
I wondered whether it was possible to install a custom build of CPython with pyenv.</p>

<p>Instead of going to the pyenv documentation to figure out an answer, I argued with an AI until it gave me a working answer.
I tried a few AI systems at first, but Claude seemed to give me the most promising-looking answer so it was the one I argued with for 5-10 minutes until I got a working solution.</p>

<p>First, I created this <code>~/.pyenv/plugins/python-build/share/python-build/3.13.0-pyrepl</code> file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>prefer_openssl11
</span><span class='line'>export PYTHON_BUILD_CONFIGURE_WITH_OPENSSL=1
</span><span class='line'>install_package "pyrepl" "https://github.com/pablogsal/cpython/archive/pyrepl.tar.gz" standard verify_py39 ensurepip</span></code></pre></td></tr></table></div></figure>


<p>Then I ran this command, which took a couple minutes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pyenv install 3.13.0-pyrepl
</span></code></pre></td></tr></table></div></figure>


<p>After that, <code>pyenv versions</code> showed a new <code>3.13.0-pyrepl</code> version:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pyenv versions
</span><span class='line'>  system
</span><span class='line'>* 3.8.18 <span class="o">(</span><span class="nb">set </span>by /home/trey/.pyenv/version<span class="o">)</span>
</span><span class='line'>* 3.9.18 <span class="o">(</span><span class="nb">set </span>by /home/trey/.pyenv/version<span class="o">)</span>
</span><span class='line'>* 3.10.13 <span class="o">(</span><span class="nb">set </span>by /home/trey/.pyenv/version<span class="o">)</span>
</span><span class='line'>* 3.11.6 <span class="o">(</span><span class="nb">set </span>by /home/trey/.pyenv/version<span class="o">)</span>
</span><span class='line'>* 3.12.0 <span class="o">(</span><span class="nb">set </span>by /home/trey/.pyenv/version<span class="o">)</span>
</span><span class='line'>  3.13.0-pyrepl
</span></code></pre></td></tr></table></div></figure>


<p>I then added <code>3.13.0-pyrepl</code> to the top of my <code>~/.pyenv/version</code> file to make this my <em>default</em> Python:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>3.13.0-pyrepl
</span><span class='line'>3.12.0
</span><span class='line'>3.11.6
</span><span class='line'>3.10.13
</span><span class='line'>3.9.18
</span><span class='line'>3.8.18
</span></code></pre></td></tr></table></div></figure>


<p>And it worked!
Tying <code>python</code> showed the new colorful prompt.</p>

<p>Is is a bad idea to make this not-even-beta version of CPython the default Python on my machine?
I have no idea.
Everything&rsquo;s been fine for the last 10 hours at least&hellip; 🤷</p>

<p>If you ever need to try installing a custom CPython build with pyenv, maybe the above instructions will work.
They&rsquo;re mostly generated by a large language model that didn&rsquo;t give me a working answer until the third response&hellip; so feel free to let me know if it&rsquo;s all wrong (or all right?).</p>

<p>After this adventure, I checked my podcast feed this evening only to realize that there&rsquo;s <a href="https://mastodon.social/@ambv/112378026608575109">a new core.py episode</a> all about exactly this feature!
If you&rsquo;d like to hear some core developers nerd out about CPython development, give core.py a listen.
You don&rsquo;t need to understand how CPython development works to enjoy their enthusiasm. 💖</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10 years of Python conferences]]></title>
    <link href="https://treyhunner.com/2024/04/10-years-of-python-conferences/"/>
    <updated>2024-04-27T11:45:00-07:00</updated>
    <id>https://treyhunner.com/2024/04/10-years-of-python-conferences</id>
    <content type="html"><![CDATA[<p>10 years and 10 days ago I flew home from my very first Python conference.</p>

<p>I left a few days into the PyCon US 2014 sprints and I remember feeling a bit like summer camp was ending.
I&rsquo;d played board games, contributed to an open source project, seen tons of talks, and met a <em>ton</em> of people.</p>

<h2>My first Python conference: PyCon US 2014</h2>

<p>PyCon 2014 was the first Python conference I attended.</p>

<p>At the start of the conference I only knew a handful of San Diegans.
I left having met many more folks.
Some of the folks I met I knew from online forums, GitHub repos, or videos
I met Kenneth Love, Baptiste Mispelon, Carl Meyer, Eric Holscher in-person, among many others.
Most folks I met I had never encountered online, but I was glad to have met in person.</p>

<p>For the most part, I had no idea who anyone was, what they did with Python, or what they might be interested in talking about.
I also had no idea what most of the various non-talk activities were.
I found out about the Education Summit and hadn&rsquo;t realized that it required pre-registration.
The open spaces are one of my favorite parts of PyCon and I didn&rsquo;t even they existed until PyCon 2015.</p>

<p>I <em>did</em> stay for a couple days of the sprints and I was grateful for that.
Most of the memorable human connections I had were during the sprints.
I helped <a href="https://pyvideo.org">PyVideo</a> upgrade their code base from Python 2 to Python 3 (this was before Will and Sheila <a href="https://pyvideo.org/pages/thanks-will-and-sheila.html">stepped down as maintainers</a>).
Will guided me through the code base and seemed grateful for the help.</p>

<p>I also got the idea to write front-end JavaScript tests for Django during the sprints and eventually <a href="https://github.com/django/deps/blob/main/final/0003-javascript-tests.rst">started that process</a> after PyCon thanks to Carl Meyer&rsquo;s guidance.</p>

<h2>Attending regional conferences and DjangoCon</h2>

<p>In fall 2014, I attended Django BarCamp at the Eventbrite office.
That was my first exposure to the idea of an &ldquo;unconference&rdquo;&hellip; which I kept in mind when I spotted the open spaces board at PyCon 2015.</p>

<p>Before coming back to Montreal for <a href="https://twitter.com/treyhunner/status/585969805796212736">PyCon 2015</a>, I emailed Harry Percival to ask if he could use a teaching assistant during his tutorial on writing tests. His reply was much more enthusiastic than I expected: &ldquo;YES YES OH GOD YES THANK YOU THANK YOU THANK YOU TREY&rdquo;.
I was very honored to be able to help Harry, as my testing workflow was <em>heavily</em> inspired by many blog posts he&rsquo;d written about testing best practices in Django.</p>

<p>I coached at my first Django Girls event in 2015 in Ensenada and then my second at <a href="https://twitter.com/algosuna/status/641421944005378048">DjangoCon 2015</a> in Austin. I gave my first lightning talk at DjangoCon 2015, comparing modern JavaScript to Python. It was a lightning talk I had given at the San Diego JavaScript and <a href="https://www.sandiegopython.org">San Diego Python</a> meetups.</p>

<p>In 2016, I attended PyTennessee in Nashville. I remember attending a dinner of of about a dozen folks who spoke at the conference. I was grateful to get to chat with so many folks whose talks I&rsquo;d attended.</p>

<h2>Presenting talks and tutorials</h2>

<p>I presented my first conference tutorial at <a href="https://twitter.com/treyhunner/status/737069721292439552">PyCon 2016</a> in Portland and <a href="https://pyvideo.org/djangocon-us-2016/readability-counts.html">my first talk</a> at <a href="https://twitter.com/asendecka/status/756851845012844544">DjangoCon US 2016</a> in Philadelphia.
I had been presenting lightning talks every few months at my local Python and JavaScript meetups for a few years by then and I had hosted free workshops at my local meetup and paid workshops for training clients.</p>

<p>Having presented locally helped, but presenting on a big stage is always scary.</p>

<h2>Volunteering</h2>

<p>I volunteered at some of my first few conferences and found that I really enjoyed it.
I especially enjoyed running the registration desk, as you&rsquo;re often the first helpful face that people see coming into the conference.</p>

<p>During PyCon 2016, 2017, and 2018, I co-chaired the open spaces thanks to Anna Ossowski inviting me to help.
I had first attended open spaces during PyCon 2015 and I <em>loved</em> them.
Talks are great, but so are discussions!</p>

<p>I also ran for the PSF board of directors in 2016 and ended up serving on the board for a few years before stepping down.
After my board terms, I volunteered for the PSF Code of Conduct working group for about 6 years.
I didn&rsquo;t even know what the PSF <em>was</em> until PyCon 2015!</p>

<h2>A <em>lot</em> of travel&hellip; maybe too much</h2>

<p>After DjangoCon 2016, I went a bit conference-wild.
I attended <a href="https://twitter.com/treyhunner/status/829412120370565120">PyTennessee 2017</a>, <a href="https://twitter.com/PythonChat/status/845052805375295488">PyCaribbean 2017</a> in Puerto Rico, <a href="https://twitter.com/loooorenanicole/status/866382369619562496">PyCon US 2017</a> in Portland, <a href="https://twitter.com/asteracode/status/893274761727361024">PyCon Australia 2017</a> in Melbourne, <a href="https://twitter.com/TobiasMcNulty/status/896570680933703681">DjangoCon 2017</a> in Spokane, <a href="https://twitter.com/treyhunner/status/916890505157468160">PyGotham 2017</a> in NYC, and <a href="https://twitter.com/treyhunner/status/937441419966296064">North Bay Python 2017</a> in Petaluma.</p>

<p>In 2018 I sponsored <a href="https://twitter.com/treyhunner/status/962862235734495232">PyTennessee</a> and <a href="https://twitter.com/jmwatt3/status/1023713820752183296">PyOhio</a> and spoke at both.
I passed out chocolate chip cookies at PyTennessee as a way to announce the launch of <a href="https://www.pythonmorsels.com">Python Morsels</a>.
I also attended <a href="https://twitter.com/treyhunner/status/996881842820272128">PyCon 2018</a> in Cleveland, <a href="https://www.flickr.com/photos/144080672@N05/31764542868/">DjangoCon 2018</a> in San Diego, <a href="https://twitter.com/treyhunner/status/1048340952451047425">PyGotham 2018</a>, and <a href="https://twitter.com/nnja/status/1058589935618318336">North Bay Python 2018</a>.</p>

<p>I slowed down <em>a bit</em> in 2019, with just <a href="https://twitter.com/LaylaSells_cshs/status/1100058649227972609">PyCascades</a> (Seattle), <a href="https://twitter.com/mariatta/status/1125534406851084288">PyCon US</a> (Cleveland), <a href="https://twitter.com/juliansequeira/status/1157106403598749698">PyCon Australia</a> (Sydney), and DjangoCon US (San Diego, which is home for me).</p>

<h2>Since the pandemic</h2>

<p>Since the start of the pandemic, I&rsquo;ve attended <a href="https://twitter.com/treyhunner/status/1519724687890128899">PyCon US 2022</a>, DjangoCon 2022 in San Diego (in my city for the <em>third</em> time!) and <a href="https://mastodon.social/@treyhunner/110243968672457367">PyCon US 2023</a>.
Traveling is more challenging for me than it used to be, but I hope to attend more regional conferences again soon.</p>

<p>Between client work, I&rsquo;ve been focusing less on conferences and more on blog posts (<a href="https://www.pythonmorsels.com/articles/">over here</a>), <a href="https://www.youtube.com/@PythonMorsels">screencasts</a>, my <a href="https://www.pythonmorsels.com/newsletter/">weekly Python tips</a> emails, and (of course) on <a href="https://www.pythonmorsels.com">Python Morsels</a>.</p>

<h2>My journey started locally</h2>

<p>I became part of the Python community before I knew I was part of it.</p>

<p>I started using Python professionally in December 2009 and I attended my first San Diego Python meetup in March 2012.
I met the organizers, gave some lightning talks, attended Saturday study group sessions (thanks Carol Willing, Alain Domissy, and others for running these), and volunteered to help organize meetups, study groups, and workshops.</p>

<p>By 2014, I had learned from folks online and in-person and I had helped out at my local Python meetup.
I had even made a few contributions to some small Django packages I relied on heavily.</p>

<p>I was encouraged to attend PyCon 2014 by others who were attending (thanks Carol, Micah, and Paul among others).
The conference was well-worth the occasional feeling of overwhelm.</p>

<h2>We&rsquo;re all just people</h2>

<p>The biggest thing I&rsquo;ve repeatedly learned over the past decade of Python conferences is that we&rsquo;re all just people.</p>

<p>Carol Willing keynoted PyCon US 2023.
But I met Carol as a kind Python user in San Diego who started the first Python study group meetings in Pangea Bakery on Convoy Street.</p>

<p>Jay Miller will be keynoting PyCon US 2024.
But I met Jay as an attendee of the Python study group, who was enthusiastic about both learning and teaching others.</p>

<p>My partner, Melanie Arbor, keynoted DjangoCon 2022 along with Jay Miller.
When I met Melanie, she was new to Python and was very eager to both learn and help others.</p>

<p>David Lord has made a huge impact on the maintenance of Flask and other Pallets projects.
I met David as a Python study group attendee who was an enthusiastic StackOverflow contributor.</p>

<p>I learned a ton from Brandon Rhodes, Ned Batchelder, Russell Keith-Magee, and many others from online videos, forums, and open source projects before I ever met them.
But each of them are also just Python-loving people like the rest of us.
Russell gives good hugs, Ned is an organizer of his local Python meetup, and Brandon wears the same brand of shoes as me.</p>

<p>We all have people we&rsquo;ve learned from, we suffer from feelings of inadequacy, we get grumpy sometimes, and we care about the Python language and community in big and small ways.</p>

<h2>What&rsquo;s next for you?</h2>

<p>Will you attend a local meetup?
Or will you attend an online social event?</p>

<p>If so, consider asking the organize if you can present a 5 minute lightning talk at a future event.
As I <a href="https://youtu.be/aNHBr7q-KVw?si=Fryj6Ez4Cw7q-RAq">noted in a DjangoCon 2016 lightning talk</a>, lightning talks are a great way to connect with folks.</p>

<p>Will you attend a Python conference one day?
See <a href="https://treyhunner.com/2018/04/how-to-make-the-most-of-your-first-pycon/">having a great first PyCon</a> when/if you do.</p>

<p>Remember that we&rsquo;re all just people though.
Some may have a bit more experience (whether at speaking, contributing to open source, or something else), but we&rsquo;re just people.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Black Friday &amp; Cyber Monday sales (2023)]]></title>
    <link href="https://treyhunner.com/2023/11/python-black-friday-and-cyber-monday-sales-2023/"/>
    <updated>2023-11-20T08:00:00-08:00</updated>
    <id>https://treyhunner.com/2023/11/python-black-friday-and-cyber-monday-sales-2023</id>
    <content type="html"><![CDATA[<p>It&rsquo;s time for my annual compilation post of <strong>Python learning deals</strong>.
I&rsquo;ve been compiling Python-related Black Friday &amp; Cyber Monday sales <a href="https://treyhunner.com/blog/categories/sales/">since 2018</a> and 2023&rsquo;s Python-related sales are coming up.</p>

<h2>Lifetime Python Morsels access for the price of two years</h2>

<p>I&rsquo;m kicking things off with <a href="https://www.pythonmorsels.com/lifetime-access-sale/">my sale</a> on Python Morsels.
Python Morsels helps developers <strong>deepen their Python skills</strong> in a way that day-to-day coding simply can&rsquo;t.</p>

<p>Python Morsels is designed for:</p>

<ul>
<li>experienced developers frustrated with gaps in their Python knowledge</li>
<li>self-taught programmers seeking courage and confidence in their Python abilities</li>
<li>experienced Python developers hoping to dive even deeper</li>
</ul>


<p>If you saw yourself in that list and you plan to use Python heavily for at least a few more years, I highly recommend checking out <a href="https://www.pythonmorsels.com/lifetime-access-sale/">the Python Morsels sale</a>.</p>

<p>From now through November 27, you can get <strong>lifetime access</strong> to Python Morsels for a one-time fee.
Python Morsels usually costs <strong>$240/year</strong> but lifetime access is <strong>only $480</strong>.
This is the best sale I&rsquo;ve ever offered on Python Morsels and I&rsquo;m guessing this might be the best Python-related deal this year.</p>

<p><a href="https://pythonmorsels.com/lifetime-access-sale/" class="subscribe-btn form-big">💰 See the Python Morsels sale</a></p>

<h2>On sale now</h2>

<p>Here are Python-related sales that are live right now:</p>

<ul>
<li><strong><a href="https://www.pythonmorsels.com/lifetime-access-sale/">Python Morsels</a></strong>: lifetime access to my Python skill-building platform for the price of 2 years</li>
<li><strong><a href="https://learning.oreilly.com/signup/?promotion_code=CYBERWEEK23">O'Reilly Media</a></strong>: the first year is $200 off with the coupon <code>CYBERWEEK23</code> ($299 instead of $499)</li>
<li><strong><a href="http://talkpython.fm/black-friday">Talk Python</a></strong>: 50% off 5 of their courses</li>
<li><strong><a href="https://courses.dataschool.io/black-friday">Data School</a></strong>: 40% off all Kevin Markham&rsquo;s courses</li>
<li><strong><a href="https://courses.pythontest.com/p/complete-pytest-course?code=BLACKFRIDAY">Brian Okken</a></strong>: 50% off pytest course and community access with coupon code <code>BLACKFRIDAY</code> (ends Nov 30)</li>
<li><strong><a href="https://lernerpython.com/bfcm-2023/">Reuven Lerner</a></strong>: 40% off Reuven&rsquo;s courses and 25% off a new membership he&rsquo;s launching</li>
<li><strong><a href="https://www.linkedin.com/feed/update/urn:li:activity:7133217889460883456/">Matt Harrison</a></strong>: 20% off Matt&rsquo;s corporate training</li>
<li><strong><a href="https://learnbyexample.gumroad.com">Sundeep Agarwal</a></strong>: around 70% off Sundeep&rsquo;s <a href="https://learnbyexample.gumroad.com/l/all-books/FestiveOffer">all book</a> and <a href="https://learnbyexample.gumroad.com/l/python-bundle/FestiveOffer">Python</a> and his <a href="https://learnbyexample.gumroad.com/l/py_regex/FestiveOffer">regex</a> book is free</li>
<li><strong><a href="https://www.blog.pythonlibrary.org">Mike Driscoll</a></strong>: 33% off Mike&rsquo;s Python <a href="https://driscollis.gumroad.com/">books</a> and <a href="https://www.teachmepython.com/">courses</a> with code <code>black2023</code></li>
<li><strong><a href="https://thepythoncodingplace.com/membership/">Stephen Gruppetta</a></strong>: 70% off pre-sale on his new Python membership ($95 instead of $395)</li>
<li><strong><a href="https://mathspp.gumroad.com/">Rodrigo</a></strong>: 40% discount on Rodrigo&rsquo;s upcoming <a href="https://mathspp.gumroad.com/l/pythonbootcamp?code=bootcampbf23">bootcamp</a> and on his <a href="https://mathspp.gumroad.com/l/comprehending-comprehensions?code=presale">comprehensions course</a></li>
<li><strong><a href="https://nostarch.com/catalog/python">No Starch</a></strong>: 35% off with code <code>DEALS4DAYS</code> (Crash Course, Automate The Boring Stuff, etc.)</li>
<li><strong><a href="https://pragprog.com/">Pragmatic Bookshelf</a></strong>: 40% off <a href="https://pragprog.com/titles/bopytest2/python-testing-with-pytest-second-edition/">the pytest book</a> and all other books with code <code>turkeycode2023</code></li>
<li><strong><a href="https://www.manning.com/catalog#section-50">Manning</a></strong> 50% off eBooks, 40% off print books</li>
<li><strong><a href="https://udemy.com">Udemy</a></strong>: various <a href="https://www.udemy.com/topic/python/">Python courses</a> are on sale right now</li>
</ul>


<p>If you know of another sale (or a likely sale) <strong>please comment below</strong>.</p>

<h2>Django sales</h2>

<p>Adam Johnson is also compiling many <strong>Django-related Black Friday and Cyber Monday sales</strong> via a <a href="https://adamj.eu/tech/2023/11/20/django-black-friday-deals-2023/">Django sales post</a>.</p>

<h2>More developer-oriented deals</h2>

<p>For even more Black Friday deals for software developers, see <a href="https://blackfridaydeals.dev">BlackFridayDeals.dev</a>, which I believe launched this year.</p>

<h2>Go get yourself some deals!</h2>

<p>Go hop on those sales! (But make sure to put an event in your calendar to actually use what you purchase. 😉)
And if you have questions about the <a href="https://www.pythonmorsels.com/lifetime-access-sale/"><strong>Python Morsels Cyber Monday sale</strong></a> please comment below or <a href="mailto:he&amp;#108;p&amp;#64;&amp;#112;%7&amp;#57;th%6Fnmo&amp;#114;s%6&amp;#53;ls&amp;#46;&amp;#99;&amp;#111;m">email me</a>.</p>

<p>Happy Python-ing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Morsels Cyber Monday sale]]></title>
    <link href="https://treyhunner.com/2022/11/python-morsels-cyber-monday-sale/"/>
    <updated>2022-11-25T08:30:00-08:00</updated>
    <id>https://treyhunner.com/2022/11/python-morsels-cyber-monday-sale</id>
    <content type="html"><![CDATA[<p>Python Morsels helps Python users <strong>sharpen their Python skills</strong> in a way that writing production code doesn&rsquo;t. If you are:</p>

<ul>
<li>an experienced developer, frustrated with <strong>gaps in your Python knowledge</strong></li>
<li>a self-taught programmer seeking <strong>courage and confidence</strong> in your Python abilities</li>
<li>or an intermediate-level Python learner trying to <strong>deepen your Python skills</strong></li>
</ul>


<p>&hellip;a weekly Python Morsels habit can help you make <strong>consistent progress</strong> and <strong>noticeable growth</strong> in <strong>just a few months</strong>.</p>

<p>Python Morsels is <strong>on sale</strong> through Cyber Monday. <a href="https://www.pythonmorsels.com/all-python-exercises-and-screencasts/">Subscribe</a> now to <strong><a href="https://www.pythonmorsels.com/pricing/">save up to $108 per year</a></strong>.</p>

<h2>Day-to-day coding isn&rsquo;t purposeful learning</h2>

<p>If you write Python frequently, you likely learn new things all the time.
The learning you get from day-to-day coding is messy and unpredictable. Yes, learning happens, but gradually.</p>

<p>What if you could <strong>learn something unexpected about Python</strong> in <strong>just 30 minutes</strong> a week?</p>

<p>That&rsquo;s what Python Morsels is designed to do: push you <em>just</em> outside your comfort zone to <strong>discover something new</strong> without requiring a big time sink.</p>

<blockquote><p>The time I spent working on Python Morsels problems translates into saved time programming for work. And it&rsquo;s not a grind - it&rsquo;s actually fun. I&rsquo;ve learned advanced Python concepts that I would have never had the opportunity to use in my day to day work.
<br><span style="float: right;">
— Eric Pederson, <a href="https://www.pythonmorsels.com/testimonials/#tag:short_on_time">Python Morsels user</a></span>
<br></p></blockquote>

<div class="clearfix"></div>


<h2>Guided Python practice every single week</h2>

<p>Python Morsels is <strong>quite different</strong> from many other Python learning systems: you tell me your Python skill level (from <strong>novice</strong> to <strong>advanced</strong>) and I send you small tasks to help you sharpen your Python skills.</p>

<p>Every Monday, you&rsquo;ll receive an email from me with:</p>

<ul>
<li>a short screencast to watch (or read)</li>
<li>a multi-part exercise to move you outside your comfort zone (often achievable in 30 minutes)</li>
<li>a mini exercise that you can accomplish in just 10 minutes</li>
<li>links to dive deeper into subsequent screencasts and exercises</li>
</ul>


<p>If you&rsquo;d like to nudge your learning in a specific direction, you can always work through a topic-specific exercise path, or watch one of my many screencast series.</p>

<h2>Does this actually work?</h2>

<p>If you use Python Morsels even semi-regularly, I’m confident your Python skills will improve.</p>

<p>Here&rsquo;s what Python Morsels users have to say:</p>

<blockquote><p>I was hesitant about paying for Python Morsels given how many free learning resources there are. But it was definitely worth it. I&rsquo;ve learnt more from Python Morsels than anything else, by far.
<br><span style="float: right;">
— Cosmo Grant</span>
<br></p></blockquote>

<div class="clearfix"></div>


<blockquote><p>During my study of Python, I used various programming challenge sites. I can say for sure that this is the best challenge site I have ever come across.
<br><span style="float: right;">
— Bartosz Chojnacki</span>
<br></p></blockquote>

<div class="clearfix"></div>


<p>Not sure? <a href="https://www.pythonmorsels.com/testimonials/">Read more from Python Morsels users here</a>.</p>

<h2>Lock-in your $200/year subscription</h2>

<p>Python Morsels currently includes <strong>over 150 screencasts and articles</strong> and <strong>nearly 200 exercises</strong>, each of which links to over a dozen helpful resources.</p>

<p>Subscribe before November 29, 2022 to lock-in your subscription at $200/year.</p>

<p><a href="https://www.pythonmorsels.com/pricing" class="subscribe-btn form-big">Subscribe to Python Morsels 💰</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Black Friday &amp; Cyber Monday sales (2022)]]></title>
    <link href="https://treyhunner.com/2022/11/python-black-friday-and-cyber-monday-sales-2022/"/>
    <updated>2022-11-22T10:15:00-08:00</updated>
    <id>https://treyhunner.com/2022/11/python-black-friday-and-cyber-monday-sales-2022</id>
    <content type="html"><![CDATA[<p>It&rsquo;s that time of year again… time for my annual compilation post of <strong>Black Friday and Cyber Monday deals for learning Python</strong>.</p>

<h2>Save up to $108 a year on Python Morsels</h2>

<p>Of course I&rsquo;m going to kick things off with my own sale. 😉</p>

<p><a href="https://trey.io/cyber-monday-sale-2022">Python Morsels</a> helps developers <strong>deepen their Python skills</strong> in a way that day-to-day coding simply can&rsquo;t.</p>

<p>Python Morsels is specifically crafted for:</p>

<ul>
<li>experienced developers frustrated with gaps in their Python knowledge</li>
<li>self-taught programmers seeking courage and confidence in their Python abilities</li>
<li>intermediate-level Python learners trying to deepen skills</li>
</ul>


<p>If you saw yourself in that list, subscribe now before prices increase on November 29, 2022!</p>

<p><a href="https://trey.io/cyber-monday-sale-2022" class="subscribe-btn form-big">💰 See the Python Morsels sale</a></p>

<h2>Python books, courses, templates, and exercises</h2>

<p>There are a <em>lot</em> of Python-related sales going on this year.
Note that some of the below sales include courses, some include books, some include templates (Itamar&rsquo;s Docker templates for example) and some include a mix of different learning products.</p>

<ul>
<li><strong><a href="https://store.lerner.co.il/?coupon=BF2022">Reuven Lerner</a></strong>: Reuven&rsquo;s Python courses are 40% off this week with the coupon <code>BF2022</code></li>
<li><strong><a href="http://talkpython.fm/black-friday">Talk Python</a></strong>: Get all Talk Python courses in one $249 bundle</li>
<li><strong>Sundeep Agarwal</strong>: Sundeep&rsquo;s <a href="https://learnbyexample.gumroad.com/l/all-books/FestiveOffer">all books bundle is 64% off</a> (it&rsquo;s $10), the <a href="https://learnbyexample.gumroad.com/l/python-bundle/FestiveOffer">Learn by example Python bundle</a> is 80% off (it&rsquo;s $3), and <a href="https://learnbyexample.gumroad.com/l/py_projects/FestiveOffer">Practice Python Projects</a> is free!</li>
<li><strong><a href="https://store.metasnake.com/?coupon=PANDAS30">Matt Harrison</a></strong>: Matt&rsquo;s offering 30% off his Effective Pandas book on Friday <strong>only</strong></li>
<li><strong><a href="https://pythonspeed.com/products/docker/">Itamar Turner-Trauring</a></strong>: Itamar&rsquo;s Docker packaging products for Python are all 25% off through November with the code <code>FALL22</code></li>
<li><strong><a href="https://www.blog.pythonlibrary.org/2022/11/22/python-black-friday-cyber-monday-sales-2022/">Mike Driscoll</a></strong>: Mike is offering $10 off any of his books this year with the coupon code <code>black2022</code></li>
<li><strong><a href="https://nostarch.com/catalog/python">No Starch</a></strong>: books are 35% off with the coupon <code>HOLIDAYDEALS</code></li>
<li><strong><a href="https://pragprog.com/">Pragmatic Bookshelf</a></strong>: save 40% on Brian Okken&rsquo;s PyTest book or any other Pragmatic Bookshelf book with the coupon code <code>turkeysale2022</code></li>
<li><strong><a href="https://udemy.com">Udemy</a></strong>: various Python courses are also on sale on Udemy right now, including Al Sweigart&rsquo;s <a href="https://www.udemy.com/course/automate/">Automate the Boring Stuff with Python course</a></li>
</ul>


<h2>Python learning subscriptions</h2>

<p>I use a subscription model for <a href="https://trey.io/cyber-monday-sale-2022">Python Morsels</a> because subscriptions (when done well) can encourage habitual learning, which is often more effective than binge-learning.
But Python Morsels isn&rsquo;t the only subscription-based Python learning platform.</p>

<p>Here sales on other learning subscriptions:</p>

<ul>
<li><strong><a href="https://www.oreilly.com/online-learning/cyber-monday-2022.html">O'Reilly Media</a></strong> subscriptions are $200 off with the coupon <a href="https://www.oreilly.com/online-learning/cyber-monday-2022.html">CYBERWEEK22</a></li>
<li><strong><a href="https://www.dunderdata.com/black-friday">Dunder Data</a></strong> subscriptions (by Ted Petrou) are 40% off (normally $399), plus an extra 50% off for completing 3 certificates within 3 months</li>
<li><strong><a href="https://www.datacamp.com/promo/black-friday-2022">DataCamp</a></strong> has a 50% off sale on their annual subscriptions right now as well</li>
</ul>


<p>Also here&rsquo;s a Python-related service that&rsquo;s on sale (a subscription product, not a learning service):</p>

<ul>
<li><strong>Sourcery</strong>: <a href="https://sourcery.ai/pricing/">Sourcery Pro</a> is 33% off for the first 12 months with coupon <code>BLACKFRIDAY2022</code></li>
</ul>


<h2>Django sales</h2>

<p>Adam Johnson compiled many <a href="https://adamj.eu/tech/2022/11/21/django-black-friday-deals-2022/"><strong>Django-related Black Friday and Cyber Monday sales</strong></a>.</p>

<p>Here&rsquo;s a quick summary:</p>

<ul>
<li>Will Vincent is offering 50% off a bundle for newer Django developers (<a href="https://wsvincent.gumroad.com/l/bhylo/blackfriday2022">sale</a>)</li>
<li>Adam Johnson is offering 50% off his books for experienced Django developers (<a href="https://adamj.eu/tech/2022/11/21/django-black-friday-deals-2022/">announcement</a>)</li>
<li>Test Driven is selling a discounted bundle of courses on Django REST Framework, Celery, and search (<a href="https://testdriven.io/bundle/django-black-friday/">sale</a>)</li>
</ul>


<p>Plus other discounted books, apps, templates, and services from others: <a href="https://adamj.eu/tech/2022/11/21/django-black-friday-deals-2022/">read Adam&rsquo;s full post</a> for more details on the Django-related sales this year.</p>

<h2>Go get yourself some deals!</h2>

<p>Go hop on those sales! (But make sure to put an event in your calendar to actually use what you purchase. 😉)</p>

<p>And if you have questions about the <a href="https://trey.io/cyber-monday-sale-2022"><strong>Python Morsels Cyber Monday sale</strong></a> please comment below or <a href="mailto:he&amp;#108;p&amp;#64;&amp;#112;%7&amp;#57;th%6Fnmo&amp;#114;s%6&amp;#53;ls&amp;#46;&amp;#99;&amp;#111;m">email me</a>.</p>

<p>Happy Python-ing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Overlooked facts about variables and objects in Python: it's all about pointers]]></title>
    <link href="https://treyhunner.com/2022/03/variables-objects-and-pointers-in-python/"/>
    <updated>2022-03-29T08:00:00-07:00</updated>
    <id>https://treyhunner.com/2022/03/variables-objects-and-pointers-in-python</id>
    <content type="html"><![CDATA[<p><em>This article was originally published <a href="https://www.pythonmorsels.com/pointers/">on Python Morsels</a>.</em></p>

<p>In Python, variables and data structures <strong>don&rsquo;t contain objects</strong>.
This fact is both commonly overlooked and tricky to internalize.</p>

<p>You can happily use Python for years without really understanding the below concepts, but this knowledge can certainly help alleviate <em>many</em> common Python gotchas.</p>

<p>Table of Contents:</p>

<ul data-toc=".entry-content"></ul>


<h2>Terminology</h2>

<p>Let&rsquo;s start with by introducing some terminology.
The last few definitions likely won&rsquo;t make sense until we define them in more detail later on.</p>

<p><strong>Object</strong> (a.k.a. <strong>value</strong>): a &ldquo;thing&rdquo;.
Lists, dictionaries, strings, numbers, tuples, functions, and modules are all objects.
&ldquo;Object&rdquo; defies definition because <a href="https://www.pythonmorsels.com/topics/everything-is-an-object/">everything is an object in Python</a>.</p>

<p><strong>Variable</strong> (a.k.a. <strong>name</strong>): a name used to refer to an object.</p>

<p><strong>Pointer</strong> (a.k.a. <strong>reference</strong>): describes where an object lives (often shown visually as an arrow)</p>

<p><strong>Equality</strong>: whether two objects represent the same data</p>

<p><strong>Identity</strong>: whether two pointers refer to the same object</p>

<p>These terms are best understood by their relationships to each other and that&rsquo;s the primarily purpose of this article.</p>

<h2>Python&rsquo;s variables are pointers, not buckets</h2>

<p>Variables in Python are not buckets containing things; they&rsquo;re <strong>pointers</strong> (they <em>point</em> to objects).</p>

<p>The word &ldquo;pointer&rdquo; may sound scary, but a lot of that scariness comes from related concepts (e.g. dereferencing) which aren&rsquo;t relevant in Python.
In Python a pointer just represents <strong>the connection between a variable and an objects</strong>.</p>

<p>Imagine <strong>variables</strong> living in <em>variable land</em> and <strong>objects</strong> living in <em>object land</em>.
A <strong>pointer</strong> is a little arrow that connects each variable to the object it <strong>points to</strong>.</p>

<p><img class="no-radius full-width" src="https://treyhunner.com/images/variable-diagram-different-values.svg" title="Diagram showing variables on the left and objects on the right, with arrows between each. The numbers variable points to a list. The numbers2 variable points to a separate list. The name variable points to a string." ></p>

<p>This above diagram represents the state of our Python process after running this code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">11</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">29</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;Trey&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the word <strong>pointer</strong> scares you, use the word <strong>reference</strong> instead.
Whenever you see pointer-based phrases in this article, do a mental translation to a reference-based phrase:</p>

<ul>
<li><strong>pointer</strong> &rArr; <strong>reference</strong></li>
<li><strong>point to</strong> &rArr; <strong>refer to</strong></li>
<li><strong>pointed to</strong> &rArr; <strong>referenced</strong></li>
<li><strong>point X to Y</strong> &rArr; <strong>cause X to refer to Y</strong></li>
</ul>


<h2>Assignments point a variable to an object</h2>

<p>Assignment statements point a variable to an object.
That&rsquo;s it.</p>

<p>If we run this code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers2</span> <span class="o">=</span> <span class="n">numbers</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;Trey&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The state of our variables and objects would look like this:</p>

<p><img class="no-radius full-width" src="https://treyhunner.com/images/variable-diagram-same-value.svg" title="Diagram showing variables on the left and objects on the right, with arrows between each. The numbers and numbers2 variables have arrows coming out of them pointing to the same list. The name variable points to a string." ></p>

<p>Note that <code>numbers</code> and <code>numbers2</code> <strong>point to the same object</strong>.
If we <em>change</em> that object, both variables will seem to &ldquo;see&rdquo; that change:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class='line'><span class="go">7</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span>
</span><span class='line'><span class="go">[2, 1, 3, 4]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers2</span>
</span><span class='line'><span class="go">[2, 1, 3, 4]</span>
</span></code></pre></td></tr></table></div></figure>


<p>That strangeness was all due to this assignment statement:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers2</span> <span class="o">=</span> <span class="n">numbers</span>
</span></code></pre></td></tr></table></div></figure>


<p>Assignment statements don&rsquo;t copy anything: they just point a variable to an object.
So assigning one variable to another variable just <strong>points two variables to the same object</strong>.</p>

<h2>The 2 types of &ldquo;change&rdquo; in Python</h2>

<p>Python has 2 distinct types of &ldquo;change&rdquo;:</p>

<ol>
<li><strong>Assignment</strong> changes a variable (it changes <em>which</em> object it points to)</li>
<li><strong>Mutation</strong> changes an object (which any number of variables might point to)</li>
</ol>


<p>The word &ldquo;change&rdquo; is often ambiguous.
The phrase &ldquo;we changed <code>x</code>&rdquo; could mean &ldquo;we re-assigned <code>x</code>&rdquo; or it might mean &ldquo;we mutated the object <code>x</code> points to&rdquo;.</p>

<p><strong>Mutations change objects</strong>, not variables.
But variables <em>point to</em> objects.
So if another variable points to an object that <em>we&rsquo;ve just mutated</em>, that other variable will reflect the same change; not because the variable changed but because <strong>the object it points to</strong> changed.</p>

<h2>Equality compares objects and identity compares pointers</h2>

<p>Python&rsquo;s <code>==</code> operator checks that two objects <strong>represent the same data</strong> (a.k.a. <strong>equality</strong>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">my_numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">your_numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">my_numbers</span> <span class="o">==</span> <span class="n">your_numbers</span>
</span><span class='line'><span class="go">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>Python&rsquo;s <code>is</code> operator checks whether two objects <strong>are the same object</strong> (a.k.a. <strong>identity</strong>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">my_numbers</span> <span class="ow">is</span> <span class="n">your_numbers</span>
</span><span class='line'><span class="go">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>The variables <code>my_numbers</code> and <code>your_numbers</code> point to <strong>objects representing the same data</strong>, but the objects they point to <strong>are not the same object</strong>.</p>

<p>So changing one object doesn&rsquo;t change the other:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">my_numbers</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">7</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">my_numbers</span> <span class="o">==</span> <span class="n">your_numbers</span>
</span><span class='line'><span class="go">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>If two variables point to the same object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">my_numbers_again</span> <span class="o">=</span> <span class="n">my_numbers</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">my_numbers</span> <span class="ow">is</span> <span class="n">my_numbers_again</span>
</span><span class='line'><span class="go">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>Changing the object one variable points also changes the object the other points to because they both point to the same object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">my_numbers_again</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">my_numbers_again</span>
</span><span class='line'><span class="go">[2, 1, 3, 4, 7]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">my_numbers</span>
</span><span class='line'><span class="go">[2, 1, 3, 4, 7]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>==</code> operator checks for <strong>equality</strong> and the <code>is</code> operator checks for <strong>identity</strong>.
This distinction between identity and equality exists because variables <strong>don&rsquo;t contain objects</strong>, they <strong>point to objects</strong>.</p>

<p>In Python equality checks are very common and <a href="https://www.pythonmorsels.com/topics/equality-vs-identity/">identity checks are very rare</a>.</p>

<h2>There&rsquo;s no exception for immutable objects</h2>

<p>But wait, modifying a number <em>doesn&rsquo;t</em> change other variables pointing to the same number, right?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">n</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">m</span> <span class="o">=</span> <span class="n">n</span>  <span class="c"># n and m point to the same number</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">n</span> <span class="o">+=</span> <span class="mi">2</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">n</span>  <span class="c"># n has changed</span>
</span><span class='line'><span class="go">5</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">m</span>  <span class="c"># but m hasn&#39;t changed!</span>
</span><span class='line'><span class="go">3</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, <strong>modifying a number is not possible</strong> in Python.
Numbers and strings are both <strong>immutable</strong>, meaning you can&rsquo;t mutate them.
You <strong>cannot change</strong> an immutable object.</p>

<p>So what about that <code>+=</code> operator above?
Didn&rsquo;t that mutate a number?
(It didn&rsquo;t.)</p>

<p>With immutable objects, these two statements are equivalent:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">n</span> <span class="o">+=</span> <span class="mi">2</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">n</span> <span class="o">=</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>For immutable objects, augmented assignments (<code>+=</code>, <code>*=</code>, <code>%=</code>, etc.) perform an operation (which returns a new object) and then do an assignment (to that new object).</p>

<p>Any operation you might <em>think</em> changes a string or a number instead returns a new object.
Any operation on an immutable object always <strong>returns a new object</strong> instead of modifying the original.</p>

<h2>Data structures contain pointers</h2>

<p>Like variables, data structures <strong>don&rsquo;t contain objects</strong>, they <strong>contain pointers to objects</strong>.</p>

<p>Let&rsquo;s say we make a list-of-lists:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">matrix</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then we make a variable pointing to the second list in our list-of-lists:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">row</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">row</span>
</span><span class='line'><span class="go">[4, 5, 6]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The state of our variables and objects now looks like this:</p>

<p><img class="no-radius full-width" src="https://treyhunner.com/images/data-structures-diagram.svg" title="Diagram showing matrix variable which points to a list of 3 items. Each item has an arrow coming out of it, pointing to a separate list. Each of these sublists has 3 elements which each point to a separate integer object. There's also a row variable which points to a list that's also pointed to by index 1 of the matrix list." ></p>

<p>Our <code>row</code> variable <strong>points to the same object</strong> as index <code>1</code> in our <code>matrix</code> list:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">row</span> <span class="ow">is</span> <span class="n">matrix</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="go">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>So if we mutate the list that <code>row</code> points to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">row</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1000</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ll see that change in both places:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">row</span>
</span><span class='line'><span class="go">[1000, 5, 6]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">matrix</span>
</span><span class='line'><span class="go">[[1, 2, 3], [1000, 5, 6], [7, 8, 9]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s common to speak of data structures &ldquo;containing&rdquo; objects, but they actually only contain pointers to objects.</p>

<h2>Function arguments act like assignment statements</h2>

<p>Function calls also perform assignments.</p>

<p>If you mutate an object that was passed-in to your function, you&rsquo;ve mutated the original object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">smallest_n</span><span class="p">(</span><span class="n">items</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
</span><span class='line'><span class="gp">... </span>    <span class="n">items</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>  <span class="c"># This mutates the list (it sorts in-place)</span>
</span><span class='line'><span class="gp">... </span>    <span class="k">return</span> <span class="n">items</span><span class="p">[:</span><span class="n">n</span><span class="p">]</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">29</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">smallest_n</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="go">[1, 2, 4, 7]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span>
</span><span class='line'><span class="go">[1, 2, 4, 7, 11, 18, 29]</span>
</span></code></pre></td></tr></table></div></figure>


<p>But if you reassign a variable to a different object, the original object will not change:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">smallest_n</span><span class="p">(</span><span class="n">items</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
</span><span class='line'><span class="gp">... </span>    <span class="n">items</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>  <span class="c"># this makes a new list (original is unchanged)</span>
</span><span class='line'><span class="gp">... </span>    <span class="k">return</span> <span class="n">items</span><span class="p">[:</span><span class="n">n</span><span class="p">]</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">29</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">smallest_n</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="go">[1, 2, 4, 7]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span>
</span><span class='line'><span class="go">[29, 7, 1, 4, 11, 18, 2]</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;re reassigning the <code>items</code> variable here.
That reassignment changes <em>which</em> object the <code>items</code> variable points to, but it doesn&rsquo;t change the original object.</p>

<p>We <strong>changed an object</strong> in the first case and we <strong>changed a variable</strong> in the second case.</p>

<p>Here&rsquo;s another example you&rsquo;ll sometimes see:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Widget</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">attrs</span><span class="o">=</span><span class="p">(),</span> <span class="n">choices</span><span class="o">=</span><span class="p">()):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">attrs</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">attrs</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">choices</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">choices</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Class <a href="https://www.pythonmorsels.com/topics/what-is-init/">initializer methods</a> often copy iterables given to them by making a new list out of their items.
This allows the class to accept any iterable (not just lists) and decouples the original iterable from the class (modifying these lists won&rsquo;t upset the original caller).
The above example was <a href="https://github.com/django/django/blob/4.0.2/django/forms/widgets.py#L560,L565">borrowed from Django</a>.</p>

<p><strong>Don&rsquo;t mutate the objects</strong> passed-in to your function unless the function caller expects you to.</p>

<h2>Copies are shallow and that&rsquo;s usually okay</h2>

<p>Need to copy a list in Python?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2000</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="mi">3000</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>You could call the <code>copy</code> method (if you&rsquo;re certain your iterable is a list):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">my_numbers</span> <span class="o">=</span> <span class="n">numbers</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or you could pass it to the <code>list</code> constructor (this works on <strong>any iterable</strong>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">my_numbers</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Both of these techniques make a new list which <strong>points to the same objects</strong> as the original list.</p>

<p>The two lists are distinct, but the objects within them are the same:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="ow">is</span> <span class="n">my_numbers</span>
</span><span class='line'><span class="go">False</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="ow">is</span> <span class="n">my_numbers</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="go">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since integers (and all numbers) are immutable in Python we don&rsquo;t really care that each list contains the same objects because we can&rsquo;t mutate those objects anyway.</p>

<p>With mutable objects, this distinction matters.
This makes two list-of-lists which each contain pointers to the same three lists:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">matrix</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">new_matrix</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">matrix</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>These two lists aren&rsquo;t the same, but each item within them is the same:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">matrix</span> <span class="ow">is</span> <span class="n">new_matrix</span>
</span><span class='line'><span class="go">False</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="ow">is</span> <span class="n">new_matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="go">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s a rather complex visual representation of these two objects and the pointers they contain:</p>

<p><img class="no-radius full-width" src="https://treyhunner.com/images/data-structures-same-pointers-diagram.svg" title="Diagram showing matrix variable which points to a list of 3 items and a new_matrix variable which points to a separate list of 3 items. Each corresponding item in each of these matrix and new_matrix lists points to the same sublist." ></p>

<p>So if we mutate the first item in one list, it&rsquo;ll mutate the same item within the other list:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">matrix</span>
</span><span class='line'><span class="go">[[1, 2, 3, 100], [4, 5, 6], [7, 8, 9]]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">new_matrix</span>
</span><span class='line'><span class="go">[[1, 2, 3, 100], [4, 5, 6], [7, 8, 9]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>When you copy an object in Python, if that object <strong>points to other objects</strong>, you&rsquo;ll copy pointers to those other objects instead of copying the objects themselves.</p>

<p>New Python programmers respond to this behavior by sprinkling <code>copy.deepcopy</code> into their code.
The <code>deepcopy</code> function attempts to recursively copy an object along with all objects it points to.</p>

<p>Sometimes new Python programmers will use <code>deepcopy</code> to recursively copy data structures:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">copy</span> <span class="kn">import</span> <span class="n">deepcopy</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
</span><span class='line'>
</span><span class='line'><span class="n">tweet_data</span> <span class="o">=</span> <span class="p">[{</span><span class="s">&quot;date&quot;</span><span class="p">:</span> <span class="s">&quot;Feb 04 2014&quot;</span><span class="p">,</span> <span class="s">&quot;text&quot;</span><span class="p">:</span> <span class="s">&quot;Hi Twitter&quot;</span><span class="p">},</span> <span class="p">{</span><span class="s">&quot;date&quot;</span><span class="p">:</span> <span class="s">&quot;Apr 16 2014&quot;</span><span class="p">,</span> <span class="s">&quot;text&quot;</span><span class="p">:</span> <span class="s">&quot;At #pycon2014&quot;</span><span class="p">}]</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Parse date strings into datetime objects</span>
</span><span class='line'><span class="n">processed_data</span> <span class="o">=</span> <span class="n">deepcopy</span><span class="p">(</span><span class="n">tweet_data</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">tweet</span> <span class="ow">in</span> <span class="n">processed_data</span><span class="p">:</span>
</span><span class='line'>    <span class="n">tweet</span><span class="p">[</span><span class="s">&quot;date&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">strptime</span><span class="p">(</span><span class="n">tweet</span><span class="p">[</span><span class="s">&quot;date&quot;</span><span class="p">],</span> <span class="s">&quot;%b </span><span class="si">%d</span><span class="s"> %Y&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>But in Python, we often prefer to make new objects instead of mutating existing objects.
So we could entirely remove that <code>deepcopy</code> usage above by making a new list of new dictionaries instead of deep-copying our old list-of-dictionaries.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Parse date strings into datetime objects</span>
</span><span class='line'><span class="n">processed_data</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span><span class="o">**</span><span class="n">tweet</span><span class="p">,</span> <span class="s">&quot;date&quot;</span><span class="p">:</span> <span class="n">datetime</span><span class="o">.</span><span class="n">strptime</span><span class="p">(</span><span class="n">tweet</span><span class="p">[</span><span class="s">&quot;date&quot;</span><span class="p">],</span> <span class="s">&quot;%b </span><span class="si">%d</span><span class="s"> %Y&quot;</span><span class="p">)}</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">tweet</span> <span class="ow">in</span> <span class="n">tweet_data</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>We tend to prefer shallow copies in Python.
If you <strong>don&rsquo;t mutate objects that don&rsquo;t belong to you</strong> you usually won&rsquo;t have any need for <code>deepcopy</code>.</p>

<p>The <code>deepcopy</code> function certainly has its uses, but it&rsquo;s often unnecessary.
&ldquo;How to avoid using <code>deepcopy</code>&rdquo; warrants a separate discussion in a future article.</p>

<h2>Summary</h2>

<p>Variables in Python are not buckets containing things; they&rsquo;re <strong>pointers</strong> (they <em>point</em> to objects).</p>

<p>Python&rsquo;s model of variables and objects boils down to two primary rules:</p>

<ol>
<li><strong>Mutation</strong> changes an object</li>
<li><strong>Assignment</strong> points a variable to an object</li>
</ol>


<p>As well as these corollary rules:</p>

<ol>
<li><strong>Reassigning</strong> a variable points it to <strong>a different object</strong>, leaving the original object unchanged</li>
<li><strong>Assignments don&rsquo;t copy</strong> anything, so it&rsquo;s up to you to copy objects as needed</li>
</ol>


<p>Furthermore, data structures work the same way: lists and dictionaries container <strong>pointers to objects</strong> rather than the objects themselves.
And attributes work the same way: <strong>attributes point to objects</strong> (just like any variable points to an object).
So <strong>objects cannot contain objects in Python</strong> (they can only <em>point to</em> objects).</p>

<p>And note that while <strong>mutations change objects</strong> (not variables), multiple variables <em>can</em> point to the same object.
If two variables point to the same object changes to that object will be seen when accessing either variable (because they both point to <em>the same</em> object).</p>

<p>For more on this topic see:</p>

<ul>
<li>My <a href="https://www.pythonmorsels.com/topics/playlist/assignment-and-mutation/">screencast series on Assignments and Mutation in Python</a></li>
<li>Ned Batchelder&rsquo;s <a href="https://nedbatchelder.com/text/names1.html">Python Names and Values</a> talk</li>
<li>Brandon Rhodes' <a href="https://pyvideo.org/pyohio-2011/pyohio-2011-names-objects-and-plummeting-from.html">Names, Objects, and Plummeting From The Cliff</a> talk</li>
</ul>


<p>This mental model of Python is tricky to internalize so it&rsquo;s okay if it still feels confusing!
Python&rsquo;s features and best practices <em>often</em> nudge us toward &ldquo;doing the right thing&rdquo; automatically.
But if your code is acting strangely, it might be due to changing an object you didn&rsquo;t mean to change.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Black Friday &amp; Cyber Monday Sales (2021)]]></title>
    <link href="https://treyhunner.com/2021/11/python-black-friday-and-cyber-monday-sales-2021/"/>
    <updated>2021-11-22T21:00:00-08:00</updated>
    <id>https://treyhunner.com/2021/11/python-black-friday-and-cyber-monday-sales-2021</id>
    <content type="html"><![CDATA[<p>This is my annual compilation post of Black Friday and Cyber Monday deals I&rsquo;ve found related to <strong>Python and Python learning</strong>.</p>

<p><strong>Note</strong>: Some sales likely aren&rsquo;t announced yet, so I will update this post on Black Friday and Cyber Monday.</p>

<h3>50% off dozens of Python screencasts (Python Morsels)</h3>

<p>Yes, the self-promotion comes first.</p>

<p>The Python Morsels Lite plan has evolved <em>a lot</em> since I first launched it and it&rsquo;s long overdue for a price increase.
This plan includes access to <strong>over 90 Python screencasts</strong> (a new one added each week) as well as a <strong>monthly Python exercise</strong> (your choice from novice to advanced Python).</p>

<p>From December 1, 2021 onward the price for the Python Morsels Lite plan will be $10/month or $100/year.
Until November 30, you can signup for <strong>$5/month</strong> or <strong>$50/year</strong> (and you&rsquo;ll lock-in that price for as long as you&rsquo;re subscribed).
This is the lowest price I&rsquo;ll ever offer this plan for.</p>

<p><strong>Save 50%</strong> on <a href="https://www.pythonmorsels.com/watch-python-screencasts/">the Python Morsels Lite plan</a> by signing up from now until Cyber Monday.</p>

<p><a href="https://www.pythonmorsels.com/watch-python-screencasts/">Get the Python Morsels Lite plan for just $50/year</a></p>

<h3>Reuven Lerner&rsquo;s Python courses and Weekly Python Exercise</h3>

<p>Reuven Lerner is offering <a href="https://store.lerner.co.il/?coupon=BF2021">30% off all his products</a> (intro Python bundle, advanced Python bundle, data analytics bundle, and Weekly Python Exercises, and more) through Monday.
Enter the coupon BF2021 if needed (though that link should apply the coupon already).</p>

<p>If you like Python Morsels, you might want to check out Reuven&rsquo;s Weekly Python exercise as well.
Both are based around exercise-driven learning.</p>

<h3>Matt Harrison&rsquo;s books and courses on Python, data science, and Pandas</h3>

<p>Matt Harrison is offering a 40% discount on all his courses and books (on Python, Pandas, and data science).
See his <a href="https://store.metasnake.com/?coupon=BF40">MetaSnake store</a> for more details.
Enter coupon code BF40 if needed (though the coupon code should already be applied when you click that link).</p>

<h3>Python Essentials for Data Scientists (Kevin Markham of Data School)</h3>

<p>Kevin Markham is offering 33% off his new course, <a href="https://courses.dataschool.io/python-essentials-for-data-scientists?coupon=BLACKFRIDAY">Python Essentials for Data Scientists</a>.
The course will be $33 instead of $49 from Black Friday through Cyber Monday.
The BLACKFRIDAY coupon is already applied from that link, but you&rsquo;ll need to wait until Friday (when enrollment to officially opens) to hit the Buy button.</p>

<h3>Talk Python course bundle</h3>

<p>You can get every Talk Python course that&rsquo;s been made so far <a href="http://talkpython.fm/black-friday">for just $250</a> (or less if you&rsquo;ve bought previous bundles).
There&rsquo;s 34 courses currently and the bundle also includes courses published before October 2022.</p>

<h3>PyBites books, courses, and Python exercises</h3>

<p>PyBites is offering 40% off Python courses, books, and exercises in their <a href="https://pybit.es/black-friday-2021/">Black Friday and Cyber Monday sale</a>.</p>

<h3>Mike Driscoll&rsquo;s Python books</h3>

<p>Mike Driscoll is offering $10 off any of his <a href="https://driscollis.gumroad.com/">Python books</a> with the coupon code <strong>black21</strong>.
Remember to apply that coupon code (it&rsquo;s not auto-applied in that link).</p>

<h3>Brian Okken&rsquo;s Pytest book (Pragmatic Bookshelf)</h3>

<p>Pragmatic Bookshelf is offering 40% off all books with the code <strong>turkeysale2021</strong>, including <a href="https://pragprog.com/titles/bopytest2/python-testing-with-pytest-second-edition/"><strong>Brian Okken&rsquo;s Pytest book</strong></a> which is just under $15 with the coupon.</p>

<h3>Learning Python By Example</h3>

<p>Sundeep Agarwal is offering his <a href="https://learnbyexample.gumroad.com/l/py_projects/blackfriday">Practice Python Projects</a> for free this week (normally $10) as well as a <a href="https://learnbyexample.gumroad.com/l/python-bundle/blackfriday">Learn by example Python bundle</a> (which includes Practice Python Projects) for $2 (normally $12).</p>

<h3>Python Problem-Solving Bootcamp</h3>

<p>Rodrigo of Mathspp is offering 40% off his <a href="https://mathspp.gumroad.com/l/pythonbootcamp/blackfriday">Python Problem-Solving Bootcamp</a> which involves a community that will be solving Advent of Code 2021 exercises together during December 2021 as well as Jupyter notebooks and an eBook of analysis around the challenges.</p>

<h3>Django-specific sales</h3>

<p>Adam Johnson&rsquo;s Speed Up Your Django Tests is <a href="https://adamchainz.gumroad.com/l/suydt">on sale for 50% off</a> (it&rsquo;s normally $49).
If you&rsquo;re using Django and writing automated tests (you should be!) check out Adam&rsquo;s book.</p>

<p>Will Vincent is also offering a 50% discount on his Django books, via <a href="https://wsvincent.gumroad.com/l/bhylo/blackfriday2021">a 3 book bundle</a>.
Each of Will&rsquo;s Django books is normally $40, but during his Black Friday sale you can get all 3 books for $59.</p>

<p>Test Driven is offering a 25% discount on a <a href="https://testdriven.io/bundle/django-black-friday/">3 Django course bundle</a> from Michael Herman and friends.
You can get three $30 courses for just $68 in total.</p>

<p>Check out Adam Johnson&rsquo;s <a href="https://adamj.eu/tech/2021/11/22/django-black-friday-deals/">Django-related deals for Black Friday and Cyber Monday</a> post for more Django-related deals.</p>

<h3>More Sales To Watch Out For</h3>

<p><strong>No Starch</strong> often offers Black Friday discounts on lots of <a href="https://nostarch.com/catalog/python">Python books</a> (Al Sweigart, Eric Mathes, and more).</p>

<h3>Lots of screencasts, exercises, books, and courses on sale</h3>

<p>This blog post is not up-to-date yet.
<strong>Check back on Black Friday</strong> for more Python-related sales as I hear about them (and feel free to comment below if you find more).</p>

<p>Also don&rsquo;t go too wild on sales!
If you don&rsquo;t have time to work through a Python course, don&rsquo;t buy it.
If you&rsquo;re unlikely to ever read that Python book, don&rsquo;t get it.
And if you can&rsquo;t commit to weekly Python learning, don&rsquo;t subscribe!</p>

<p>Consider picking a few things that look like you&rsquo;ll actually use them, and buy them.
Python educators love your support, but we also like happy customers who use and love our services.</p>

<p>Also if you have money to spend but nothing to spend it on (that&rsquo;s a great problem to have&hellip;), do as Python educator <a href="https://twitter.com/AllenDowney/status/1462856493716459526">Allen Downey suggested</a> and <strong>donate to charity</strong>.
You could <a href="https://psfmember.org/">become a PSF member</a> or give to highly effective charities via <a href="https://www.givewell.org/">GiveWell</a> or <a href="https://www.thelifeyoucansave.org/">The Life You Can Save</a>.</p>

<p>If you have a question about <a href="https://www.pythonmorsels.com/watch-python-screencasts/">the Python Morsels sale</a> please <a href='m&amp;#97;&amp;#105;l&amp;#116;o&amp;#58;he&amp;#108;p&amp;#64;&amp;#112;%7&amp;#57;th%6Fnmo&amp;#114;s%6&amp;#53;ls&amp;#46;&amp;#99;&amp;#111;m'>email me</a>.
If you have a question about the other sales, reach out to the folks running it.</p>

<p>Happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to sort a dictionary in Python]]></title>
    <link href="https://treyhunner.com/2021/11/how-to-sort-a-dictionary-in-python/"/>
    <updated>2021-11-17T07:30:00-08:00</updated>
    <id>https://treyhunner.com/2021/11/how-to-sort-a-dictionary-in-python</id>
    <content type="html"><![CDATA[<p>Dictionaries are best used for key-value lookups: <strong>we provide a key</strong> and the dictionary <em>very</em> quickly <strong>returns the corresponding value</strong>.</p>

<p>But what if you need both key-value lookups and iteration?
It is possible to loop over a dictionary and when looping, we <em>might</em> care about <strong>the order of the items</strong> in the dictionary.</p>

<p>With dictionary item order in mind, you might wonder how can we <em>sort</em> a dictionary?</p>

<h3>Dictionaries are ordered</h3>

<p>As of Python 3.6 dictionaries are <strong>ordered</strong> (technically the ordering <a href="https://docs.python.org/3/whatsnew/3.7.html#summary-release-highlights">became official in 3.7</a>).</p>

<p>Dictionary keys are stored in <strong>insertion order</strong>, meaning whenever a new key is added it gets added at the very end.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">color_amounts</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;purple&quot;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="s">&quot;green&quot;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s">&quot;blue&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">}</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">color_amounts</span><span class="p">[</span><span class="s">&quot;pink&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">color_amounts</span>
</span><span class='line'><span class="go">{&#39;purple&#39;: 6, &#39;green&#39;: 3, &#39;blue&#39;: 2, &#39;pink&#39;: 4}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But if we update a key-value pair, the key remains where it was before:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">color_amounts</span><span class="p">[</span><span class="s">&quot;green&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">color_amounts</span>
</span><span class='line'><span class="go">{&#39;purple&#39;: 6, &#39;green&#39;: 5, &#39;blue&#39;: 2, &#39;pink&#39;: 4}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So if you plan to populate a dictionary with some specific data and then leave that dictionary as-is, all you need to do is make sure that original data is in the order you&rsquo;d like.</p>

<p>For example if we have a CSV file of US state abbreviations and our file is ordered alphabetically by state name, our dictionary will be ordered the same way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">csv</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">state_abbreviations</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">abbreviation</span> <span class="ow">in</span> <span class="n">csv</span><span class="o">.</span><span class="n">reader</span><span class="p">(</span><span class="s">&quot;state-abbreviations.csv&quot;</span><span class="p">)</span>
</span><span class='line'><span class="gp">... </span>    <span class="n">state_abbreviations</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">abbreviation</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">state_abbreviations</span>
</span><span class='line'><span class="go">{&#39;Alabama&#39;: &#39;AL&#39;, &#39;Alaska&#39;: &#39;AK&#39;, &#39;Arizona&#39;: &#39;AZ&#39;, &#39;Arkansas&#39;: &#39;AR&#39;, &#39;California&#39;: &#39;CA&#39;, ...}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If our input data is already ordered correctly, our dictionary will end up ordered correctly as well.</p>

<h3>How to sort a dictionary by its keys</h3>

<p>What if our data isn&rsquo;t sorted yet?</p>

<p>Say we have a dictionary that mapps meeting rooms to their corresponding room numbers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">rooms</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;Pink&quot;</span><span class="p">:</span> <span class="s">&quot;Rm 403&quot;</span><span class="p">,</span> <span class="s">&quot;Space&quot;</span><span class="p">:</span> <span class="s">&quot;Rm 201&quot;</span><span class="p">,</span> <span class="s">&quot;Quail&quot;</span><span class="p">:</span> <span class="s">&quot;Rm 500&quot;</span><span class="p">,</span> <span class="s">&quot;Lime&quot;</span><span class="p">:</span> <span class="s">&quot;Rm 503&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we&rsquo;d like to sort this dictionary by its keys.</p>

<p>We could use the <code>items</code> method on our dictionary to get iterables of key-value tuples and then use the <code>sorted</code> function to sort these tuples:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">rooms</span><span class="o">.</span><span class="n">items</span><span class="p">()</span>
</span><span class='line'><span class="go">dict_items([(&#39;Pink&#39;, &#39;Rm 403&#39;), (&#39;Space&#39;, &#39;Rm 201&#39;), (&#39;Quail&#39;, &#39;Rm 500&#39;), (&#39;Lime&#39;, &#39;Rm 503&#39;)])</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">sorted</span><span class="p">(</span><span class="n">rooms</span><span class="o">.</span><span class="n">items</span><span class="p">())</span>
</span><span class='line'><span class="go">[(&#39;Lime&#39;, &#39;Rm 503&#39;), (&#39;Pink&#39;, &#39;Rm 403&#39;), (&#39;Quail&#39;, &#39;Rm 500&#39;), (&#39;Space&#39;, &#39;Rm 201&#39;)]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>sorted</code> function uses the <code>&lt;</code> operator to compare many items in the given iterable and return a sorted list.
The <code>sorted</code> function always returns a list.</p>

<p>To make these key-value pairs into a dictionary, we can pass them straight to the <code>dict</code> constructor:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">sorted_rooms</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">rooms</span><span class="o">.</span><span class="n">items</span><span class="p">()))</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">sorted_rooms</span>
</span><span class='line'><span class="go">{&#39;Lime&#39;: &#39;Rm 503&#39;, &#39;Pink&#39;: &#39;Rm 403&#39;, &#39;Quail&#39;: &#39;Rm 500&#39;, &#39;Space&#39;: &#39;Rm 201&#39;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>dict</code> constructor will accept a list of 2-item tuples (or any iterable of 2-item iterables) and make a dictionary out of it, using the first item from each tuple as a key and the second as the corresponding value.</p>

<h3>Key-value pairs are sorted lexicographically&hellip; what?</h3>

<p>We&rsquo;re sorting tuples of the key-value pairs before making a dictionary out of them.
But how does sorting tuples work?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">some_tuples</span> <span class="o">=</span> <span class="p">[(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">9</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">sorted</span><span class="p">(</span><span class="n">some_tuples</span><span class="p">)</span>
</span><span class='line'><span class="go">[(0, 3), (1, 3), (1, 9), (3, 1)]</span>
</span></code></pre></td></tr></table></div></figure>


<p>When sorting tuples, Python uses lexicographical ordering (which sounds fancier than it is).
Comparing a 2-item tuple basically boils down to this algorithm:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">compare_two_item_tuples</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;This is the same as a &lt; b for two 2-item tuples.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="n">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>  <span class="c"># If the first item of each tuple is unequal</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>  <span class="c"># Compare the first item from each tuple</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>  <span class="c"># Compare the second item from each tuple</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ve written <a href="https://treyhunner.com/2019/03/python-deep-comparisons-and-code-readability/">an article on tuple ordering</a> that explains this in more detail.</p>

<p>You might be thinking: <strong>it seems like this sorts not just by keys but by keys <em>and</em> values</strong>.
And you&rsquo;re right!
But only sort of.</p>

<p>The keys in a dictionary <em>should</em> always compare as unequal (if two keys are equal, they&rsquo;re seen as <em>the same key</em>).
So as long as the keys are comparable to each other with the less than operator (<code>&lt;</code>), sorting 2-item tuples of key-value pairs should always sort by the keys.</p>

<h3>Dictionaries can&rsquo;t be sorted in-place</h3>

<p>What if we already have our items <em>in</em> a dictionary and we&rsquo;d like to sort that dictionary?
Unlike lists, <strong>there&rsquo;s no <code>sort</code> method on dictionaries</strong>.</p>

<p>We can&rsquo;t sort a dictionary in-place, but we could get the items from our dictionary, sort those items using the same technique we used before, and then turn those items into a new dictionary:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">rooms</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;Pink&quot;</span><span class="p">:</span> <span class="s">&quot;Rm 403&quot;</span><span class="p">,</span> <span class="s">&quot;Space&quot;</span><span class="p">:</span> <span class="s">&quot;Rm 201&quot;</span><span class="p">,</span> <span class="s">&quot;Quail&quot;</span><span class="p">:</span> <span class="s">&quot;Rm 500&quot;</span><span class="p">,</span> <span class="s">&quot;Lime&quot;</span><span class="p">:</span> <span class="s">&quot;Rm 503&quot;</span><span class="p">}</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">sorted_rooms</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">rooms</span><span class="o">.</span><span class="n">items</span><span class="p">()))</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">sorted_rooms</span>
</span><span class='line'><span class="go">{&#39;Lime&#39;: &#39;Rm 503&#39;, &#39;Pink&#39;: &#39;Rm 403&#39;, &#39;Quail&#39;: &#39;Rm 500&#39;, &#39;Space&#39;: &#39;Rm 201&#39;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That creates a new dictionary object.
If we <em>really</em> wanted to update our original dictionary object, we could take the items from the dictionary, sort them, clear the dictionary of all its items, and then add all the items back into the dictionary:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">old_dictionary</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;Pink&quot;</span><span class="p">:</span> <span class="s">&quot;Rm 403&quot;</span><span class="p">,</span> <span class="s">&quot;Space&quot;</span><span class="p">:</span> <span class="s">&quot;Rm 201&quot;</span><span class="p">,</span> <span class="s">&quot;Quail&quot;</span><span class="p">:</span> <span class="s">&quot;Rm 500&quot;</span><span class="p">,</span> <span class="s">&quot;Lime&quot;</span><span class="p">:</span> <span class="s">&quot;Rm 503&quot;</span><span class="p">}</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">sorted_items</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">old_dictionary</span><span class="o">.</span><span class="n">items</span><span class="p">())</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">old_dictionary</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">old_dictionary</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">sorted_items</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>But why bother?
We don&rsquo;t usually <em>want</em> to operate on data structures in-place in Python: we tend to prefer making a new data structure rather than re-using an old one (this preference is partly thanks to <a href="https://www.pythonmorsels.com/topics/variables-are-pointers/">how variables work in Python</a>).</p>

<h3>How to sort a dictionary by its values</h3>

<p>What if we wanted to sort a dictionary by its values instead of its keys?</p>

<p>We could make a new list of value-key tuples (actually a generator in our case below), sort that, then flip them back to key-value tuples and recreate our dictionary:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">rooms</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;Pink&quot;</span><span class="p">:</span> <span class="s">&quot;Rm 403&quot;</span><span class="p">,</span> <span class="s">&quot;Space&quot;</span><span class="p">:</span> <span class="s">&quot;Rm 201&quot;</span><span class="p">,</span> <span class="s">&quot;Quail&quot;</span><span class="p">:</span> <span class="s">&quot;Rm 500&quot;</span><span class="p">,</span> <span class="s">&quot;Lime&quot;</span><span class="p">:</span> <span class="s">&quot;Rm 503&quot;</span><span class="p">}</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">room_to_name</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">((</span><span class="n">room</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span> <span class="k">for</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">room</span><span class="p">)</span> <span class="ow">in</span> <span class="n">rooms</span><span class="o">.</span><span class="n">items</span><span class="p">())</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">sorted_rooms</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'><span class="gp">... </span>    <span class="n">name</span><span class="p">:</span> <span class="n">room</span>
</span><span class='line'><span class="gp">... </span>    <span class="k">for</span> <span class="n">room</span><span class="p">,</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">room_to_name</span>
</span><span class='line'><span class="gp">... </span><span class="p">}</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">sorted_rooms</span>
</span><span class='line'><span class="go">{&#39;Space&#39;: &#39;Rm 201&#39;, &#39;Pink&#39;: &#39;Rm 403&#39;, &#39;Quail&#39;: &#39;Rm 500&#39;, &#39;Lime&#39;: &#39;Rm 503&#39;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works but it&rsquo;s a bit long.
Also this technique actually sorts both our values and our keys (giving the values precedence in the sorting).</p>

<p>What if we wanted to <em>just</em> sort our dictionary by its values, ignoring the contents of the keys entirely?
Python&rsquo;s <code>sorted</code> function accepts a <code>key</code> argument that we can use for this!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">help</span><span class="p">(</span><span class="nb">sorted</span><span class="p">)</span>
</span><span class='line'><span class="go">Help on built-in function sorted in module builtins:</span>
</span><span class='line'>
</span><span class='line'><span class="go">sorted(iterable, /, *, key=None, reverse=False)</span>
</span><span class='line'><span class="go">    Return a new list containing all items from the iterable in ascending order.</span>
</span><span class='line'>
</span><span class='line'><span class="go">    A custom key function can be supplied to customize the sort order, and the</span>
</span><span class='line'><span class="go">    reverse flag can be set to request the result in descending order.</span>
</span></code></pre></td></tr></table></div></figure>


<p>The key function we pass to sorted should accept an item from the iterable we&rsquo;re sorting and return the <em>key</em> to sort by.
Note that the word &ldquo;key&rdquo; here isn&rsquo;t related to dictionary keys.
Dictionary keys are used for looking up dictionary values whereas this key function returns an object that determines how to order items in an iterable.</p>

<p>If we want to sort the dictionary by its values, we could make a key function that accepts each item in our list of 2-item tuples and <strong>returns just the value</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">value_from_item</span><span class="p">(</span><span class="n">item</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Return just the value from a given (key, value) tuple.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="o">=</span> <span class="n">item</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">value</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we&rsquo;d use our key function by passing it to the <code>sorted</code> function (yes <a href="https://treyhunner.com/2020/01/passing-functions-as-arguments/">functions can be passed to other functions in Python</a>) and pass the result to <code>dict</code> to create a new dictionary:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">sorted_rooms</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">rooms</span><span class="o">.</span><span class="n">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="n">value_from_item</span><span class="p">))</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">sorted_rooms</span>
</span><span class='line'><span class="go">{&#39;Space&#39;: &#39;Rm 201&#39;, &#39;Pink&#39;: &#39;Rm 403&#39;, &#39;Quail&#39;: &#39;Rm 500&#39;, &#39;Lime&#39;: &#39;Rm 503&#39;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you prefer not to create a custom key function just to use it once, you could use a lambda function (which I <a href="https://treyhunner.com/2018/09/stop-writing-lambda-expressions/">don&rsquo;t usually recommend</a>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">sorted_rooms</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">rooms</span><span class="o">.</span><span class="n">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">item</span><span class="p">:</span> <span class="n">item</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">sorted_rooms</span>
</span><span class='line'><span class="go">{&#39;Space&#39;: &#39;Rm 201&#39;, &#39;Pink&#39;: &#39;Rm 403&#39;, &#39;Quail&#39;: &#39;Rm 500&#39;, &#39;Lime&#39;: &#39;Rm 503&#39;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or you could use <code>operator.itemgetter</code> to make a key function that gets the second item from each key-value tuple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">operator</span> <span class="kn">import</span> <span class="n">itemgetter</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">sorted_rooms</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">rooms</span><span class="o">.</span><span class="n">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="n">itemgetter</span><span class="p">(</span><span class="mi">1</span><span class="p">)))</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">sorted_rooms</span>
</span><span class='line'><span class="go">{&#39;Space&#39;: &#39;Rm 201&#39;, &#39;Pink&#39;: &#39;Rm 403&#39;, &#39;Quail&#39;: &#39;Rm 500&#39;, &#39;Lime&#39;: &#39;Rm 503&#39;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I discussed my preference for <code>itemgetter</code> <a href="https://treyhunner.com/2018/09/stop-writing-lambda-expressions/#Overuse:_using_lambda_for_very_simple_operations">in my article on lambda functions</a>.</p>

<h3>Ordering a dictionary in some other way</h3>

<p>What if we needed to sort our dictionary by something other than just a key or a value?
For example what if our room number strings include numbers that aren&rsquo;t always the same length:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">rooms</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&quot;Pink&quot;</span><span class="p">:</span> <span class="s">&quot;Rm 403&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;Space&quot;</span><span class="p">:</span> <span class="s">&quot;Rm 201&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;Quail&quot;</span><span class="p">:</span> <span class="s">&quot;Rm 500&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;Lime&quot;</span><span class="p">:</span> <span class="s">&quot;Rm 503&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;Ocean&quot;</span><span class="p">:</span> <span class="s">&quot;Rm 2000&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;Big&quot;</span><span class="p">:</span> <span class="s">&quot;Rm 30&quot;</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we sorted these rooms by value, those strings wouldn&rsquo;t be sorted in the numerical way we&rsquo;re hoping for:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">operator</span> <span class="kn">import</span> <span class="n">itemgetter</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">sorted_rooms</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">rooms</span><span class="o">.</span><span class="n">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="n">itemgetter</span><span class="p">(</span><span class="mi">1</span><span class="p">)))</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">sorted_rooms</span>
</span><span class='line'><span class="go">{&#39;Ocean&#39;: &#39;Rm 2000&#39;, &#39;Space&#39;: &#39;Rm 201&#39;, &#39;Big&#39;: &#39;Rm 30&#39;, &#39;Pink&#39;: &#39;Rm 403&#39;, &#39;Quail&#39;: &#39;Rm 500&#39;, &#39;Lime&#39;: &#39;Rm 503&#39;}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Rm 30</strong> should be first and <strong>Rm 2000</strong> should be last.
But we&rsquo;re sorting strings, which are ordered character-by-character based on the unicode value of each character (I <a href="https://treyhunner.com/2019/03/python-deep-comparisons-and-code-readability/#String_comparisons_in_Python">noted this</a> in my article on tuple ordering).</p>

<p>We could customize the <code>key</code> function we&rsquo;re using to sort numerically instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">by_room_number</span><span class="p">(</span><span class="n">item</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Return numerical room given a (name, room_number) tuple.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">name</span><span class="p">,</span> <span class="n">room</span> <span class="o">=</span> <span class="n">item</span>
</span><span class='line'>    <span class="n">_</span><span class="p">,</span> <span class="n">number</span> <span class="o">=</span> <span class="n">room</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">number</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we use this key function to sort our dictionary:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">sorted_rooms</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">rooms</span><span class="o">.</span><span class="n">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="n">by_room_number</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>It will be sorted by the integer room number, as expected:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">sorted_rooms</span>
</span><span class='line'><span class="go">{&#39;Big&#39;: &#39;Rm 30&#39;, &#39;Space&#39;: &#39;Rm 201&#39;, &#39;Pink&#39;: &#39;Rm 403&#39;, &#39;Quail&#39;: &#39;Rm 500&#39;, &#39;Lime&#39;: &#39;Rm 503&#39;, &#39;Ocean&#39;: &#39;Rm 2000&#39;}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Should you sort a dictionary?</h3>

<p>When you&rsquo;re about to sort a dictionary, first ask yourself &ldquo;do I need to do this&rdquo;?
In fact, when you&rsquo;re considering looping over a dictionary you might ask &ldquo;do I really need a dictionary here&rdquo;?</p>

<p>Dictionaries are used for key-value lookups: you can quickly get a value given a key.
They&rsquo;re very fast at retrieving values for keys.
But dictionaries take up more space than a list of tuples.</p>

<p>If you can get away with using a list of tuples in your code (because you don&rsquo;t actually need a key-value lookup), you probably <em>should</em> use a list of tuples instead of a dictionary.</p>

<p>But if key lookups are what you need, it&rsquo;s unlikely that you also need to loop over your dictionary.</p>

<p>Now it&rsquo;s certainly possible that right now you do in fact have a good use case for sorting a dictionary (for example maybe you&rsquo;re <a href="https://gist.github.com/treyhunner/7adcbc96870b79642f1754c3cc602ac6">sorting keys in a dictionary of attributes</a>), but keep in mind that you&rsquo;ll need to sort a dictionary <strong>very rarely</strong>.</p>

<h3>Summary</h3>

<p>Dictionaries are used for quickly looking up a value based on a key.
The <em>order</em> of a dictionary&rsquo;s items is rarely important.</p>

<p>In the rare case that you care about the order of your dictionary&rsquo;s items, keep in mind that dictionaries are ordered by the <em>insertion order</em> of their keys (as of Python 3.6).
So the keys in your dictionary will remain in the order they were added to the dictionary.</p>

<p>If you&rsquo;d like to sort a dictionary by its keys, you can use the built-in <code>sorted</code> function along with the <code>dict</code> constructor:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">sorted_dictionary</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">old_dictionary</span><span class="o">.</span><span class="n">items</span><span class="p">()))</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;d like to sort a dictionary by its values, you can pass a custom <code>key</code> function (one which returns the value for each item) to <code>sorted</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">value_from_item</span><span class="p">(</span><span class="n">item</span><span class="p">):</span>
</span><span class='line'><span class="gp">... </span>    <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="o">=</span> <span class="n">item</span>
</span><span class='line'><span class="gp">... </span>    <span class="k">return</span> <span class="n">value</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">sorted_dictionary</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span><span class="n">old_dictionary</span><span class="o">.</span><span class="n">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="n">value_from_item</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>But remember, it&rsquo;s not often that we care about the order of a dictionary.
Whenever you&rsquo;re sorting a dictionary, please remember to ask yourself <strong>do I really need to sort this data structure</strong> and <strong>would a list of tuples be more suitable than a dictionary here</strong>?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to flatten a list in Python]]></title>
    <link href="https://treyhunner.com/2021/11/how-to-flatten-a-list-in-python/"/>
    <updated>2021-11-01T08:00:00-07:00</updated>
    <id>https://treyhunner.com/2021/11/how-to-flatten-a-list-in-python</id>
    <content type="html"><![CDATA[<p>You&rsquo;ve somehow ended up with lists nested inside of lists, possibly like this one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">groups</span> <span class="o">=</span> <span class="p">[[</span><span class="s">&quot;Hong&quot;</span><span class="p">,</span> <span class="s">&quot;Ryan&quot;</span><span class="p">],</span> <span class="p">[</span><span class="s">&quot;Anthony&quot;</span><span class="p">,</span> <span class="s">&quot;Wilhelmina&quot;</span><span class="p">],</span> <span class="p">[</span><span class="s">&quot;Margaret&quot;</span><span class="p">,</span> <span class="s">&quot;Adrian&quot;</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>But you <em>want</em> just a single list (without the nesting) like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">expected_output</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;Hong&quot;</span><span class="p">,</span> <span class="s">&quot;Ryan&quot;</span><span class="p">,</span> <span class="s">&quot;Anthony&quot;</span><span class="p">,</span> <span class="s">&quot;Wilhelmina&quot;</span><span class="p">,</span> <span class="s">&quot;Margaret&quot;</span><span class="p">,</span> <span class="s">&quot;Adrian&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>You need to flatten your list-of-lists.</p>

<h3>We&rsquo;re looking for a &ldquo;shallow&rdquo; flatten</h3>

<p>We can think of this as a <strong>shallow flatten</strong> operation, meaning we&rsquo;re flattening this list by one level.
A <strong>deep flatten</strong> operation would handle lists-of-lists-of-lists-of-lists (and so on) and that&rsquo;s a bit more than we need for our use case.</p>

<p>The flattening strategy we come up with should work on lists-of-lists as well as any other type of <a href="https://www.pythonmorsels.com/topics/iterable/">iterable</a>-of-iterables.
For example lists of tuples should be flattenable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">groups</span> <span class="o">=</span> <span class="p">[(</span><span class="s">&quot;Hong&quot;</span><span class="p">,</span> <span class="s">&quot;Ryan&quot;</span><span class="p">),</span> <span class="p">(</span><span class="s">&quot;Anthony&quot;</span><span class="p">,</span> <span class="s">&quot;Wilhelmina&quot;</span><span class="p">),</span> <span class="p">(</span><span class="s">&quot;Margaret&quot;</span><span class="p">,</span> <span class="s">&quot;Adrian&quot;</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure>


<p>And even an odd type like a <code>dict_items</code> object (which we get from asking a dictionary for its items) should be flattenable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">fruit_counts</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;apple&quot;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s">&quot;lime&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s">&quot;watermelon&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">&quot;mandarin&quot;</span><span class="p">:</span> <span class="mi">4</span><span class="p">}</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">fruit_counts</span><span class="o">.</span><span class="n">items</span><span class="p">()</span>
</span><span class='line'><span class="go">dict_items([(&#39;apple&#39;, 3), (&#39;lime&#39;, 2), (&#39;watermelon&#39;, 1), (&#39;mandarin&#39;, 4)])</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">flattened_counts</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;apple&#39;</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="s">&#39;lime&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="s">&#39;watermelon&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s">&#39;mandarin&#39;</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Flattening iterables-of-iterables with a <code>for</code> loop</h3>

<p>One way to flatten an iterable-of-iterables is with a <code>for</code> loop.
We can loop one level deep to get each of the inner iterables.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">group</span> <span class="ow">in</span> <span class="n">groups</span><span class="p">:</span>
</span><span class='line'>    <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then we loop a second level deep to get each item from each inner iterable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">group</span> <span class="ow">in</span> <span class="n">groups</span><span class="p">:</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">group</span><span class="p">:</span>
</span><span class='line'>        <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then append each item to a new list:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">names</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">group</span> <span class="ow">in</span> <span class="n">groups</span><span class="p">:</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">group</span><span class="p">:</span>
</span><span class='line'>        <span class="n">names</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s also a list method that makes this a bit shorter, the <code>extend</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">names</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">group</span> <span class="ow">in</span> <span class="n">groups</span><span class="p">:</span>
</span><span class='line'>    <span class="n">names</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">group</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The list <code>extend</code> method accepts an iterable and appends every item in the iterable you give to it.</p>

<p>Or we could use the <code>+=</code> operator to concatenate each list to our new list:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">names</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">group</span> <span class="ow">in</span> <span class="n">groups</span><span class="p">:</span>
</span><span class='line'>    <span class="n">names</span> <span class="o">+=</span> <span class="n">group</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can think of <code>+=</code> on lists as calling the <code>extend</code> method.
With lists these two operations (<code>+=</code> and <code>extend</code>) are equivalent.</p>

<h3>Flattening iterables-of-iterables with a comprehension</h3>

<p>This nested <code>for</code> loop with an <code>append</code> call might look familiar:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">names</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">group</span> <span class="ow">in</span> <span class="n">groups</span><span class="p">:</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">group</span><span class="p">:</span>
</span><span class='line'>        <span class="n">names</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The structure of this code looks like something we could <a href="https://treyhunner.com/2015/12/python-list-comprehensions-now-in-color/">copy-paste into a list comprehension</a>.</p>

<p>Inside our square brackets we&rsquo;d copy the thing we&rsquo;re appending first, and then the logic for our first loop, and then the logic for our second loop:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">names</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="n">name</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">group</span> <span class="ow">in</span> <span class="n">groups</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">group</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This comprehension loops two levels deep, just like our nested <code>for</code> loops did.
Note that the order of the <code>for</code> clauses in the comprehension <strong>must remain the same as the order of the <code>for</code> loops</strong>.</p>

<p>The (sometimes confusing) order of those <code>for</code> clauses is partly why I recommend <a href="https://treyhunner.com/2015/12/python-list-comprehensions-now-in-color/">copy-pasting into a comprehension</a>.
When turning a <code>for</code> loop into a comprehension, the <code>for</code> and <code>if</code> clauses remain in the same relative place, but the thing you&rsquo;re appending moves from the end to the beginning.</p>

<h3>Could we flatten with <code>*</code> in a comprehension?</h3>

<p>But what about Python&rsquo;s <code>*</code> operator?
I&rsquo;ve written about the many uses for <a href="https://treyhunner.com/2018/10/asterisks-in-python-what-they-are-and-how-to-use-them/">the prefixed asterisk symbol in Python</a>.</p>

<p>We can use <code>*</code> in Python&rsquo;s list literal syntax (<code>[</code>&hellip;<code>]</code>) to unpack an iterable into a new list:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">more_numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">*</span><span class="n">numbers</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">18</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">more_numbers</span>
</span><span class='line'><span class="go">[2, 1, 3, 4, 7, 11, 18]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Could we use that <code>*</code> operator to unpack an iterable within a comprehension?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">names</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="o">*</span><span class="n">group</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">group</span> <span class="ow">in</span> <span class="n">groups</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can&rsquo;t.
If we try to do this Python will specifically tell us that the <code>*</code> operator can&rsquo;t be used like this in a comprehension:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">names</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'><span class="gp">... </span>    <span class="o">*</span><span class="n">group</span>
</span><span class='line'><span class="gp">... </span>    <span class="k">for</span> <span class="n">group</span> <span class="ow">in</span> <span class="n">groups</span>
</span><span class='line'><span class="gp">... </span><span class="p">]</span>
</span><span class='line'>  File <span class="nb">&quot;&lt;stdin&gt;&quot;</span>, line <span class="m">2</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>     <span class="o">^</span>
</span><span class='line'><span class="gr">SyntaxError</span>: <span class="n">iterable unpacking cannot be used in comprehension</span>
</span></code></pre></td></tr></table></div></figure>


<p>This feature was specifically excluded from <a href="https://www.python.org/dev/peps/pep-0448/#variations">PEP 448</a>, the Python Enhancement Proposal that added this <code>*</code>-in-list-literal syntax to Python due to readability concerns.</p>

<h3>Can&rsquo;t we use <code>sum</code>?</h3>

<p>Here&rsquo;s another list flattening trick I&rsquo;ve seen a few times:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">names</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">groups</span><span class="p">,</span> <span class="p">[])</span>
</span></code></pre></td></tr></table></div></figure>


<p>This <em>does</em> work:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">names</span>
</span><span class='line'><span class="go">[&#39;Hong&#39;, &#39;Ryan&#39;, &#39;Anthony&#39;, &#39;Wilhelmina&#39;, &#39;Margaret&#39;, &#39;Adrian&#39;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>But I find this technique pretty unintuitive.</p>

<p>We use the <code>+</code> operator in Python for both adding numbers and concatenating sequences and the <code>sum</code> function happens to work with anything that supports the <code>+</code> operator (thanks to <a href="https://www.pythonmorsels.com/topics/duck-typing/">duck typing</a>).
But in my mind, the word &ldquo;sum&rdquo; implies arithmetic: <strong>summing adds numbers together</strong>.</p>

<p>I find it confusing to &ldquo;sum&rdquo; lists, so <strong>I don&rsquo;t recommend this approach</strong>.</p>

<p><strong>Quick Aside</strong>: The algorithm <code>sum</code> uses also makes list flattening <em>really</em> slow (<a href="https://gist.github.com/treyhunner/f0c069496a1e41aadcf0d7050e475eb3">timing comparison here</a>).
In <a href="https://www.youtube.com/watch?v=duvZ-2UK0fc">Big-O</a> terms (for the time complexity nerds), <code>sum</code> with lists is <code>O(n**2)</code> instead of <code>O(n)</code>.</p>

<h3>What about <code>itertools.chain</code>?</h3>

<p>There is one more tool that&rsquo;s often used for flattening: the <code>chain</code> utility in the <code>itertools</code> module.</p>

<p><code>chain</code> accepts any number arguments and it returns an <a href="https://treyhunner.com/2018/06/how-to-make-an-iterator-in-python/">iterator</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">chain</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">chain</span><span class="p">(</span><span class="o">*</span><span class="n">groups</span><span class="p">)</span>
</span><span class='line'><span class="go">&lt;itertools.chain object at 0x7fc1b2d65bb0&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can loop over that iterator or turn it into another iterable, like a list:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">chain</span><span class="p">(</span><span class="o">*</span><span class="n">groups</span><span class="p">))</span>
</span><span class='line'><span class="go">[&#39;Hong&#39;, &#39;Ryan&#39;, &#39;Anthony&#39;, &#39;Wilhelmina&#39;, &#39;Margaret&#39;, &#39;Adrian&#39;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s actually a method on <code>chain</code> that&rsquo;s specifically for flattening a single iterable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">chain</span><span class="o">.</span><span class="n">from_iterable</span><span class="p">(</span><span class="n">groups</span><span class="p">))</span>
</span><span class='line'><span class="go">[&#39;Hong&#39;, &#39;Ryan&#39;, &#39;Anthony&#39;, &#39;Wilhelmina&#39;, &#39;Margaret&#39;, &#39;Adrian&#39;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using <code>chain.from_iterable</code> is more performant than using <code>chain</code> with <code>*</code> because <code>*</code> unpacks the whole iterable immediately when <code>chain</code> is called.</p>

<h3>Recap: comparing list flattening techniques</h3>

<p>If you want to flatten an iterable-of-iterables lazily, I would use <code>itertools.chain.from_iterable</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">chain</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">flattened</span> <span class="o">=</span> <span class="n">chain</span><span class="o">.</span><span class="n">from_iterable</span><span class="p">(</span><span class="n">groups</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will return an <a href="https://treyhunner.com/2018/06/how-to-make-an-iterator-in-python/">iterator</a>, meaning no work will be done until the returned iterable is looped over:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">flattened</span><span class="p">)</span>
</span><span class='line'><span class="go">[&#39;Hong&#39;, &#39;Ryan&#39;, &#39;Anthony&#39;, &#39;Wilhelmina&#39;, &#39;Margaret&#39;, &#39;Adrian&#39;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>And it will be consumed as we loop, so looping twice will result in an empty iterable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">flattened</span><span class="p">)</span>
</span><span class='line'><span class="go">[]</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you find <code>itertools.chain</code> a bit too cryptic, you might prefer a <code>for</code> loop that calls the <code>extend</code> method on a new list to repeatedly extend the values in each iterable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">names</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">group</span> <span class="ow">in</span> <span class="n">groups</span><span class="p">:</span>
</span><span class='line'>    <span class="n">names</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">group</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or a <code>for</code> loop that uses the <code>+=</code> operator on our new list:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">names</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">group</span> <span class="ow">in</span> <span class="n">groups</span><span class="p">:</span>
</span><span class='line'>    <span class="n">names</span> <span class="o">+=</span> <span class="n">group</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unlike <code>chain.from_iterable</code>, both of these <code>for</code> loops build up new list rather than a lazy iterator object.</p>

<p>If you find list comprehensions readable (I love them for signaling &ldquo;look we&rsquo;re building up a list&rdquo;) then you might prefer a comprehension instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">names</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="n">name</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">group</span> <span class="ow">in</span> <span class="n">groups</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">group</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>And if you <em>do</em> want laziness (an iterator) but you don&rsquo;t like <code>itertools.chain</code> you could make a <a href="https://www.pythonmorsels.com/topics/how-write-generator-expression/">generator expression</a> that does the same thing as <code>itertools.chain.from_iterable</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">names</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="n">name</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">group</span> <span class="ow">in</span> <span class="n">groups</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">group</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Happy list flattening!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What's great about Python 3.10?]]></title>
    <link href="https://treyhunner.com/2021/10/whats-great-about-python-3-dot-10/"/>
    <updated>2021-10-08T08:30:30-07:00</updated>
    <id>https://treyhunner.com/2021/10/whats-great-about-python-3-dot-10</id>
    <content type="html"><![CDATA[<p>What changed in Python 3.10 and which of those changes matter for you?</p>

<p>I&rsquo;ve spent this week playing with Python 3.10.
I&rsquo;ve primarily been working on solutions to Python Morsels exercises that embrace new Python 3.10 features.
I&rsquo;d like to share what I&rsquo;ve found.</p>

<h2>Easier troubleshooting with improved error messages</h2>

<p>The biggest Python 3.10 improvements by far are all related improved error messages.
I make typos all the time.
Error messages that help me quickly figure out what&rsquo;s wrong are <em>really</em> important.</p>

<p>I&rsquo;ve already grown accustom to the process of deciphering many of Python&rsquo;s more cryptic error messages.
So while improved error messages <em>are</em> great for me, this change is <em>especially</em> big for new Python learners.</p>

<p>When I teach an introduction to Python course, some of the most common errors I help folks debug are:</p>

<ol>
<li>Missing colons at the end of a block of code</li>
<li>Missing indentation or incorrect indentation in a block of code</li>
<li>Misspelled variable names</li>
<li>Brackets and braces that were never closed</li>
</ol>


<p>Python 3.10 makes all of these errors (and more) much clearer for Python learners.</p>

<p>New Python users often forget to put a <code>:</code> to begin their code blocks.
In Python 3.9 users would see this cryptic error message:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python3.9 temp.py 70
</span><span class='line'>  File <span class="s2">&quot;/home/trey/temp.py&quot;</span>, line 4
</span><span class='line'>    <span class="k">if</span> temperature &lt; 65
</span><span class='line'>                       ^
</span><span class='line'>SyntaxError: invalid syntax
</span></code></pre></td></tr></table></div></figure>


<p>Python 3.10 makes this much clearer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python3.10 temp.py 70
</span><span class='line'>  File <span class="s2">&quot;/home/trey/temp.py&quot;</span>, line 4
</span><span class='line'>    <span class="k">if</span> temperature &lt; 65
</span><span class='line'>                       ^
</span><span class='line'>SyntaxError: expected <span class="s1">&#39;:&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Indentation errors are clearer too (that <code>after 'if' statement on line 4</code> is new):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python3.10 temp.py 70
</span><span class='line'>  File <span class="s2">&quot;/home/trey/temp.py&quot;</span>, line 5
</span><span class='line'>    print<span class="o">(</span><span class="s2">&quot;Too cold&quot;</span><span class="o">)</span>
</span><span class='line'>    ^
</span><span class='line'>IndentationError: expected an indented block after <span class="s1">&#39;if&#39;</span> statement on line 4
</span></code></pre></td></tr></table></div></figure>


<p>And incorrect variable and attribute names now show a suggestion:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python3.10 temp.py 70
</span><span class='line'>Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
</span><span class='line'>  File <span class="s2">&quot;/home/trey/temp.py&quot;</span>, line 4, in &lt;module&gt;
</span><span class='line'>    <span class="k">if</span> temparature &lt; 65:
</span><span class='line'>NameError: name <span class="s1">&#39;temparature&#39;</span> is not defined. Did you mean: <span class="s1">&#39;temperature&#39;</span>?
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m really excited about that one because I make typos in variable names pretty much daily.</p>

<p>The error message shown for unclosed brackets, braces, and parentheses is also <em>much</em> more helpful.</p>

<p>Python used to show us the <em>next</em> line of code after an unclosed brace:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python3.9 temp.py 70
</span><span class='line'>  File <span class="s2">&quot;/home/trey/temp.py&quot;</span>, line 6
</span><span class='line'>    <span class="k">elif</span> temperature &gt; 80:
</span><span class='line'>    ^
</span><span class='line'>SyntaxError: invalid syntax
</span></code></pre></td></tr></table></div></figure>


<p>Now it instead points to the opening brace that was left unclosed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python3.10 temp.py 70
</span><span class='line'>  File <span class="s2">&quot;/home/trey/temp.py&quot;</span>, line 5
</span><span class='line'>    print<span class="o">(</span><span class="s2">&quot;Too cold&quot;</span>
</span><span class='line'>         ^
</span><span class='line'>SyntaxError: <span class="s1">&#39;(&#39;</span> was never closed
</span></code></pre></td></tr></table></div></figure>


<p>You can find more details on these improved error messages in the <a href="https://docs.python.org/3.10/whatsnew/3.10.html#better-error-messages">better error messages</a> section of the &ldquo;What&rsquo;s new in Python 3.10&rdquo; documentation.</p>

<p>While Python 3.10 does include other changes (read on if you&rsquo;re interested), these improved error messages are the one 3.10 improvement that <strong>all Python users will notice</strong>.</p>

<h2>IDLE is more visually consistent</h2>

<p>Here&rsquo;s another feature that affects new Python users: the look of IDLE <a href="https://twitter.com/sjoerdjob/status/1446172628922867712">improved a bit</a>.
IDLE now uses spaces for indentation instead of tabs (unlike the built-in REPL) and the familiar <code>...</code> in front of REPL continuation lines is now present in IDLE within a sidebar.</p>

<p>Before IDLE looked like this:</p>

<p><img src="https://treyhunner.com/images/idle3.9.png" title="An IDLE Shell window with an if-else block that has no ... prefixes and uses tabs for indentation" ></p>

<p>Now IDLE looks like this:</p>

<p><img src="https://treyhunner.com/images/idle3.10.png" title="An IDLE Shell window with an if-else block that has ... prefixes and uses 4 spaces for indentation" ></p>

<p>Looks a lot more like the Python REPL on the command-prompt, right?</p>

<h2>Length-checking for the zip function</h2>

<p>There&rsquo;s a Python Morsels exercise called <code>strict_zip</code>.
It&rsquo;s now become a &ldquo;re-implement this already built-in functionality&rdquo; exercise.
Still useful for the sake of learning how <code>zip</code> is implemented, but no longer useful day-to-day code.</p>

<p>Why isn&rsquo;t it useful?
Because <code>zip</code> now accepts a <code>strict</code> argument!
So if you&rsquo;re working with iterables that <em>might</em> be different lengths but <em>shouldn&rsquo;t</em> be, passing <code>strict=True</code> is now <a href="https://docs.python.org/3.10/library/functions.html#zip">recommended when using zip</a>.</p>

<h2>Structural pattern matching</h2>

<p>The big Python 3.10 feature everyone is talking about is structural pattern matching.
This feature is very powerful but probably not very relevant for most Python users.</p>

<p>One important note about this feature: <code>match</code> and <code>case</code> are still allowable variable names so all your existing code should keep working (they&rsquo;re <a href="https://www.python.org/dev/peps/pep-0622/#the-match-statement">soft keywords</a>).</p>

<h3>Matching the shape and contents of an iterable</h3>

<p>You could look at the new <code>match</code>/<code>case</code> statement as <strong>like tuple unpacking with a lot more than just length-checking</strong>.</p>

<p>Compare this snippet of code <a href="https://github.com/django/django/blob/main/django/templatetags/i18n.py#L243..L246">from a Django template tag</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">args</span> <span class="o">=</span> <span class="n">token</span><span class="o">.</span><span class="n">split_contents</span><span class="p">()</span>
</span><span class='line'><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">args</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">5</span> <span class="ow">or</span> <span class="n">args</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="s">&#39;for&#39;</span> <span class="ow">or</span> <span class="n">args</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">!=</span> <span class="s">&#39;as&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">raise</span> <span class="n">TemplateSyntaxError</span><span class="p">(</span><span class="s">&quot;&#39;</span><span class="si">%s</span><span class="s">&#39; requires &#39;for string as variable&#39; (got </span><span class="si">%r</span><span class="s">)&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">args</span><span class="p">[</span><span class="mi">1</span><span class="p">:]))</span>
</span><span class='line'><span class="k">return</span> <span class="n">GetLanguageInfoNode</span><span class="p">(</span><span class="n">parser</span><span class="o">.</span><span class="n">compile_filter</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="mi">2</span><span class="p">]),</span> <span class="n">args</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>To the same snippet refactored to use structural pattern matching:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">match</span> <span class="n">token</span><span class="o">.</span><span class="n">split_contents</span><span class="p">():</span>
</span><span class='line'>    <span class="n">case</span> <span class="p">[</span><span class="n">name</span><span class="p">,</span> <span class="s">&quot;for&quot;</span><span class="p">,</span> <span class="n">code</span><span class="p">,</span> <span class="s">&quot;as&quot;</span><span class="p">,</span> <span class="n">info</span><span class="p">]:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">GetLanguageInfoNode</span><span class="p">(</span><span class="n">parser</span><span class="o">.</span><span class="n">compile_filter</span><span class="p">(</span><span class="n">code</span><span class="p">),</span> <span class="n">info</span><span class="p">)</span>
</span><span class='line'>    <span class="n">case</span> <span class="p">[</span><span class="n">name</span><span class="p">,</span> <span class="o">*</span><span class="n">rest</span><span class="p">]:</span>
</span><span class='line'>        <span class="k">raise</span> <span class="n">TemplateSyntaxError</span><span class="p">(</span><span class="n">f</span><span class="s">&quot;&#39;{name}&#39; requires &#39;for string as variable&#39; (got {rest!r})&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that the second approach allows us to describe both the number of variables we&rsquo;re unpacking our data into and the names to unpack into (just like tuple unpacking) while also matching the second and third values against the strings <code>for</code> and <code>as</code>.
If those strings don&rsquo;t show up in the expected positions, we raise an appropriate exception.</p>

<p>Structural pattern matching is <em>really</em> handy for implementing simple parsers, like Django&rsquo;s template language.
I&rsquo;m looking forward to seeing Django&rsquo;s refactored template code in 2025 (after Python 3.9 support ends).</p>

<h3>Complex type checking</h3>

<p>Structural pattern matching also excels at type checking.
Strong type checking is usually discouraged in Python, but it does come crop up from time to time.</p>

<p>The most common place I see <code>isinstance</code> checks is in operator overloading dunder methods (<code>__eq__</code>, <code>__lt__</code>, <code>__add__</code>, <code>__sub__</code>, etc).
I&rsquo;ve already upgraded some Python Morsels solutions to compare and contrast <code>match</code>-<code>case</code> and <code>isinstance</code> and I&rsquo;m finding it more verbose in some cases but also occasionally somewhat clearer.</p>

<p>For example this code snippet (again <a href="https://github.com/django/django/blob/3.2/django/utils/formats.py#L195..L209">from Django</a>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>  <span class="c"># Handle strings first for performance reasons.</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">value</span>
</span><span class='line'><span class="k">elif</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="nb">bool</span><span class="p">):</span>  <span class="c"># Make sure booleans don&#39;t get treated as numbers</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">str</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'><span class="k">elif</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="p">(</span><span class="n">decimal</span><span class="o">.</span><span class="n">Decimal</span><span class="p">,</span> <span class="nb">float</span><span class="p">,</span> <span class="nb">int</span><span class="p">)):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">use_l10n</span> <span class="ow">is</span> <span class="bp">False</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">str</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">number_format</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">use_l10n</span><span class="o">=</span><span class="n">use_l10n</span><span class="p">)</span>
</span><span class='line'><span class="k">elif</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">date_format</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="s">&#39;DATETIME_FORMAT&#39;</span><span class="p">,</span> <span class="n">use_l10n</span><span class="o">=</span><span class="n">use_l10n</span><span class="p">)</span>
</span><span class='line'><span class="k">elif</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">datetime</span><span class="o">.</span><span class="n">date</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">date_format</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">use_l10n</span><span class="o">=</span><span class="n">use_l10n</span><span class="p">)</span>
</span><span class='line'><span class="k">elif</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">datetime</span><span class="o">.</span><span class="n">time</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">time_format</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="s">&#39;TIME_FORMAT&#39;</span><span class="p">,</span> <span class="n">use_l10n</span><span class="o">=</span><span class="n">use_l10n</span><span class="p">)</span>
</span><span class='line'><span class="k">return</span> <span class="n">value</span>
</span></code></pre></td></tr></table></div></figure>


<p>Can be replaced by this code snippet instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">match</span> <span class="n">value</span><span class="p">:</span>
</span><span class='line'>    <span class="n">case</span> <span class="nb">str</span><span class="p">():</span>  <span class="c"># Handle strings first for performance reasons.</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">value</span>
</span><span class='line'>    <span class="n">case</span> <span class="nb">bool</span><span class="p">():</span>  <span class="c"># Make sure booleans don&#39;t get treated as numbers</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">str</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="n">case</span> <span class="n">decimal</span><span class="o">.</span><span class="n">Decimal</span><span class="p">()</span> <span class="o">|</span> <span class="nb">float</span><span class="p">()</span> <span class="o">|</span> <span class="nb">int</span><span class="p">():</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">use_l10n</span> <span class="ow">is</span> <span class="bp">False</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">str</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">number_format</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">use_l10n</span><span class="o">=</span><span class="n">use_l10n</span><span class="p">)</span>
</span><span class='line'>    <span class="n">case</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">():</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">date_format</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="s">&#39;DATETIME_FORMAT&#39;</span><span class="p">,</span> <span class="n">use_l10n</span><span class="o">=</span><span class="n">use_l10n</span><span class="p">)</span>
</span><span class='line'>    <span class="n">case</span> <span class="n">datetime</span><span class="o">.</span><span class="n">date</span><span class="p">():</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">date_format</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">use_l10n</span><span class="o">=</span><span class="n">use_l10n</span><span class="p">)</span>
</span><span class='line'>    <span class="n">case</span> <span class="n">datetime</span><span class="o">.</span><span class="n">time</span><span class="p">():</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">time_format</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="s">&#39;TIME_FORMAT&#39;</span><span class="p">,</span> <span class="n">use_l10n</span><span class="o">=</span><span class="n">use_l10n</span><span class="p">)</span>
</span><span class='line'>    <span class="n">case</span> <span class="n">_</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">value</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note how much shorter each condition is.
That <code>case</code> syntax definitely takes some getting used to, but I do find it a bit easier to read in long <code>isinstance</code> chains like this.</p>

<h2>Bisecting with a key</h2>

<p>Python&rsquo;s <code>bisect</code> module is really handy for quickly finding an item within a sorted list.</p>

<p>For me, the <code>bisect</code> module is mostly a reminder of how infrequently I need to care about the <a href="https://en.wikipedia.org/wiki/Binary_search_algorithm">binary search</a> algorithms I learned in Computer Science classes.
But for those times you do need to find an item in a sorted list, <code>bisect</code> is great.</p>

<p>As of Python 3.10, all the binary search helpers in the <code>bisect</code> module now accept a <code>key</code> argument.
So you can now quickly search within a case insensitively-sorted list of strings for the string you&rsquo;re looking for.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">fruits</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">([</span><span class="s">&#39;Watermelon&#39;</span><span class="p">,</span><span class="s">&#39;loquat&#39;</span><span class="p">,</span> <span class="s">&#39;Apple&#39;</span><span class="p">,</span> <span class="s">&#39;jujube&#39;</span><span class="p">],</span> <span class="n">key</span><span class="o">=</span><span class="nb">str</span><span class="o">.</span><span class="n">lower</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">fruits</span>
</span><span class='line'><span class="go">[&#39;Apple&#39;, &#39;jujube&#39;, &#39;loquat&#39;, &#39;Watermelon&#39;]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">bisect</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">bisect</span><span class="o">.</span><span class="n">insort</span><span class="p">(</span><span class="n">fruits</span><span class="p">,</span> <span class="s">&#39;Lemon&#39;</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="nb">str</span><span class="o">.</span><span class="n">lower</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">fruits</span>
</span><span class='line'><span class="go">[&#39;Apple&#39;, &#39;jujube&#39;, &#39;Lemon&#39;, &#39;loquat&#39;, &#39;Watermelon&#39;]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">i</span> <span class="o">=</span> <span class="n">bisect</span><span class="o">.</span><span class="n">bisect</span><span class="p">(</span><span class="n">fruits</span><span class="p">,</span> <span class="s">&#39;lime&#39;</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="nb">str</span><span class="o">.</span><span class="n">lower</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">fruits</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;lime&#39;</span>
</span><span class='line'><span class="go">False</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">fruits</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'><span class="go">&#39;loquat&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Doing a search that involved a <code>key</code> function was <a href="https://stackoverflow.com/a/55007379/98187">surprisingly tricky</a> before Python 3.10.</p>

<h2>Slots for data classes</h2>

<p>Have a data class (especially a frozen one) and want to make it more memory-efficient?
You can add a <code>__slots__</code> attribute but you&rsquo;ll need to type all the field names out yourself.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@dataclass</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Point</span><span class="p">:</span>
</span><span class='line'>    <span class="n">__slots__</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;x&#39;</span><span class="p">,</span> <span class="s">&#39;y&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">x</span><span class="p">:</span> <span class="nb">float</span>
</span><span class='line'>    <span class="n">y</span><span class="p">:</span> <span class="nb">float</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Python 3.10 you can now use <code>slots=True</code> instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@dataclass</span><span class="p">(</span><span class="n">slots</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Point</span><span class="p">:</span>
</span><span class='line'>    <span class="n">x</span><span class="p">:</span> <span class="nb">float</span>
</span><span class='line'>    <span class="n">y</span><span class="p">:</span> <span class="nb">float</span>
</span></code></pre></td></tr></table></div></figure>


<p>This feature was actually included in the original dataclass implementation but <a href="https://github.com/ericvsmith/dataclasses/issues/28">removed</a> before Python 3.7&rsquo;s release (Guido suggested including it in a later Python version if users expressed interest and we did).</p>

<p>Creating a dataclass with <code>__slots__</code> added manually <a href="https://stackoverflow.com/questions/50180735/how-can-dataclasses-be-made-to-work-better-with-slots">won&rsquo;t allow for default field values</a>, which is why <code>slots=True</code> is so handy.
There&rsquo;s a very smaller quirk with <code>slots=True</code> though: <code>super</code> calls break when <code>slots=True</code> is used because this causes a <em>new</em> class object to be created which breaks the <a href="https://stackoverflow.com/questions/19608134/why-is-python-3-xs-super-magic/19609168#19609168">magic of super</a>.
But unless you&rsquo;re using calling <code>super().__setattr__</code> in the <code>__post_init__</code> method of a frozen dataclass <a href="https://stackoverflow.com/a/54119384/98187">instead of</a> calling <code>object.__setattr__</code>, this quirk likely won&rsquo;t affect you.</p>

<h3>Type annotation improvements</h3>

<p>If you use type annotations, <a href="https://docs.python.org/3.10/whatsnew/3.10.html#pep-604-new-type-union-operator">type unions</a> are even easier now using the <code>|</code> operator (in addition to <code>typing.Union</code>).
Other big additions in type annotation land include <a href="https://docs.python.org/3.10/whatsnew/3.10.html#pep-612-parameter-specification-variables">parameter specification variables</a>, <a href="https://docs.python.org/3.10/whatsnew/3.10.html#pep-613-typealias">type aliases</a>, and <a href="https://docs.python.org/3.10/whatsnew/3.10.html#pep-647-user-defined-type-guards">user-defined type guards</a>.
I still don&rsquo;t use type annotations often, but these features are a pretty big deal for Python devs who do.</p>

<p>Also if you&rsquo;re introspecting annotations, calling the <code>inspect.get_annotations</code> function is <a href="https://docs.python.org/3/howto/annotations.html#accessing-the-annotations-dict-of-an-object-in-python-3-10-and-newer">recommended</a> over accessing <code>__annotations__</code> directly or calling the <code>typing.get_type_hints</code> function.</p>

<h3>Checking for default file encoding issues</h3>

<p>You can also now ask Python to emit warnings when you fail to specify an explicit file encoding (this is <em>very</em> relevant when writing cross operating system compatible code).</p>

<p>Just run Python with <code>-X warn_default_encoding</code> and you&rsquo;ll see a loud error message if you&rsquo;re not specifying encodings everywhere you open files up:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>python3.10 -X warn_default_encoding count_lines.py declaration-of-independence.txt
</span><span class='line'>/home/trey/count_lines.py:3: EncodingWarning: <span class="s1">&#39;encoding&#39;</span> argument not specified
</span><span class='line'>  with open<span class="o">(</span>sys.argv<span class="o">[</span>1<span class="o">])</span> as f:
</span><span class='line'>67
</span></code></pre></td></tr></table></div></figure>


<h2>Plus lots more</h2>

<p>The changes above are the main ones I&rsquo;ve found useful when updating Python Morsels exercises over the last week.
There are many more changes in Python 3.10 though.</p>

<p>Here are a few more things I looked into, and plan to play with later:</p>

<ul>
<li><a href="https://docs.python.org/3.10/whatsnew/3.10.html#keyword-only-fields">keyword-only</a> dataclass fields</li>
<li>The <code>fileinput.input</code> (handy for handling standard input <em>or</em> a file) function <a href="https://docs.python.org/3.10/whatsnew/3.10.html#fileinput">now accepts</a> an <code>encoding</code> argument</li>
<li><code>importlib</code> <a href="https://docs.python.org/3.10/whatsnew/3.10.html#deprecated">deprecations</a>: some of my dynamic module importing code was using features that are now deprecated in Python 3.10 (you&rsquo;ll notice obvious deprecation warnings if your code needs updating too)</li>
<li><a href="https://docs.python.org/3.10/library/stdtypes.html#dict-views">Dictionary views</a> have a <code>mapping</code> attribute now: if you&rsquo;re making your own dictionary-like objects, you should probably add a <code>mapping</code> attribute to your <code>keys</code>/<code>values</code>/<code>items</code> views as well (this will definitely crop up in Python Morsels exercises in the future)</li>
<li>When using multiple context managers in a single <code>with</code> block, parentheses can now be used to wrap them onto the next line (this was actually added in Python 3.9 <a href="https://bugs.python.org/issue12782">but unofficially</a>)</li>
<li>The names of <a href="https://docs.python.org/3.10/library/sys.html#sys.stdlib_module_names">standard library modules</a> and built-in modules are now included in <code>sys.stdlib_module_names</code> and <code>sys.builtin_module_names</code>: I&rsquo;ve occasionally needed to distinguish between third party and standard library modules dynamically and this makes that a lot easier</li>
<li><code>sys.orig_argv</code> includes the <a href="https://docs.python.org/3.10/library/sys.html#sys.orig_argv">full list of command-line arguments</a> (including the Python interpreter and all arguments passed to it) which could be useful when inspecting how your Python process was launched or when re-launching your Python process with the same arguments</li>
</ul>


<h2>Summary</h2>

<p>Structural pattern matching is great and the various other syntax, standard library, and builtins improvements are lovely too.
But the biggest improvement by far are the new error messages.</p>

<p>And you know what&rsquo;s even better news than the new errors in Python 3.10?
<a href="https://docs.python.org/3.11/whatsnew/3.11.html#enhanced-error-locations-in-tracebacks">Python 3.11 will include even better error messages</a>!</p>

<h2>Get practice with Python 3.10</h2>

<p>Want to try out Python 3.10?
Try out the <a href="https://www.pythonmorsels.com/exercises/paths/#path-14">Python 3.10 exercise path</a> on Python Morsels.
It&rsquo;s free for <a href="https://www.pythonmorsels.com/">Python Morsels</a> subscribers and $17 for non-subscribers.</p>

<p>Python Morsels currently includes <strong>170 Python exercises</strong> and <strong>80 Python screencasts</strong> with a new short screencast/article hybrid added each week.
This service is all about hands-on skill building (we learn and grow through doing, not just reading/watching).</p>

<p>I&rsquo;d love for you to <a href="https://www.pythonmorsels.com/exercises/paths/#path-14">come learn Python (3.10) with me</a>! 💖</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Cyber Monday Sales (2020)]]></title>
    <link href="https://treyhunner.com/2020/11/python-cyber-monday-sales/"/>
    <updated>2020-11-27T13:20:00-08:00</updated>
    <id>https://treyhunner.com/2020/11/python-cyber-monday-sales</id>
    <content type="html"><![CDATA[<p>This post is a compilation of different Cyber Monday deals I&rsquo;ve found related to Python and Python learning.</p>

<h3>Python Morsels weekly screencasts</h3>

<p>Let&rsquo;s get the self-promotion out of the way first.</p>

<p>I <a href="https://treyhunner.com/2020/11/short-python-screencasts-for-$50-slash-year/">announced a couple days ago</a> that you can now get <strong>one year of Python screencasts</strong> as well as mini-blog posts for <strong>$50/year</strong> (with at least one new screencast each week).
This also includes one Python exercise each month.
I haven&rsquo;t set a concrete end date to this &ldquo;sale&rdquo; (it&rsquo;s actually more of a newly announced service that will be increasing in price in early 2021).</p>

<p>You can <a href="https://treyhunner.com/2020/11/short-python-screencasts-for-$50-slash-year/">find my article on the Python Morsels screencasts sale here</a>.</p>

<h3>Talk Python course bundle</h3>

<p>You can get every Talk Python course that&rsquo;s been made so far <a href="https://training.talkpython.fm/black-friday-2020">for just $250</a>.
There&rsquo;s 28 courses currently and the bundle also includes courses published through October 2021.</p>

<h3>PyBites sales</h3>

<p>PyBites is offering PyBites Premium+ Access for 2 months for $24 and Introductory Bites Course for $15 (both effectively 70% off) during their <a href="https://pybit.es/blackfriday">Black Friday and Cyber Monday sale</a>.</p>

<h3>Reuven Lerner&rsquo;s Python courses and exercises</h3>

<p>Reuven Lerner is offering <a href="https://store.lerner.co.il/?coupon=BF2020">40% off all his products</a> (Python courses, Weekly Python Exercises, and product bundles) through Monday.</p>

<h3>Matt Harrison&rsquo;s Modern Python workshop</h3>

<p>Matt Harrison&rsquo;s <a href="https://mattharrison.podia.com/modern-python-a-hands-on-approach-to-idiomatic-python-projects">Modern Python workshop</a> is $500 (50%) off through Monday with coupon code EARLYBIRD and and <a href="https://mattharrison.podia.com/courses">his other courses</a> (including Python data science and pandas courses) are 40% off through Monday with code BLACKFRIDAY.</p>

<h3>Speed Up Your Django book</h3>

<p>Adam Johnson&rsquo;s <a href="https://adamj.eu/tech/2020/11/28/speed-up-your-django-tests-cyber-monday-deal/">Speed Up Your Django book</a> is 50% off through Monday.
Python Morsels is a Django-powered site and I could use this book, so I&rsquo;ll be buying a copy for myself as well.</p>

<h3>Mike Driscoll&rsquo;s Python books</h3>

<p>Mike Driscoll is <a href="https://www.blog.pythonlibrary.org/2020/11/25/black-friday-cyber-monday-comes-early-in-2020/">offering a sale on all his Python books</a> (each is $15 or less during the sale).</p>

<h3>Brian Okken&rsquo;s Pytest book (Pragmatic Bookshelf)</h3>

<p>Pragmatic Bookshelf is offering 40% off all books with the code turkeysale2020, including <a href="https://pragprog.com/titles/bopytest/python-testing-with-pytest/">Brian Okken&rsquo;s Pytest book</a> which is just under $15 with the coupon.</p>

<h3>No Starch Press Python books</h3>

<p>No Starch Press is also running <a href="https://nostarch.com/catalog/python">a 33% off sale</a> on their Python books (with books by Al Sweigart, Eric Matthes, and many others), though the sale ends before Monday.</p>

<h3>Real Python subscription</h3>

<p>Real Python is offering an annual subscription for <a href="https://realpython.com/account/join/?c=blackfriday2020">$200/year</a> and 20% of that goes to the Python Software Foundation.</p>

<h3>Pluralsight subscription</h3>

<p>We&rsquo;re now moving into &ldquo;I&rsquo;m really not actually sure what you&rsquo;re getting&rdquo; sales.
Pluralsight is running a Black Friday sale this year: <a href="https://www.pluralsight.com/offer/2020/bf-cm-40-off">$180/year for a subscription</a>.
I&rsquo;m not sure whether this is one year for $180 but the subscription renews at the regular price of $300/year or whether it&rsquo;s $180/year indefinitely (the fact that they don&rsquo;t specify is a bit concerning).</p>

<h3>100 Days of Code Python and other Udemy courses</h3>

<p>There&rsquo;s a <a href="https://www.udemy.com/course/100-days-of-code/?couponCode=DCF8D1FDCAA3CE660C34">100 Days of Code Python course</a> course on sale for just $13 on Udemy through mid next week.
I haven&rsquo;t heard anything about it but it looks like it includes <em>a lot</em>.</p>

<p>There are also various other Udemy Python courses on sale, like <a href="https://www.udemy.com/course/automate/">Automate The Boring Stuff</a>, though many of these sales end within the next 24 hours (through Black Friday only).</p>

<h3>Lots of courses, books, screencasts, exercises, live workshops on sale</h3>

<p>Don&rsquo;t go too wild on sales.</p>

<p>I know that I wouldn&rsquo;t want anyone subscribing to Python Morsels unless they think they&rsquo;ll actually commit at least an hour over the next year to watch screencasts.
I imagine many other Python educators feel similar about purchases that go to waste.</p>

<p>Look through the sales above and think about what you could use.
What works well with the way you learn and what would you actually make a habit to use after you&rsquo;ve purchased it?</p>

<p>If you have a question about the <a href="https://treyhunner.com/2020/11/short-python-screencasts-for-$50-slash-year/">Python Morsels screencasts/exercises</a>, email me.
If you have questions about other sales, email the folks running those sales (make sure to do it now in case they take a day or two to get back to you).</p>

<p>Also if you&rsquo;ve found other Python sales I&rsquo;ve missed above, please comment or <a href='m&amp;#97;&amp;#105;l&amp;#116;o&amp;#58;he&amp;#108;p&amp;#64;&amp;#112;%7&amp;#57;th%6Fnmo&amp;#114;s%6&amp;#53;ls&amp;#46;&amp;#99;&amp;#111;m'>email me</a> to let me know about them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Short weekly Python screencasts for $50/year]]></title>
    <link href="https://treyhunner.com/2020/11/short-python-screencasts-for-$50-slash-year/"/>
    <updated>2020-11-25T09:00:00-08:00</updated>
    <id>https://treyhunner.com/2020/11/short-python-screencasts-for-$50-slash-year</id>
    <content type="html"><![CDATA[<p>I&rsquo;m offering a service to help <strong>life-long Python learners</strong> manufacture ah-ha moments.</p>

<p>A few years ago at my local Python meetup I was discussing how function arguments work (they&rsquo;re <a href="https://jeffknupp.com/blog/2012/11/13/is-python-callbyvalue-or-callbyreference-neither/">call-by-assignment</a> a.k.a. <a href="https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing">call by object</a>).
A friend spoke up to clarify: &ldquo;but it doesn&rsquo;t work that way for numbers and strings, right?&rdquo;
I said &ldquo;I&rsquo;m pretty sure it works like this for everything&rdquo;.</p>

<p>After some quiet Googling, my friend declared &ldquo;I&rsquo;ve been using Python for over a decade and I never knew it worked this way&rdquo;.
They&rsquo;d suddenly realized <em>their mental model of the Python world</em> differed from Python&rsquo;s model of itself.
They&rsquo;d experienced an &ldquo;ah-ha moment&rdquo;.</p>

<p>I&rsquo;m going to publish <strong>at least one short Python screencast every week</strong> to help <em>manufacture</em> <strong>Python ah-ha moments</strong>.
These will be single-topic screencasts that <strong>won&rsquo;t waste your time</strong>.</p>

<p>So, if you&rsquo;re a life-long learner who uses Python and doesn&rsquo;t have a wealth of time for learning, read on.</p>

<h3>What is this?</h3>

<p>With this subscription you&rsquo;ll receive access to a growing archive of Python screencasts (<strong>at least one new screencast each week</strong>).
If you enjoy my <a href="https://treyhunner.com/blog/categories/python/">articles</a> or my <a href="https://treyhunner.com/talks">talks and tutorials</a>, you&rsquo;ll probably enjoy the format I use in my screencasts.</p>

<p><strong>Don&rsquo;t like video?</strong> That&rsquo;s okay!
Each screencast is captioned and includes <strong>a mini-blog post</strong> which is nearly <strong>a text-based equivalent</strong> to the video.</p>

<h3>What are the screencasts like?</h3>

<p>Each screencast will be <strong>concise</strong> and short, under 6 minutes.
Examples include <a href="https://www.pythonmorsels.com/topics/variables-are-pointers/">variables are pointers</a> (2 mins) and <a href="https://www.pythonmorsels.com/topics/2-types-change/">the 2 types of &ldquo;change&rdquo;</a> (3 mins), plus <a href="https://www.pythonmorsels.com/screencasts/">others here</a>.</p>

<p><a href="https://www.pythonmorsels.com/screencasts/"><img src="https://treyhunner.com/images/screencasts.png"></a></p>

<p><strong>What topics will the screencasts be on?</strong>
Functions, classes, scope, operator overloading, decorators, exception handling, and more.
Screencasts will focus on Python core, not third-party libraries (no Pandas, Numpy, or Django).
Topics will range from beginner to advanced.</p>

<p><strong>Will the screencasts be freely shareable?</strong>
Some screencasts will be limited to subscribers and some will be available to non-subscribers, with a yet-to-be-decided breakdown between the two.</p>

<h3>You&rsquo;ll also get get occasional Python exercises</h3>

<p>This weekly screencast subscription is part of <a href="https://www.pythonmorsels.com/">Python Morsels</a>, an exercise subscription service I run.
In addition to weekly screencasts, you&rsquo;ll also get <strong>one Python exercise each month</strong>.</p>

<p>If you&rsquo;ve taken <a href="https://treyhunner.com/talks/#tutorials">my PyCon tutorials</a> or attended <a href="https://truthful.technology/">my trainings</a>, you know exercises are the best part of my curriculum.
I spend a lot of time making new exercises because we learn by attempting to retrieve information from our heads (through practice), not by putting information <em>into</em> our heads.</p>

<p>Python Morsels exercises are both interesting and <strong>complex but not complicated</strong>.
You don&rsquo;t need to work through the monthly exercises, but I do recommend it.</p>

<h3>This subscription is $50/year for a limited time</h3>

<p>I&rsquo;m offering this service for a comparatively low price of $50/year because I don&rsquo;t have a large archive of screencasts yet.
I have plans to increase the price in 2021, but as an early user <strong>your price will always be $50/year</strong>.</p>

<p>If you&rsquo;re not sure whether this is for you, <a href="https://www.pythonmorsels.com/accounts/signup/?plan=9">sign up to try it out for free</a>.</p>

<h3>Why pay for this when there&rsquo;s a lot of great free Python videos out there?</h3>

<p>Why am I charging money for this?</p>

<p>There&rsquo;s really one reason: <strong>you&rsquo;re trading money for time</strong>.
This is a tradeoff I&rsquo;ve grown an appreciation for (one which would baffle a younger version of myself).</p>

<p>This time-money tradeoff comes in a few forms:</p>

<ol>
<li>You will never see any ads on Python Morsels: you&rsquo;re not the product, the screencasts are</li>
<li>No filler content or rambling (no ad revenue means no need for long videos)</li>
<li>I have unique expertise and perspective: teaching Python is my business and I&rsquo;m good at it</li>
</ol>


<p>Watch some of <a href="https://www.pythonmorsels.com/screencasts/">the current screencasts</a> before signing up.
If my teaching style isn&rsquo;t for you, that&rsquo;s okay!
But if my teaching style <em>is</em> for you, I think you&rsquo;ll find <strong>the next year&rsquo;s worth of screencasts</strong> will be worthwhile! 😁</p>

<h3>Student discounts? Team subscriptions? Other questions?</h3>

<p>My standard <a href="https://www.pythonmorsels.com/discounts/">discount policy</a> is income-tiered: if you make less than $60,000 USD annually, you&rsquo;re eligible.
I also offer situation-specific discounts, so please <strong>ask for a discount if you need one</strong>.</p>

<p>If you&rsquo;re paying through your employer, note that there are <strong>team subscriptions</strong> too.
Just <a href="https://form.jotform.com/201278113533043">fill out this form</a> to get started setting up a subscription for your team.</p>

<h3>Ready to try it out?</h3>

<p>Are you ready to subscribe to a growing collection of short and concise Python screencasts?
<a href="https://www.pythonmorsels.com/accounts/signup/?plan=9">Let&rsquo;s get learning</a>!</p>

<p><a href="https://www.pythonmorsels.com/accounts/signup/?plan=9" class="subscribe-btn form-big bright">Sign up for weekly Python screencasts now</a></p>

<p>Do you have another question that I haven&rsquo;t answered here?
Check out the <a href="https://pythonmorsels.helpscoutdocs.com/article/23-lite-plan">Lite plan FAQ</a> or <a href="m&amp;#97;&amp;#105;l&amp;#116;o&amp;#58;he&amp;#108;p&amp;#64;&amp;#112;%7&amp;#57;th%6Fnmo&amp;#114;s%6&amp;#53;ls&amp;#46;&amp;#99;&amp;#111;m">email your question to he&#108;p&#64;pyt&#104;o&#110;morsel&#115;&#46;&#99;o&#109;</a>.</p>

<p>Happy learning!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Passing a function as an argument to another function in Python]]></title>
    <link href="https://treyhunner.com/2020/01/passing-functions-as-arguments/"/>
    <updated>2020-01-14T08:00:00-08:00</updated>
    <id>https://treyhunner.com/2020/01/passing-functions-as-arguments</id>
    <content type="html"><![CDATA[<p>One of the more hair-raising facts we learn in my introductory Python trainings is that <strong>you can pass functions into other functions</strong>.
You can pass functions around because in Python, <strong>functions are objects</strong>.</p>

<p>You likely don&rsquo;t need to know about this in your first week of using Python, but as you dive deeper into Python you&rsquo;ll find that it can be quite convenient to understand how to pass a function into another function.</p>

<p>This is part 1 of what I expect to be a series on the various properties of &ldquo;function objects&rdquo;.
This article focuses on what a new Python programmer should know and appreciate about <strong>the object-nature of Python&rsquo;s functions</strong>.</p>

<ul data-toc=".entry-content"></ul>


<h2>Functions can be referenced</h2>

<p>If you try to use a function without putting parentheses after it Python won&rsquo;t complain but it also won&rsquo;t do anything useful:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">greet</span><span class="p">():</span>
</span><span class='line'><span class="gp">... </span>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Hello world!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">greet</span>
</span><span class='line'><span class="go">&lt;function greet at 0x7ff246c6d9d0&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This applies to methods as well (<a href="https://docs.python.org/3/glossary.html#term-method">methods</a> are functions which live on objects):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span><span class="o">.</span><span class="n">pop</span>
</span><span class='line'><span class="go">&lt;built-in method pop of list object at 0x7ff246c76a80&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Python is allowing us to <em>refer</em> to these <em>function objects</em>, the same way we might refer to a string, a number, or a <code>range</code> object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="s">&quot;hello&quot;</span>
</span><span class='line'><span class="go">&#39;hello&#39;</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="mf">2.5</span>
</span><span class='line'><span class="go">2.5</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="go">range(0, 10)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since we can refer to functions like any other object, we can point a variable to a function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">29</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">gimme</span> <span class="o">=</span> <span class="n">numbers</span><span class="o">.</span><span class="n">pop</span>
</span></code></pre></td></tr></table></div></figure>


<p>That <code>gimme</code> variable now points to the <code>pop</code> method on our <code>numbers</code> list.
So if we call <code>gimme</code>, it&rsquo;ll do the same thing that calling <code>numbers.pop</code> would have done:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">gimme</span><span class="p">()</span>
</span><span class='line'><span class="go">29</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span>
</span><span class='line'><span class="go">[2, 1, 3, 4, 7, 11, 18]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">gimme</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="go">2</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span>
</span><span class='line'><span class="go">[1, 3, 4, 7, 11, 18]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">gimme</span><span class="p">()</span>
</span><span class='line'><span class="go">18</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that we <strong>didn&rsquo;t make a new function</strong>.
We&rsquo;ve just pointed the <code>gimme</code> variable name to the <code>numbers.pop</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">gimme</span>
</span><span class='line'><span class="go">&lt;built-in method pop of list object at 0x7ff246c76bc0&gt;</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span><span class="o">.</span><span class="n">pop</span>
</span><span class='line'><span class="go">&lt;built-in method pop of list object at 0x7ff246c76bc0&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can even store functions inside data structures and then reference them later:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">square</span><span class="p">(</span><span class="n">n</span><span class="p">):</span> <span class="k">return</span> <span class="n">n</span><span class="o">**</span><span class="mi">2</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">cube</span><span class="p">(</span><span class="n">n</span><span class="p">):</span> <span class="k">return</span> <span class="n">n</span><span class="o">**</span><span class="mi">3</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">operations</span> <span class="o">=</span> <span class="p">[</span><span class="n">square</span><span class="p">,</span> <span class="n">cube</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">29</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">numbers</span><span class="p">):</span>
</span><span class='line'><span class="gp">... </span>    <span class="n">action</span> <span class="o">=</span> <span class="n">operations</span><span class="p">[</span><span class="n">i</span> <span class="o">%</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="gp">... </span>    <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s">&quot;{action.__name__}({n}):&quot;</span><span class="p">,</span> <span class="n">action</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="go">square(2): 4</span>
</span><span class='line'><span class="go">cube(1): 1</span>
</span><span class='line'><span class="go">square(3): 9</span>
</span><span class='line'><span class="go">cube(4): 64</span>
</span><span class='line'><span class="go">square(7): 49</span>
</span><span class='line'><span class="go">cube(11): 1331</span>
</span><span class='line'><span class="go">square(18): 324</span>
</span><span class='line'><span class="go">cube(29): 24389</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s not very common to take a function and give it another name or to store it inside a data structure, but Python allows us to do these things because <strong>functions can be passed around, just like any other object</strong>.</p>

<h2>Functions can be passed into other functions</h2>

<p>Functions, like any other object, can be passed as an argument to another function.</p>

<p>For example we could define a function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;world&quot;</span><span class="p">):</span>
</span><span class='line'><span class="gp">... </span>    <span class="sd">&quot;&quot;&quot;Greet a person (or the whole world by default).&quot;&quot;&quot;</span>
</span><span class='line'><span class="gp">... </span>    <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s">&quot;Hello {name}!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">greet</span><span class="p">(</span><span class="s">&quot;Trey&quot;</span><span class="p">)</span>
</span><span class='line'><span class="go">Hello Trey!</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then pass it into the built-in <code>help</code> function to see what it does:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">help</span><span class="p">(</span><span class="n">greet</span><span class="p">)</span>
</span><span class='line'><span class="go">Help on function greet in module __main__:</span>
</span><span class='line'>
</span><span class='line'><span class="go">greet(name=&#39;world&#39;)</span>
</span><span class='line'><span class="go">    Greet a person (or the whole world by default).</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we can pass the function into itself (yes this is weird), which converts it to a string here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">greet</span><span class="p">(</span><span class="n">greet</span><span class="p">)</span>
</span><span class='line'><span class="go">Hello &lt;function greet at 0x7f93416be8b0&gt;!</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are actually quite a few functions built-in to Python that are specifically meant to accept other functions as arguments.</p>

<p>The built-in <code>filter</code> function accepts two things as an argument: a <code>function</code> and an <code>iterable</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">help</span><span class="p">(</span><span class="nb">filter</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="go"> |  filter(function or None, iterable) --&gt; filter object</span>
</span><span class='line'><span class="go"> |</span>
</span><span class='line'><span class="go"> |  Return an iterator yielding those items of iterable for which function(item)</span>
</span><span class='line'><span class="go"> |  is true. If function is None, return the items that are true.</span>
</span></code></pre></td></tr></table></div></figure>


<p>The given iterable (list, tuple, string, etc.) is looped over and the given function is called on each item in that iterable: whenever the function returns <code>True</code> (or another truthy value) the item is included in the <code>filter</code> output.</p>

<p>So if we pass <code>filter</code> an <code>is_odd</code> function (which returns <code>True</code> when given an odd number) and a list of numbers, we&rsquo;ll get back all of the numbers we gave it which are odd.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">29</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">is_odd</span><span class="p">(</span><span class="n">n</span><span class="p">):</span> <span class="k">return</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">filter</span><span class="p">(</span><span class="n">is_odd</span><span class="p">,</span> <span class="n">numbers</span><span class="p">)</span>
</span><span class='line'><span class="go">&lt;filter object at 0x7ff246c8dc40&gt;</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="nb">filter</span><span class="p">(</span><span class="n">is_odd</span><span class="p">,</span> <span class="n">numbers</span><span class="p">))</span>
</span><span class='line'><span class="go">[1, 3, 7, 11, 29]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The object returned from <code>filter</code> is <a href="https://treyhunner.com/2018/06/how-to-make-an-iterator-in-python/">a lazy iterator</a> so we needed to convert it to a <code>list</code> to actually see its output.</p>

<p>Since functions can be passed into functions, that also means that functions can accept another function as an argument.
The <code>filter</code> function assumes its first argument is a function.
You can think of the <code>filter</code> function as pretty much the same as this function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">filter</span><span class="p">(</span><span class="n">predicate</span><span class="p">,</span> <span class="n">iterable</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>        <span class="n">item</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">iterable</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">predicate</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This function expects the <code>predicate</code> argument to be a function (technically it could be any <a href="https://treyhunner.com/2019/04/is-it-a-class-or-a-function-its-a-callable/">callable</a>).
When we call that function (with <code>predicate(item)</code>), we pass a single argument to it and then check the truthiness of its return value.</p>

<h2>Lambda functions are an example of this</h2>

<p>A lambda expression is a special syntax in Python for creating an <a href="https://en.wikipedia.org/wiki/Anonymous_function">anonymous function</a>.
When you evaluate a <strong>lambda expression</strong> the object you get back is called a <strong>lambda function</strong>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">is_odd</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">n</span><span class="p">:</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">is_odd</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="go">True</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">is_odd</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="go">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lambda functions are pretty much just like regular Python functions, with a few caveats.</p>

<p>Unlike other functions, lambda functions don&rsquo;t have a name (their name shows up as <code>&lt;lambda&gt;</code>).
They also can&rsquo;t have docstrings and they can only contain a single Python expression.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">add</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="go">5</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">add</span>
</span><span class='line'><span class="go">&lt;function &lt;lambda&gt; at 0x7ff244852f70&gt;</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">add</span><span class="o">.</span><span class="n">__doc__</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can think of a lambda expression as a shortcut for making a function which will evaluate a single Python expression and return the result of that expression.</p>

<p>So defining a lambda expression doesn&rsquo;t actually evaluate that expression: it returns a function that can evaluate that expression later.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">greet</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;world&quot;</span><span class="p">:</span> <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s">&quot;Hello {name}&quot;</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">greet</span><span class="p">(</span><span class="s">&quot;Trey&quot;</span><span class="p">)</span>
</span><span class='line'><span class="go">Hello Trey</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">greet</span><span class="p">()</span>
</span><span class='line'><span class="go">Hello world</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;d like to note that all three of the above examples of <code>lambda</code> are poor examples.
If you want a variable name to point to a function object that you can use later, you should use <code>def</code> to define a function: that&rsquo;s the <em>usual</em> way to define a function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">is_odd</span><span class="p">(</span><span class="n">n</span><span class="p">):</span> <span class="k">return</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span> <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;world&quot;</span><span class="p">):</span> <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s">&quot;Hello {name}&quot;</span><span class="p">)</span>
</span><span class='line'><span class="gp">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lambda expressions are for when we&rsquo;d like to define a function and <strong>pass it into another function immediately</strong>.</p>

<p>For example here we&rsquo;re using <code>filter</code> to get even numbers, but we&rsquo;re using a lambda expression so we don&rsquo;t have to define an <code>is_even</code> function before we use it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span>
</span><span class='line'><span class="go">[2, 1, 3, 4, 7, 11, 18, 29]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">n</span><span class="p">:</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">,</span> <span class="n">numbers</span><span class="p">))</span>
</span><span class='line'><span class="go">[2, 4, 18]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is <em>the most appropriate</em> use of lambda expressions: passing a function into another function while defining that passed function all on one line of code.</p>

<p>As I&rsquo;ve written about in <a href="https://treyhunner.com/2018/09/stop-writing-lambda-expressions/">Overusing lambda expressions</a>, I&rsquo;m not a fan of Python&rsquo;s lambda expression syntax.
Whether or not you like this syntax, you should know that this syntax is just a shortcut for creating a function.</p>

<p>Whenever you see <code>lambda</code> expressions, keep in mind that:</p>

<ol>
<li>A lambda expression is a special syntax for creating a function and passing it to another function all on one line of code</li>
<li>Lambda functions are just like all other function objects: neither is more special than the other and both can be passed around</li>
</ol>


<p>All functions in Python can be passed as an argument to another function (that just happens to be the <em>sole</em> purpose of lambda functions).</p>

<h2>A common example: key functions</h2>

<p>Besides the built-in <code>filter</code> function, where will you ever see a function passed into another function?
Probably the most common place you&rsquo;ll see this in Python itself is with a <strong>key function</strong>.</p>

<p>It&rsquo;s a common convention for functions which accept an iterable-to-be-sorted/ordered to also accept a <a href="https://treyhunner.com/2018/04/keyword-arguments-in-python/">named argument</a> called <code>key</code>.
This <code>key</code> argument should be a function <a href="https://treyhunner.com/2019/04/is-it-a-class-or-a-function-its-a-callable/">or another callable</a>.</p>

<p>The <a href="https://treyhunner.com/2019/05/python-builtins-worth-learning/#sorted">sorted</a>, <a href="https://treyhunner.com/2019/05/python-builtins-worth-learning/#min_and_max">min</a>, and <a href="https://treyhunner.com/2019/05/python-builtins-worth-learning/#min_and_max">max</a> functions all follow this convention of accepting a <code>key</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;kumquat&#39;</span><span class="p">,</span> <span class="s">&#39;Cherimoya&#39;</span><span class="p">,</span> <span class="s">&#39;Loquat&#39;</span><span class="p">,</span> <span class="s">&#39;longan&#39;</span><span class="p">,</span> <span class="s">&#39;jujube&#39;</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">normalize_case</span><span class="p">(</span><span class="n">s</span><span class="p">):</span> <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="n">casefold</span><span class="p">()</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">sorted</span><span class="p">(</span><span class="n">fruits</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">normalize_case</span><span class="p">)</span>
</span><span class='line'><span class="go">[&#39;Cherimoya&#39;, &#39;jujube&#39;, &#39;kumquat&#39;, &#39;longan&#39;, &#39;Loquat&#39;]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">min</span><span class="p">(</span><span class="n">fruits</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">normalize_case</span><span class="p">)</span>
</span><span class='line'><span class="go">&#39;Cherimoya&#39;</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">max</span><span class="p">(</span><span class="n">fruits</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">normalize_case</span><span class="p">)</span>
</span><span class='line'><span class="go">&#39;Loquat&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That <a href="https://docs.python.org/3/glossary.html#term-key-function">key function</a> is called for each value in the given iterable and the return value is used to order/sort each of the iterable items.
You can think of this key function as computing <strong>a comparison key</strong> for each item in the iterable.</p>

<p>In the above example our comparison key returns a lowercased string, so each string is compared by its lowercased version (which results in a case-insensitive ordering).</p>

<p>We used a <code>normalize_case</code> function to do this, but the same thing could be done using <code>str.casefold</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;kumquat&#39;</span><span class="p">,</span> <span class="s">&#39;Cherimoya&#39;</span><span class="p">,</span> <span class="s">&#39;Loquat&#39;</span><span class="p">,</span> <span class="s">&#39;longan&#39;</span><span class="p">,</span> <span class="s">&#39;jujube&#39;</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">sorted</span><span class="p">(</span><span class="n">fruits</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="nb">str</span><span class="o">.</span><span class="n">casefold</span><span class="p">)</span>
</span><span class='line'><span class="go">[&#39;Cherimoya&#39;, &#39;jujube&#39;, &#39;kumquat&#39;, &#39;longan&#39;, &#39;Loquat&#39;]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note</strong>: That <code>str.casefold</code> trick is a bit odd if you aren&rsquo;t familiar with how classes work.
Classes store the <em>unbound methods</em> that will accept an instance of that class when called.
We normally type <code>my_string.casefold()</code> but <code>str.casefold(my_string)</code> is what Python translates that to.
That&rsquo;s a story for another time.</p>

<p>Here we&rsquo;re finding the string with the most letters in it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">max</span><span class="p">(</span><span class="n">fruits</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="nb">len</span><span class="p">)</span>
</span><span class='line'><span class="go">&#39;Cherimoya&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If there are multiple maximums or minimums, the earliest one <em>wins</em> (that&rsquo;s how <code>min</code>/<code>max</code> work):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;kumquat&#39;</span><span class="p">,</span> <span class="s">&#39;Cherimoya&#39;</span><span class="p">,</span> <span class="s">&#39;Loquat&#39;</span><span class="p">,</span> <span class="s">&#39;longan&#39;</span><span class="p">,</span> <span class="s">&#39;jujube&#39;</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">min</span><span class="p">(</span><span class="n">fruits</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="nb">len</span><span class="p">)</span>
</span><span class='line'><span class="go">&#39;Loquat&#39;</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">sorted</span><span class="p">(</span><span class="n">fruits</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="nb">len</span><span class="p">)</span>
</span><span class='line'><span class="go">[&#39;Loquat&#39;, &#39;longan&#39;, &#39;jujube&#39;, &#39;kumquat&#39;, &#39;Cherimoya&#39;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s a function which will return a 2-item tuple containing the length of a given string and the case-normalized version of that string:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">length_and_alphabetical</span><span class="p">(</span><span class="n">string</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Return sort key: length first, then case-normalized string.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">string</span><span class="p">),</span> <span class="n">string</span><span class="o">.</span><span class="n">casefold</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>We could pass this <code>length_and_alphabetical</code> function as the <code>key</code> argument to <code>sorted</code> to sort our strings by their length first and then by their case-normalized representation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;kumquat&#39;</span><span class="p">,</span> <span class="s">&#39;Cherimoya&#39;</span><span class="p">,</span> <span class="s">&#39;Loquat&#39;</span><span class="p">,</span> <span class="s">&#39;longan&#39;</span><span class="p">,</span> <span class="s">&#39;jujube&#39;</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">fruits_by_length</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">fruits</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">length_and_alphabetical</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">fruits_by_length</span>
</span><span class='line'><span class="go">[&#39;jujube&#39;, &#39;longan&#39;, &#39;Loquat&#39;, &#39;kumquat&#39;, &#39;Cherimoya&#39;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This relies on the fact that <a href="https://treyhunner.com/2019/03/python-deep-comparisons-and-code-readability/">Python&rsquo;s ordering operators do deep comparisons</a>.</p>

<h2>Other examples of passing a function as an argument</h2>

<p>The <code>key</code> argument accepted by <code>sorted</code>, <code>min</code>, and <code>max</code> is just one common example of passing functions into functions.</p>

<p>Two more function-accepting Python built-ins are <code>map</code> and <code>filter</code>.</p>

<p>We&rsquo;ve already seen that <code>filter</code> will <em>filter</em> our list based on a given function&rsquo;s return value.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span>
</span><span class='line'><span class="go">[2, 1, 3, 4, 7, 11, 18, 29]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">is_odd</span><span class="p">(</span><span class="n">n</span><span class="p">):</span> <span class="k">return</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="nb">filter</span><span class="p">(</span><span class="n">is_odd</span><span class="p">,</span> <span class="n">numbers</span><span class="p">))</span>
</span><span class='line'><span class="go">[1, 3, 7, 11, 29]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>map</code> function will call the given function on each item in the given iterable and use the result of that function call as the new item:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="n">is_odd</span><span class="p">,</span> <span class="n">numbers</span><span class="p">))</span>
</span><span class='line'><span class="go">[False, True, True, False, True, True, False, True]</span>
</span></code></pre></td></tr></table></div></figure>


<p>For example here we&rsquo;re converting numbers to strings and squaring numbers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="n">numbers</span><span class="p">))</span>
</span><span class='line'><span class="go">[&#39;2&#39;, &#39;1&#39;, &#39;3&#39;, &#39;4&#39;, &#39;7&#39;, &#39;11&#39;, &#39;18&#39;, &#39;29&#39;]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">n</span><span class="p">:</span> <span class="n">n</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="n">numbers</span><span class="p">))</span>
</span><span class='line'><span class="go">[4, 1, 9, 16, 49, 121, 324, 841]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note</strong>: as I noted in my article on overusing lambda, I personally prefer to <a href="https://treyhunner.com/2018/09/stop-writing-lambda-expressions/#Overuse:_lambda_with_map_and_filter">use generator expressions instead of the <code>map</code> and <code>filter</code> functions</a>.</p>

<p>Similar to <code>map</code>, and <code>filter</code>, there&rsquo;s also <a href="https://docs.python.org/3/library/itertools.html#itertools.takewhile">takewhile</a> and <a href="https://docs.python.org/3/library/itertools.html#itertools.dropwhile">dropwhile</a> from the <code>itertools</code> module.
The first one is like <code>filter</code> except it stops once it finds a value for which the <em>predicate function</em> is false.
The second one does the opposite: it only includes values after the predicate function has become false.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">takewhile</span><span class="p">,</span> <span class="n">dropwhile</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">colors</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;red&#39;</span><span class="p">,</span> <span class="s">&#39;green&#39;</span><span class="p">,</span> <span class="s">&#39;orange&#39;</span><span class="p">,</span> <span class="s">&#39;purple&#39;</span><span class="p">,</span> <span class="s">&#39;pink&#39;</span><span class="p">,</span> <span class="s">&#39;blue&#39;</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">short_length</span><span class="p">(</span><span class="n">word</span><span class="p">):</span> <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">6</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">takewhile</span><span class="p">(</span><span class="n">short_length</span><span class="p">,</span> <span class="n">colors</span><span class="p">))</span>
</span><span class='line'><span class="go">[&#39;red&#39;, &#39;green&#39;]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">dropwhile</span><span class="p">(</span><span class="n">short_length</span><span class="p">,</span> <span class="n">colors</span><span class="p">))</span>
</span><span class='line'><span class="go">[&#39;orange&#39;, &#39;purple&#39;, &#39;pink&#39;, &#39;blue&#39;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>And there&rsquo;s <a href="https://docs.python.org/3/library/functools.html#functools.reduce">functools.reduce</a> and <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate">itertools.accumulate</a>, which both call a 2-argument function to accumulate values as they loop:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="nb">reduce</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">accumulate</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">product</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span> <span class="k">return</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">reduce</span><span class="p">(</span><span class="n">product</span><span class="p">,</span> <span class="n">numbers</span><span class="p">)</span>
</span><span class='line'><span class="go">168</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">accumulate</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">product</span><span class="p">))</span>
</span><span class='line'><span class="go">[2, 2, 6, 24, 168]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict">defaultdict</a> class in the <code>collections</code> module is another example.
The <code>defaultdict</code> class creates dictionary-like objects which will never raise a <code>KeyError</code> when a missing key is accessed, but will instead add a new value to the dictionary automatically.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">counts</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">counts</span><span class="p">[</span><span class="s">&#39;jujubes&#39;</span><span class="p">]</span>
</span><span class='line'><span class="go">0</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">counts</span>
</span><span class='line'><span class="go">defaultdict(&lt;class &#39;int&#39;&gt;, {&#39;jujubes&#39;: 0})</span>
</span></code></pre></td></tr></table></div></figure>


<p>This <code>defaultdict</code> class accepts a <a href="https://treyhunner.com/2019/04/is-it-a-class-or-a-function-its-a-callable/">callable</a> (function or class) that will be called to create a default value whenever a missing key is accessed.</p>

<p>The above code worked because <code>int</code> returns <code>0</code> when called with no arguments:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">int</span><span class="p">()</span>
</span><span class='line'><span class="go">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here the default value is <code>list</code>, which returns a new list when called with no arguments.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">things_by_color</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">things_by_color</span><span class="p">[</span><span class="s">&#39;purple&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;socks&#39;</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">things_by_color</span><span class="p">[</span><span class="s">&#39;purple&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;shoes&#39;</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">things_by_color</span>
</span><span class='line'><span class="go">defaultdict(&lt;class &#39;list&#39;&gt;, {&#39;purple&#39;: [&#39;socks&#39;, &#39;shoes&#39;]})</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <a href="https://docs.python.org/3/library/functools.html#functools.partial">partial</a> function in the <code>functools</code> module is another example.
<code>partial</code> accepts a function and any number of arguments and returns a new function (technically it returns a <a href="https://treyhunner.com/2019/04/is-it-a-class-or-a-function-its-a-callable/#Callable_objects">callable object</a>).</p>

<p>Here&rsquo;s an example of <code>partial</code> used to &ldquo;bind&rdquo; the <code>sep</code> keyword argument to the <code>print</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">print_each</span> <span class="o">=</span> <span class="n">partial</span><span class="p">(</span><span class="k">print</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>print_each</code> function returned now does the same thing as if <code>print</code> was called with <code>sep='\n'</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="go">1 2 3</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="go">1</span>
</span><span class='line'><span class="go">2</span>
</span><span class='line'><span class="go">3</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">print_each</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="go">1</span>
</span><span class='line'><span class="go">2</span>
</span><span class='line'><span class="go">3</span>
</span></code></pre></td></tr></table></div></figure>


<p>You&rsquo;ll also find functions-that-accept-functions in third-party libraries, like <a href="https://docs.djangoproject.com/en/3.0/ref/models/fields/#default">in Django</a>, and <a href="https://numpy.org/doc/1.17/reference/generated/numpy.fromfunction.html">in numpy</a>.
Anytime you see a class or a function with documentation stating that one of its arguments should be a <strong>callable</strong> or a <strong>callable object</strong>, that means &ldquo;you could pass in a function here&rdquo;.</p>

<h2>A topic I&rsquo;m skipping over: nested functions</h2>

<p>Python also supports nested functions (functions defined inside of other functions).
Nested functions power Python&rsquo;s <a href="https://docs.python.org/3/glossary.html#term-decorator">decorator</a> syntax.</p>

<p>I&rsquo;m not going to discuss nested functions in this article because nested functions warrant exploration of <a href="https://en.wikipedia.org/wiki/Non-local_variable">non-local variables</a>, <a href="https://en.wikipedia.org/wiki/Closure_(computer_programming)">closures</a>, and other weird corners of Python that you don&rsquo;t need to know when you&rsquo;re first getting started with treating functions as objects.</p>

<p>I plan to write a follow-up article on this topic and link to it here later.
In the meantime, if you&rsquo;re interested in nested functions in Python, a search for <a href="https://duckduckgo.com/?q=higher-order+functions+in+Python">higher order functions in Python</a> may be helpful.</p>

<h2>Treating functions as objects is normal</h2>

<p>Python has <a href="https://en.wikipedia.org/wiki/First-class_function">first-class functions</a>, which means:</p>

<ol>
<li>You can assign functions to variables</li>
<li>You can store functions in lists, dictionaries, or other data structures</li>
<li>You can pass functions into other functions</li>
<li>You can write functions that return functions</li>
</ol>


<p>It might seem odd to treat functions as objects, but it&rsquo;s not that unusual in Python.
By my count, about 15% of the Python built-ins are meant to accept functions as arguments (<code>min</code>, <code>max</code>, <code>sorted</code>, <code>map</code>, <code>filter</code>, <code>iter</code>, <code>property</code>, <code>classmethod</code>, <code>staticmethod</code>, <code>callable</code>).</p>

<p>The most important uses of Python&rsquo;s first-class functions are:</p>

<ol>
<li>Passing a <code>key</code> function to the built-in <code>sorted</code>, <code>min</code>, and <code>max</code> functions</li>
<li>Passing functions into looping helpers like <code>filter</code> and <code>itertools.dropwhile</code></li>
<li>Passing a &ldquo;default-value generating factory function&rdquo; to classes like <code>defaultdict</code></li>
<li>&ldquo;Partially-evaluating&rdquo; functions by passing them into <code>functools.partial</code></li>
</ol>


<p>This topics goes <em>much deeper</em> than what I&rsquo;ve discussed here, but until you find yourself writing decorator functions, you probably don&rsquo;t need to explore this topic any further.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cyber Monday Python Sales (2019)]]></title>
    <link href="https://treyhunner.com/2019/12/cyber-monday-python-sales/"/>
    <updated>2019-12-02T02:00:00-08:00</updated>
    <id>https://treyhunner.com/2019/12/cyber-monday-python-sales</id>
    <content type="html"><![CDATA[<p>I&rsquo;m running <a href="https://treyhunner.com/2019/11/black-friday-sale-gift-python-morsels-to-a-friend/">a sale</a> that ends in 24 hours, but I&rsquo;m not the only one.
This post is a compilation of the different Cyber Monday deals I&rsquo;ve found related to Python and Python learning.</p>

<h3>Python Morsels, weekly skill-building for professional Pythonistas</h3>

<p><a href="https://www.pythonmorsels.com/">Python Morsels</a> is my weekly Python skill-building service.</p>

<p>I&rsquo;m offering something sort of like a &ldquo;buy one get one free&rdquo; sale this year.</p>

<p>You can pay $200 to get 2 redemption codes, each worth 12 months of Python Morsels.</p>

<p>You can use one code for yourself and give one to a friend.
Or you could be extra generous and give them both away to two friends.
Either way, 2 people are each getting one year&rsquo;s worth of weekly Python training.</p>

<p>You can find <a href="https://treyhunner.com/2019/11/black-friday-sale-gift-python-morsels-to-a-friend/">more details on this sale here</a>.</p>

<h3>Data School&rsquo;s Machine Learning course</h3>

<p>Kevin Markham of Data School is selling his &ldquo;Machine Learning with Text in Python&rdquo; course for $195 (it&rsquo;s usually $295).
You can find more details on this sale <a href="https://www.dataschool.io/black-friday/">on the Data School Black Friday post</a>.</p>

<h3>Talk Python Course Bundle</h3>

<p>Michael Kennedy is selling a bundle that includes <a href="https://training.talkpython.fm/black-friday-2019">every Talk Python course for $250</a>.</p>

<p>There are 20 courses included in this bundle.
If you&rsquo;re into Python and you don&rsquo;t already own most of these courses, this bundle could be a really good deal for you.</p>

<h3>Reuven Lerner&rsquo;s Python courses</h3>

<p>Reuven Lerner is offering a <a href="https://lerner.co.il/2019/11/28/my-black-friday-sale-is-live-take-50-off-any-course-in-python-or-data-science/">50% off sale on his courses</a>.
Reuven has courses on Python, Git, and regular expressions.</p>

<p>This sale also includes Reuven&rsquo;s <a href="https://store.lerner.co.il/wpe?coupon=BF2019">Weekly Python Exercise</a>, which is similar to <a href="https://www.pythonmorsels.com/">Python Morsels</a>, but has its own flavor.
You could sign up for both if you want double the weekly learning.</p>

<h3>Real Python courses</h3>

<p>Real Python is also offering <a href="https://realpython.com/account/join/?c=blackfriday2019">$40 off their annual memberships</a>.
Real Python has many tutorials and courses as well.</p>

<h3>PyBites Code Challenges</h3>

<p>Bob and Julian of PyBites are offering their a <a href="https://gumroad.com/l/Xhxeo/teachingpython">40% discount off their Newbie Bites</a> on their PyBites Code Challenges platform.</p>

<p>If you&rsquo;re new to Python and programming, check out their newbie bites.</p>

<h3>Automate the Boring Stuff Course (for free!)</h3>

<p>Al Sweigart is offering <a href="https://www.udemy.com/course/automate/?couponCode=DEC2019FREE">free lifetime access to his Automate the Boring Stuff with Python course</a> on Udemy until Wednesday.
It&rsquo;s hard to beat free!</p>

<h3>Other Cyber Monday deals?</h3>

<p>If you have questions about the <a href="https://treyhunner.com/2019/11/black-friday-sale-gift-python-morsels-to-a-friend/">Python Morsels sale</a>, <a href='m&amp;#97;&amp;#105;l&amp;#116;o&amp;#58;he&amp;#108;p&amp;#64;&amp;#112;%7&amp;#57;th%6Fnmo&amp;#114;s%6&amp;#53;ls&amp;#46;&amp;#99;&amp;#111;m'>email me</a>.</p>

<p>The Python Morsels sale and likely all the other sales above will end in the next 24 hours, probably sooner depending on when you&rsquo;re reading this.</p>

<p>So go check them out!</p>

<p>Did I miss a deal that you know about?
Link to it in the comments!</p>
]]></content>
  </entry>
  
</feed>
