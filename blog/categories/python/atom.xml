<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Trey Hunner]]></title>
  <link href="https://treyhunner.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="https://treyhunner.com/"/>
  <updated>2025-10-10T12:34:13-07:00</updated>
  <id>https://treyhunner.com/</id>
  <author>
    <name><![CDATA[Trey Hunner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Handy Python REPL Modifications]]></title>
    <link href="https://treyhunner.com/2025/10/handy-python-repl-modifications/"/>
    <updated>2025-10-08T19:59:20-07:00</updated>
    <id>https://treyhunner.com/2025/10/handy-python-repl-modifications</id>
    <content type="html"><![CDATA[<p>I find myself in the Python REPL <em>a lot</em>.</p>

<p>I open up the REPL to play with an idea, to use Python as a calculator or quick and dirty text parsing tool, to record a screencast, to come up with a code example for an article, and (most importantly for me) to teach Python.
My Python courses and workshops are based largely around writing code together to guess how something works, try it out, and repeat.</p>

<p>As I&rsquo;ve written about before, you can <a href="https://treyhunner.com/2024/10/adding-keyboard-shortcuts-to-the-python-repl/">add custom keyboard shortcuts</a> to the new Python REPL (since 3.13) and <a href="https://treyhunner.com/2025/09/customizing-your-python-repl-color-scheme/">customize the REPL syntax highlighting</a> (since 3.14).
If you spend time in the Python REPL and wish it behaved a little more <strong>like your favorite editor</strong>, these tricks can come in handy.</p>

<p>I have added <strong>custom keyboard shortcuts</strong> to my REPL and other modifications to help me <strong>more quickly write and edit code in my REPL</strong>.
I&rsquo;d like to share some of the modifications that I&rsquo;ve found helpful in my own Python REPL.</p>

<h2>Creating a PYTHONSTARTUP file</h2>

<p>If you want to run Python code every time an interactive prompt (a REPL) starts, you can make a PYTHONSTARTUP file.</p>

<p>When Python launches an interactive prompt, it checks for a <code>PYTHONSTARTUP</code> environment variable.
If it finds one, it treats it as a filename that contains Python code and it <strong>runs all the code in that file</strong>, as if you had copy-pasted the code into the REPL.</p>

<p>So all of the modifications I have made to my Python REPL rely on this <code>PYTHONSTARTUP</code> variable in my <code>~/.zshenv</code> file:</p>

<pre><code class="sh">export PYTHONSTARTUP=$HOME/.startup.py
</code></pre>

<p>If you use bash, you&rsquo;ll put that in your <code>~/.bashrc</code> file.
If you&rsquo;re on Windows <a href="https://gist.github.com/mitchmindtree/92c8e37fa80c8dddee5b94fc88d1288b">you&rsquo;ll need to set an environment variable the Windows way</a>.</p>

<p>With that variable set, I can now create a <code>~/.startup.py</code> file that has Python code in it.
That code will automatically run every time I launch a new Python REPL, whether within a virtual environment or outside of one.</p>

<h2>My REPL keyboard shortcuts</h2>

<p>The quick summary of my <em>current</em> modifications are:</p>

<ul>
<li>Pressing <strong>Home</strong> moves to the <strong>first character in the code block</strong></li>
<li>Pressing <strong>End</strong> moves to the <strong>last character in the code block</strong></li>
<li>Pressing <strong>Alt+M</strong> moves to the <strong>first character</strong> on the current line</li>
<li>Pressing <strong>Shift+Tab</strong> removes <strong>common indentation</strong> from the code block</li>
<li>Pressing <strong>Alt+Up</strong> swaps the current line with <strong>the line above it</strong></li>
<li>Pressing <strong>Alt+Down</strong> swaps the current line with <strong>the line below it</strong></li>
<li>Pressing <strong>Ctrl+N</strong> inserts <strong>a specific list of numbers</strong></li>
<li>Pressing <strong>Ctrl+F</strong> inserts <strong>a specific list of strings</strong></li>
</ul>


<p>If you&rsquo;ve read <a href="https://www.pythonmorsels.com/repl-features/">my Python REPL shortcuts</a> article, you know that we can use <strong>Ctrl+A</strong> to move to the beginning of the line and <strong>Ctrl+E</strong> to move to the end of the line.
I already use those instead of the Home and End keys, so I decided to rebind Home and End to do something different.</p>

<p>The <strong>Alt+M</strong> key combination is essentially the same as <code>Alt+M</code> in Emacs or <code>^</code> in Vim. I usually prefer to move to the beginning of the non-whitespace in a line rather than to the beginning of the <em>entire</em> line.</p>

<p>The <strong>Shift+Tab</strong> functionality is basically a fancy wrapper around <a href="https://www.pythonmorsels.com/dedent/">using <code>textwrap.dedent</code></a>: it dedents the current code block while keeping the cursor over the same character it was at before.</p>

<p>The <strong>Ctrl+N</strong> and <strong>Ctrl+F</strong> shortcuts make it easier for me to grab an example data structure to work with when teaching.</p>

<p>In addition to the above changes, I also modify my color scheme to work nicely with my Solarized Light color scheme in Vim.</p>

<h2>I created a pyrepl-hacks library for this</h2>

<p>My PYTHONSTARTUP file became so messy that I ended up creating a <a href="https://github.com/treyhunner/pyrepl-hacks">pyrepl-hacks library</a> to help me with these modifications.</p>

<p><a href="https://github.com/treyhunner/dotfiles/commits/main/startup.py">My PYTHONSTARTUP file</a> now looks pretty much like this:</p>

<pre><code class="python">import pathlib as _pathlib, sys as _sys
_sys.path.append(str(_pathlib.Path.home() / ".pyhacks"))

try:
    import pyrepl_hacks as _repl
except ImportError:
    _repl = None  # We're on Python 3.12 or below
else:
    _repl.bind("Home", "home")
    _repl.bind("End", "end")
    _repl.bind("Alt+M", "move-to-indentation")
    _repl.bind("Shift+Tab", "dedent")
    _repl.bind("Alt+Down", "move-line-down")
    _repl.bind("Alt+Up", "move-line-up")
    _repl.bind_to_insert("Ctrl+N", "[2, 1, 3, 4, 7, 11, 18, 29]")
    _repl.bind_to_insert(
        "Ctrl+F",
        '["apples", "oranges", "bananas", "strawberries", "pears"]',
    )

    try:
        # Solarized Light theme to match vim
        _repl.update_theme(
            keyword="green",
            builtin="blue",
            comment="intense blue",
            string="cyan",
            number="cyan",
            definition="blue",
            soft_keyword="bold green",
            op="intense green",
            reset="reset, intense green",
        )
    except ImportError:
        pass  # We're on Python 3.13 or below

del _repl, _pathlib, _sys  # Avoid global REPL namespace pollution
</code></pre>

<p>That&rsquo;s pretty short!</p>

<p>But wait&hellip; won&rsquo;t this fail unless pyrepl-hacks is installed in every virtual environment <em>and</em> installed globally for every Python version on my machine?</p>

<p>That&rsquo;s where that <code>sys.path.append</code> trick comes in handy&hellip;</p>

<h2>Wait&hellip; let&rsquo;s acknowledge the dragons üê≤</h2>

<p>At this point I&rsquo;d like to pause to note that all of this relies on using an implementation detail of Python that is deliberately undocumented because it <em>is not designed</em> to be used by end users.</p>

<p>The above code all relies on the <code>_pyrepl</code> module that was added in Python 3.13 (and optionally the <code>_colorize</code> module that was added in Python 3.14).</p>

<p>When I run a new future version of Python (for example Python 3.15) this solution may break.
I&rsquo;m willing to take that risk, as I know that I can always unset my shell&rsquo;s <code>PYTHONSTARTUP</code> variable or clear out my startup file.</p>

<p>So, just be aware&hellip; here be (private undocumented implementation detail) dragons.</p>

<h2>Monkey patching <code>sys.path</code> to allow importing <code>pyrepl_hacks</code></h2>

<p>I didn&rsquo;t install pyrepl-hacks <em>the usual way</em>.
Instead, I installed it in a very specific location.</p>

<p>I created a <code>~/.pyhacks</code> directory and then installed <code>pyrepl-hacks</code> <em>into</em> that directory:</p>

<pre><code class="bash">$ mkdir -p ~/.pyhacks
$ python -m pip install pyrepl-hacks --target ~/.pyhacks
</code></pre>

<p>In order for the <code>pyrepl_hacks</code> Python package to work, it needs to available within every Python REPL I might launch.
Normally that would mean that it needs to be installed in every virtual environment that Python runs within.
This trick avoids that constraint.</p>

<p>When Python tries to import a module, it iterates through the <code>sys.path</code> directory list.
Any Python packages found <em>within</em> any of the <code>sys.path</code> directories may be imported.</p>

<p>So monkey patching <code>sys.path</code> within my PYTHONSTARTUP file allows <code>pyrepl_hacks</code> to be imported in every Python interpreter I launch:</p>

<pre><code class="python">from pathlib import Path
import sys
sys.path.append(str(Path.home() / ".pyhacks"))
</code></pre>

<p>With those 3 lines (or something like them) placed in my PYTHONSTARTUP file, all interactive Python interpreters I launch will be able to import modules that are located in my <code>~/.pyhacks</code> directory.</p>

<h2>Creating your own custom REPL commands</h2>

<p>That&rsquo;s pretty neat.
But what if you want to invent your own REPL commands?</p>

<p>Well, the <code>bind</code> utility I&rsquo;ve created in the <code>pyrepl_hacks</code> module can be used as a decorator for that.</p>

<p>This will make Ctrl+X followed by Ctrl+R insert <code>import subprocess</code> followed by <code>subprocess.run("", shell=True)</code> with the cursor positioned in between the double quotes after it&rsquo;s all inserted:</p>

<pre><code class="python">import pyrepl_hacks as _repl

@_repl.bind(r"Ctrl+X Ctrl+R", with_event=True)
def subprocess_run(reader, event_name, event):
    """Ctrl+X followed by Ctrl+R will insert a subprocess.run command."""
    reader.insert("import subprocess\n")
    code = 'subprocess.run("", shell=True)'
    reader.insert(code)
    for _ in range(len(code) - code.index('""') - 1):
        _repl.commands.left(reader, event_name, event)
</code></pre>

<p>You can read more about the ins and outs of the pyrepl-hacks package <a href="https://github.com/treyhunner/pyrepl-hacks#readme">in the readme file</a>.</p>

<h2>pyrepl-hacks is just a fancy wrapper</h2>

<p>The pyrepl-hacks package is really just a fancy wrapper around Python&rsquo;s <code>_pyrepl</code> and <code>_colorize</code> modules.</p>

<p>Why did I make a whole package and then modify my <code>sys.path</code> to use it, when I could have just used <code>_pyrepl</code> directly?</p>

<p>Three reasons:</p>

<ol>
<li>To make creating new commands <em>a bit</em> easier (functions can be used instead of classes)</li>
<li>To make the key bindings look a bit nicer (I prefer <code>"Ctrl+M"</code> over <code>r"\C-M"</code>)</li>
<li>To hide my hairy hacks behind a shiny API ‚ú®</li>
</ol>


<p>Before I made pyrepl-hacks, I implemented these commands directly within my PYTHONSTARTUP file by reaching into the internals of <code>_pyrepl</code> directly.</p>

<p>My PYTHONSTARTUP file before pyrepl-hacks was <a href="https://pym.dev/p/35q9e/">over 100 lines longer</a>.</p>

<h2>Try pyrepl-hacks and leave feedback</h2>

<p>My hope is that the <a href="https://github.com/treyhunner/pyrepl-hacks">pyrepl-hacks</a> library will be obsolete one day.
Eventually the <code>_pyrepl</code> module might be renamed to <code>pyrepl</code> (or maybe just <code>repl</code>?) and it will have a well-documented friendly-ish public interface.</p>

<p>In the meantime, I plan to maintain pyrepl-hacks.
As Python 3.15 is developed, I&rsquo;ll make sure it continues to work.
And I may add more useful commands if I think of any.</p>

<p>If you hack your own REPL, I&rsquo;d love to hear what modifications you come up with.
And if you have thoughts on how to improve pyrepl-hacks, please open an issue or get in touch.</p>

<p>Also, <strong>if you use Windows</strong>, <a href="https://github.com/treyhunner/pyrepl-hacks/issues/1">please help me</a> confirm <strong>whether certain keys work on Windows</strong>. Thanks!</p>

<p>Contributions and ideas welcome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Customizing your Python REPL's color scheme (Python 3.14+)]]></title>
    <link href="https://treyhunner.com/2025/09/customizing-your-python-repl-color-scheme/"/>
    <updated>2025-09-04T14:00:00-07:00</updated>
    <id>https://treyhunner.com/2025/09/customizing-your-python-repl-color-scheme</id>
    <content type="html"><![CDATA[<p>Did you know that Python 3.14 will include <a href="https://docs.python.org/3.14/whatsnew/3.14.html#whatsnew314-pyrepl-highlighting">syntax highlighting</a> in the REPL?</p>

<p>Python 3.14 is due to be <a href="https://peps.python.org/pep-0745/">officially released</a> in about a month.
I recommended tweaking your Python setup now so you&rsquo;ll have your ideal color scheme on release day.</p>

<p><img src="/images/python3.14-repl-syntax-highlighting.png" title="Python 3.14 REPL with syntax highlighting using custom color scheme" ></p>

<p>But&hellip; what if the default syntax colors don&rsquo;t match the colors that your text editor uses?</p>

<p>Well, fortunately you can customize your color scheme!</p>

<p><strong>Warning</strong>: I am recommending using an undocumented private module (it has an <code>_</code>-prefixed name) which may change in future Python versions.
Do not use this module in production code.</p>

<h2>Installing Python 3.14</h2>

<p>Don&rsquo;t have Python 3.14 installed yet?</p>

<p>If you have <a href="https://docs.astral.sh/uv/">uv</a> installed, you can run this command to launch Python 3.14:</p>

<pre><code class="bash">$ uv run --python 3.14 python
</code></pre>

<p>That will automatically install 3.14 (if you don&rsquo;t have it yet) and run it.</p>

<h2>Setting a theme</h2>

<p>I have my terminal colors set to the Solarized Light color palette and I have Vim use a Solarized Light color scheme as well.</p>

<p>The REPL doesn&rsquo;t <em>quite</em> match my text editor by default:</p>

<p><img src="/images/python3.14-repl-default-color-scheme.png" title="Python 3.14 REPL with default syntax highlighting" ></p>

<p>The numbers, comments, strings, and keywords are all different colors than my text editor.</p>

<p>This code makes the Python REPL use <em>nearly</em> the same syntax highlighting as my text editor:</p>

<pre><code class="python">from _colorize import set_theme, default_theme, Syntax, ANSIColors

set_theme(default_theme.copy_with(
    syntax=Syntax(
        keyword=ANSIColors.GREEN,
        builtin=ANSIColors.BLUE,
        comment=ANSIColors.INTENSE_BLUE,
        string=ANSIColors.CYAN,
        number=ANSIColors.CYAN,
        definition=ANSIColors.BLUE,
        soft_keyword=ANSIColors.BOLD_GREEN,
        op=ANSIColors.INTENSE_GREEN,
        reset=ANSIColors.RESET + ANSIColors.INTENSE_GREEN,
    ),
))
</code></pre>

<p>Check it out:</p>

<p><img src="/images/python3.14-repl-syntax-highlighting.png" title="Python 3.14 REPL with syntax highlighting using custom color scheme" ></p>

<p>Neat, right?</p>

<p>But&hellip; I want this to be enabled by default!</p>

<h2>Using a <code>PYTHONSTARTUP</code> file</h2>

<p>You can use a <code>PYTHONSTARTUP</code> file to run code every time a new Python process starts.</p>

<p>If Python sees a <code>PYTHONSTARTUP</code> environment variable when it starts up, it will open that file and evaluate the code within it.</p>

<p>I have this in my <code>~/.zshrc</code> file to set the <code>PYTHONSTARTUP</code> environment variable to <code>~/.startup.py</code>:</p>

<pre><code class="bash"># Setup python-launcher to use startup file
export PYTHONSTARTUP=$HOME/.startup.py
</code></pre>

<p>In my <code>~/.startup.py</code> file, I have this code:</p>

<pre><code class="python">def _main():
    """Everything's in a function to avoid polluting the global scope."""
    try:
        from _colorize import set_theme, default_theme, Syntax, ANSIColors
    except ImportError:
        pass  # Python 3.13 and below
    else:
        # Define Solarized Light colors
        solarized_light_theme = default_theme.copy_with(
            syntax=Syntax(
                keyword=ANSIColors.GREEN,
                builtin=ANSIColors.BLUE,
                comment=ANSIColors.INTENSE_BLUE,
                string=ANSIColors.CYAN,
                number=ANSIColors.CYAN,
                definition=ANSIColors.BLUE,
                soft_keyword=ANSIColors.BOLD_GREEN,
                op=ANSIColors.INTENSE_GREEN,
                reset=ANSIColors.RESET + ANSIColors.INTENSE_GREEN,
            ),
        )
        set_theme(solarized_light_theme)

_main()  # _main avoids name collision, in case python -i is used
del _main  # Delete _main from global scope
</code></pre>

<p>Note that:</p>

<ol>
<li>I put all relevant code within a <code>_main</code> function so that the variables I set don&rsquo;t remain in the global scope of the Python REPL (they will by default)</li>
<li>I call the <code>_main</code> function and then delete the function afterward, again so the <code>_main</code> variable doesn&rsquo;t stay floating around in my REPL</li>
<li>I use <code>try</code>-<code>except</code>-<code>else</code> to ensure errors don&rsquo;t occur on Python 3.13 and below</li>
</ol>


<p>Also note that the syntax highlighting in the new REPL is <a href="https://github.com/python/cpython/issues/134953">not as fine-grained</a> as many other syntax highlighting tools.
I suspect that it may become a bit more granular over time, <strong>which may break the above code</strong>.</p>

<p>The <code>_colorize</code> module is currently an internal implementation detail and is deliberately undocumented.
Its API may change at any time, so <strong>the above code may break in Python 3.15</strong>.
If that happens, I&rsquo;ll just update my <code>PYTHONSTARTUP</code> file at that point.</p>

<h2>Packaging themes</h2>

<p>I&rsquo;ve stuck all of the above code in a <code>~/.startup.py</code> file and I set the <code>PYTHONSTARTUP</code> environment variable on my system to point to this file.</p>

<p>Instead of manually updating a startup file, is there any way to make these themes <em>installable</em>?</p>

<p>Well, if a <code>.pth</code> file is included in Python&rsquo;s <code>site-packages</code> directory, that file (which must be a single line) will be run whenever Python starts up.
In theory, a package could use such a file to import a module and then call a function that would set the color scheme for the REPL.
My <a href="https://github.com/treyhunner/dramatic">dramatic</a> package uses (<em>cough</em> abuses <em>cough</em>) <code>.pth</code> files in this way.</p>

<p>This sounds like a somewhat bad idea, but maybe not a <em>horrible</em> idea.</p>

<p>If you do this, let me know.</p>

<h2>What&rsquo;s your theme?</h2>

<p>Have you played with setting a theme in your own Python REPL?</p>

<p>What theme are you using?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My PyCon US 2025 recap]]></title>
    <link href="https://treyhunner.com/2025/06/pycon-us-2025-recap/"/>
    <updated>2025-06-11T16:45:00-07:00</updated>
    <id>https://treyhunner.com/2025/06/pycon-us-2025-recap</id>
    <content type="html"><![CDATA[<p>I&rsquo;m pretty much fully back to normal life after PyCon US 2025.</p>

<p>I started writing this post shortly after PyCon, got side-tracked, and now I&rsquo;m finally publishing it.</p>

<p><strong>My very quick recap</strong>: I spent a ton of time at PyCon chatting with folks and I <em>really</em> enjoyed it.
As Ned wrote, <a href="https://nedbatchelder.com/blog/202505/pycon_summer_camp.html">it&rsquo;s like summer camp</a>.</p>

<h2>My pre-conference (Monday and Tuesday)</h2>

<p>I flew in a couple days early (Monday May 12) because Breeze airlines had a non-stop flight from San Diego to Pittsburgh that only ran on Monday or Friday.
I listened to <a href="http://robertdputnam.com/the-upswing/">The Upswing</a> as I flew in and wondered <a href="https://mastodon.social/@treyhunner/114496799621377766">how we can make our community less individualistic</a>.</p>

<p>On Tuesday, I went on <a href="https://mastodon.social/@treyhunner/114495825740774796">a walking tour</a> of downtown Pittsburgh.
Then I ate Indian food for lunch at Sree&rsquo;s, which I chose because I saw they had great vegan lunch options and weren&rsquo;t open for dinner.
I was eating vegan during PyCon US (as I <em>mostly</em> do at home) and I remembered to do <a href="https://mastodon.social/@treyhunner/114506541091205849">some research on vegan dinner restaurants in the area</a> this year.</p>

<p>On Tuesday night, as CPython core devs started showing up in the Westin lobby, I went on a walk with Anthony Shaw.
Anthony asked whether I was up for &ldquo;an adventure&rdquo; and I said yes without asking questions.
We walked across the river to Randyland (a.k.a. &ldquo;the mattress factory&rdquo;).
It was fun, interesting, and quite odd.
We were the only ones there and had plenty of time to look around at all the interesting items and art pieces that Randy had collected.</p>

<p>Anthony and I did dinner at Condado&rsquo;s and ran into more conference friends at the bar (Kattni, Rose, and Kojo).</p>

<h2>My tutorial on decorators (Wednesday)</h2>

<p>Wednesday was my tutorial day.</p>

<p>Attendees used sticky notes during the exercise sections to note when they needed help.
I wrote about this system in my <a href="https://treyhunner.com/2025/05/how-to-give-a-great-pycon-tutorial/">blog post of tips for giving a good PyCon tutorial</a>.</p>

<p>The tutorial went well and the attendees seemed to enjoy it.</p>

<h2>The newcomer&rsquo;s orientation &amp; education summit (Thursday)</h2>

<p>Just before the opening reception on Thursday evening, Kojo, Sumana, and I ran the <a href="https://mastodon.social/@pycon@fosstodon.org/114512798321665686">newcomer&rsquo;s orientation</a>.
Figuring out what exactly we want to say to help orient folks to PyCon is always a bit challenging.
A first-time PyCon attendee gave me some ideas for how we could do it even better next year.
I&rsquo;ve taken notes and will revisit them later.</p>

<p>I also attended a few talks during education summit earlier in the day.
Reuven Lerner gave a talk on how he recommends his students use LLMs and I was pleased to hear many suggestions that are closely aligned with what I recommend as well as a few insights I hadn&rsquo;t heard before.</p>

<h2>My lightning talk (Friday)</h2>

<p>I gave a lightning talk on Friday evening (the first talk day).
I called it <a href="https://youtu.be/Uuhu-F05A7k?feature=shared&amp;t=3174">Systems, gates, and rage</a>.
It seemed to go over well.
Folks occasionally told me throughout the conference that they enjoyed it.
I won&rsquo;t spoil the topic of my lightning talk (you&rsquo;ll need to watch it) but it&rsquo;s a topic that I&rsquo;d been thinking about for a few months.</p>

<p>Rodrigo gave a <a href="https://mastodon.social/@treyhunner/114519939925398070">meta lightning talk</a> as the first talk of the first day.
I gave a meta lightning talk last year in the same slot.
I hope this becomes a tradition, where the first lightning talk is a talk about someone explaining how to give a lightning talk.</p>

<h2>The keynotes</h2>

<p>I really enjoyed the keynotes this year.</p>

<p><a href="https://youtu.be/ydVmzg_SJLw?feature=shared">Cory Doctorow&rsquo;s opening keynote</a> was <a href="https://mastodon.social/@treyhunner/114519939925398070"><em>really</em> thought-provoking</a> and <a href="https://youtu.be/Bglsof9b23k?feature=shared">Lynn Root&rsquo;s keynote</a> was on the importance <a href="https://mastodon.social/@treyhunner/114519939925398070">of &ldquo;play&rdquo;</a>, which is a topic I&rsquo;ve written about before to my <a href="https://pym.dev/newsletter">mailing list</a>.</p>

<p><a href="https://youtu.be/qog-dGVhSBI?feature=shared">The Marshall project</a> keynote and <a href="https://youtu.be/3UOLpTA7pRI?feature=shared">The Carpentries</a> keynote were also great, though I missed portions of each (beginning of one and end of another) and ended up watching the full videos online after the conference.</p>

<h2>The hallway track</h2>

<p>The &ldquo;hallway track&rdquo; is the way many PyCon attendees describe <strong>the discussions that happen organically in the hallway</strong>.</p>

<p>These discussions can happen at any time, including breaks, breakfast, lunch, and even during talks. I missed at least 3 talks this year because I was having a great discussion in the hallway and time got away from me.</p>

<p>PyCon&rsquo;s venue in Pittsburgh included a great <a href="https://mastodon.social/@treyhunner/114512971414412295">rooftop</a> so the <strong>rooftop track</strong> / <strong>garden track</strong> was a lovely spin in the hallway track this year.</p>

<h2>The open spaces</h2>

<p>The open spaces are a very important part of PyCon for me.</p>

<p>Like the hallway track, the open spaces are mostly (usually) about having a conversation.
Unlike the hallway track, the open spaces have a <strong>set topic</strong>.</p>

<p>I attended open spaces (and <a href="https://mastodon.social/@treyhunner/114526876252905533">ran my own</a>):</p>

<ul>
<li><strong>Education and Outreach Working Group Open Space</strong>: I&rsquo;m part of this newly revived work group and we held this to hear topics that community members are interested in seeing the PSF focus on more deliberately</li>
<li><strong>t-strings: Let&rsquo;s build powerful templating together</strong>: I am interested in the new t-string feature in Python 3.14 and wanted to listen to this conversation (I contributed <em>a little bit</em> too)</li>
<li><strong>Computer Assisted Reporting and Investigative journalism</strong>: I was curious to hear this conversation, which included journalists, government employees who respond to information requests, and many others</li>
<li><strong>Python Skill-Building</strong>: I ran this open space on the roof during lunch time to chat about different Python skill-building services, including my own (<a href="https://pym.dev">Python Morsels</a>)</li>
<li><strong>Ask a Friendly Meat-Loving Vegan</strong>: I also ran this open space, inspired by a conversation I had the night before in a hotel lobby about animal farming, veganism, nutrition, and other related topics I&rsquo;ve thought/read a lot about</li>
</ul>


<p>I enjoyed meeting folks with similar interests and having fun and productive conversations (or at least listening to interesting conversations) in those open spaces.</p>

<h2>Dinners, games, and hotel lobby conversations</h2>

<p>I ate at Bae Bae&rsquo;s, Rosewater Grill, and APTEKA during the conference.
I also ate at Condado&rsquo;s at least 3 nights.</p>

<p>APTEKA was a fun trek for <a href="https://mastodon.social/@pythonbynight@fosstodon.org/114525581821316666">vegan PierogiCon</a> with mostly non-vegan folks.
I&rsquo;m sure the pierogis weren&rsquo;t authentic, but we all loved the food.</p>

<p>After dinner every night I went to the Westin lobby and either played <a href="https://treyhunner.com/2015/06/cabo-card-game/">the Cabo card game</a> or chatted with folks (<a href="https://mastodon.social/@treyhunner/114509076754402356">1</a>, <a href="https://mastodon.social/@treyhunner/114514682814457694">2</a>, <a href="https://mastodon.social/@treyhunner/114525878624139679">3</a>).</p>

<h2>On missing talks</h2>

<p>The keynotes and lightning talks are usually my favorite parts of PyCon.
I tried to watch as many live keynotes and lightning talk sessions as I could this year.
The morning lightning talks were hard to make it to because I kept sleeping in late enough that I missed most of them.</p>

<p>Ultimately, I watched <em>very few</em> live talks.
I missed talks due to sleeping in, attending open spaces, visiting booths in the exhibit hall, getting lost in conversations in the hallway, and mid-day taking naps (in my hotel room, not during talks!).</p>

<p>Hynek has <a href="https://hynek.me/articles/hallway-track/">written about the downside of the hallway track and the importance of attending talks</a>.
I sympathize with Hynek&rsquo;s argument that the hallway track is a trade off and there are downsides to missing talks, for both attendees and speakers.
I am grateful that folks give talks and I want to support folks who do give talks, and yet, I often find myself attending few talks.</p>

<p>Ironically, the one talk I ended up taking a nap through (again, in my hotel room, not <em>in the talk</em>) was Hynek&rsquo;s.
My brain was fried by the time of his talk and I&rsquo;m glad I was able to watch it online the week after PyCon.
He apparently had a completely packed room as it was!</p>

<p>I did make sure to show up to a talk by a conference friend who I wanted to support (Michael Dahlberg&rsquo;s <a href="https://youtu.be/LseCKvrp6og?feature=shared">talk on honeybee swarms</a>).
I have also binge-watched a dozen or so talks online that I had planned to attend but missed during PyCon.</p>

<p>You can <a href="https://www.youtube.com/@PyConUS/videos">watch all talks online now</a> (at least I <em>think</em> they&rsquo;re all up now?).</p>

<h2>Attend a Python event</h2>

<p>I&rsquo;m looking forward to PyCon coming to Long Beach next year.
I&rsquo;m in San Diego and it will be nice to <em>not fly</em> to a PyCon for once!</p>

<p>I highly recommend attending local Python meetups, attending regional Python conferences, and/or attending PyCon US.
Most in-person Python community events are <em>pretty lovely</em>.
The Python community generally goes out of its way to be more welcoming than most tech events.</p>

<p>See you in Long Beach!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Which social network are we using for PyCon US this year?]]></title>
    <link href="https://treyhunner.com/2025/04/which-social-network-are-we-using-for-pycon/"/>
    <updated>2025-04-18T11:45:00-07:00</updated>
    <id>https://treyhunner.com/2025/04/which-social-network-are-we-using-for-pycon</id>
    <content type="html"><![CDATA[<p>Last year I updated my <a href="https://treyhunner.com/2018/04/how-to-make-the-most-of-your-first-pycon/">having a great first PyCon</a> post to note that Mastodon would likely be more popular than Twitter at PyCon.</p>

<p>My guess was correct.
During PyCon US 2024, <a href="https://mastodon.social/@treyhunner/112453920848761679">Mastodon overtook Twitter</a> for the most posts on the <code>#PyConUS</code> hashtag.</p>

<p>In the fall of 2024, Bluesky really took off.
It currently seems like Bluesky is now a bit more popular than Mastodon for Python posts in general&hellip; but that doesn&rsquo;t necessarily mean it will be the most popular social media network during the conference.</p>

<p>This year I&rsquo;m guessing that Mastodon will still be the most popular network for <code>#PyConUS</code> posts, though I wouldn&rsquo;t be very surprised if Bluesky took the lead instead.</p>

<h2>What do the social networks think?</h2>

<p>I decided to pose this question to the various social networks via a poll. I made sure to share these polls using both the <code>#Python</code> and <code>#PyConUS</code> hashtags for visibility&rsquo;s sake.</p>

<p>The results?</p>

<ul>
<li><a href="https://www.linkedin.com/posts/treyhunner_pyconus-python-activity-7313960284581216256-DdzA/">LinkedIn poll</a>: LinkedIn isn&rsquo;t sure whether Twitter is the new Twitter</li>
<li><a href="https://x.com/treyhunner/status/1908187705965703323">Twitter poll</a> Twitter (mostly) knows that Bluesky is the new Twitter</li>
<li><a href="https://bsky.app/profile/trey.io/post/3llyswsgkut2h">Bluesky poll</a> Bluesky knows the really nerdy tech folks hang out on Mastodon</li>
<li><a href="https://mastodon.social/@treyhunner/114280595068705311">Mastodon poll</a> Mastodon loves itself above all else</li>
</ul>


<p>In other words, LinkedIn leans more toward Bluesky being the leader than Mastodon, Twitter leans toward Bluesky, but Bluesky and Mastodon both lean toward Mastodon being the leader during PyCon.</p>

<p>I didn&rsquo;t mention Threads or other platforms because they didn&rsquo;t seem like real contenders given where the most active PyCon-attending Python-posting folks seem to hang out in 2025.</p>

<h2>The actual results</h2>

<p>Here are the actual results of the polls.</p>

<h3>LinkedIn</h3>

<p><a href="https://www.linkedin.com/posts/treyhunner_pyconus-python-activity-7313960284581216256-DdzA/"><img src="/images/pycon-poll-linkedin-2025.png" title="LinkedIn poll results" ></a></p>

<h3>Twitter</h3>

<p><a href="https://x.com/treyhunner/status/1908187705965703323"><img src="/images/pycon-poll-twitter-2025.png" title="Twitter poll results" ></a></p>

<h3>Bluesky</h3>

<p><a href="https://bsky.app/profile/trey.io/post/3llyswsgkut2h"><img src="/images/pycon-poll-bluesky-2025.png" title="Bluesky poll results" ></a></p>

<h3>Mastodon</h3>

<p><a href="https://mastodon.social/@treyhunner/114280595068705311"><img src="/images/pycon-poll-mastodon-2025.png" title="Mastodon poll results" ></a></p>

<h2>We&rsquo;re still fragmented</h2>

<p>Unfortunately, regardless of which network is the leader this year during PyCon US, we&rsquo;re still going to be much more fragmented than we used to be. Twitter <em>was</em> the clear leader years ago and it very clearly isn&rsquo;t anymore&hellip; at least not for PyCon US conference chatter.</p>

<p>I&rsquo;ll be checking Mastodon and Bluesky and will post on <em>at least</em> Mastodon and possibly also Bluesky. I hope that other folks will also use one of these 2 social networks to organize dinners and gatherings! ü§û</p>

<p>Feel free to follow me <a href="https://mastodon.social/@treyhunner">on Mastodon</a> and <a href="https://mastodon.social/@treyhunner">Bluesky</a> during the conference.</p>

<p>Also let me know if you&rsquo;d like to join my <a href="https://bsky.app/profile/trey.io/post/3ln45jpzmik2c">PyCon US starter pack</a> on Bluesky.
Lists on Mastodon require following and I prefer not to follow everyone I meet at PyCon so, unfortunately, I probably won&rsquo;t have a Mastodon equivalent of this. üò¢</p>

<p>I recommend checking the <code>#PyConUS</code> hashtag on both networks as well.
Note that you can <em>subscribe</em> to hashtags on Mastodon which is pretty neat!</p>

<h2>See you at PyCon!</h2>

<p>If this will be your first PyCon US, I recommend signing up for both Mastodon and Bluesky and checking the <code>#PyConUS</code> hashtag during the conference.</p>

<p>Also, be sure to see my <a href="https://treyhunner.com/2018/04/how-to-make-the-most-of-your-first-pycon/">post on having a great first PyCon</a> and <a href="https://mastodon.social/@treyhunner/112448459788776426">see this additional tips</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lazy self-installing Python scripts with uv]]></title>
    <link href="https://treyhunner.com/2024/12/lazy-self-installing-python-scripts-with-uv/"/>
    <updated>2024-12-09T11:15:10-08:00</updated>
    <id>https://treyhunner.com/2024/12/lazy-self-installing-python-scripts-with-uv</id>
    <content type="html"><![CDATA[<p>I frequently find myself writing my own short command-line scripts in Python that help me with day-to-day tasks.</p>

<p>It&rsquo;s <em>so</em> easy to throw together a single-file Python command-line script and throw it in my <code>~/bin</code> directory!</p>

<p>Well&hellip; it&rsquo;s easy, <em>unless</em> the script requires anything outside of the Python standard library.</p>

<p>Recently I&rsquo;ve started using uv and my <em>primary</em> for use for it has been fixing Python&rsquo;s &ldquo;just manage the dependencies automatically&rdquo; problem.</p>

<p>I&rsquo;ll share how I&rsquo;ve been using uv&hellip; first first let&rsquo;s look at the problem.</p>

<h2>A script without dependencies</h2>

<p>If I have a Python script that I want to be easily usable from anywhere on my system, I typically follow these steps:</p>

<ol>
<li>Add an appropriate shebang line above the first line in the file (e.g. <code>#!/usr/bin/env python3</code>)</li>
<li>Set an executable bit on the file (<code>chmod a+x my_script.py</code>)</li>
<li>Place the script in a directory that&rsquo;s in my shell&rsquo;s <code>PATH</code> variable (e.g. <code>cp my_script.py ~/bin/my_script</code>)</li>
</ol>


<p>For example, here&rsquo;s a script I use to print out 80 zeroes (or a specific number of zeroes) to check whether my terminal&rsquo;s font size is large enough when I&rsquo;m teaching:</p>

<pre><code class="python">#!/usr/bin/env python3
import sys

numbers = sys.argv[1:] or [80]
for n in numbers:
    print("0" * int(n))
</code></pre>

<p>This file lives at <code>/home/trey/bin/0</code> so I can run the command <code>0</code> from my system prompt to see 80 <code>0</code> characters printed in my terminal.</p>

<p>This works great!
But this script doesn&rsquo;t have any dependencies.</p>

<h2>The problem: a script with dependencies</h2>

<p>Here&rsquo;s a Python script that normalizes the audio of a given video file and writes a new audio-normalized version of the video to a new file:</p>

<pre><code class="python">"""Normalize audio in input video file."""
from argparse import ArgumentParser
from pathlib import Path

from ffmpeg_normalize import FFmpegNormalize


def normalize_audio_for(video_path, audio_normalized_path):
    """Return audio-normalized video file saved in the given directory."""
    ffmpeg_normalize = FFmpegNormalize(audio_codec="aac", audio_bitrate="192k", target_level=-17)
    ffmpeg_normalize.add_media_file(str(video_path), audio_normalized_path)
    ffmpeg_normalize.run_normalization()


def main():
    parser = ArgumentParser()
    parser.add_argument("video_file", type=Path)
    parser.add_argument("output_file", type=Path)
    args = parser.parse_args()
    normalize_audio_for(args.video_file, args.output_file)


if __name__ == "__main__":
    main()
</code></pre>

<p>This script depends on the <a href="https://github.com/slhck/ffmpeg-normalize">ffmpeg-normalize</a> Python package and the <a href="https://ffmpeg.org">ffmpeg</a> utility.
I already have <code>ffmpeg</code> installed, but I prefer <em>not</em> to globally install Python packages.
I install all Python packages within virtual environments and I install global Python scripts using <a href="https://pipx.pypa.io">pipx</a>.</p>

<p>At this point I <em>could</em> choose to either:</p>

<ol>
<li>Create a virtual environment, install <code>ffmpeg-normalize</code> in it, and put a shebang line referencing that virtual environment&rsquo;s Python binary at the top of my script file</li>
<li>Turn my script into a <code>pip</code>-installable Python package with a <code>pyproject.toml</code> that lists <code>ffmpeg-normalize</code> as a dependency and use <code>pipx</code> to install it</li>
</ol>


<p>That first solution requires me to keep track of virtual environments that exist for specific scripts to work.
That sounds painful.</p>

<p>The second solution involves making a Python package and then upgrading that Python package whenever I need to make a change to this script.
That&rsquo;s definitely going to be painful.</p>

<h2>The solution: let uv handle it</h2>

<p>A few months ago, my friend <a href="https://micro.webology.dev">Jeff Triplett</a> showed me that <code>uv</code> can work within a shebang line and can read a special comment at the top of a Python file that tells uv which Python version to run a script with and which dependencies it needs.</p>

<p>Here&rsquo;s a shebang line that would work for the above script:</p>

<pre><code class="python">#!/usr/bin/env -S uv run --script
# /// script
# requires-python = "&gt;=3.12"
# dependencies = [
#     "ffmpeg-normalize",
# ]
# ///
</code></pre>

<p>That tells uv that this script should be run on Python 3.12 and that it depends on the <code>ffmpeg-normalize</code> package.</p>

<p>Neat&hellip; but what does that do?</p>

<p>Well, the first time this script is run, uv will create a virtual environment for it, install <code>ffmpeg-normalize</code> into that venv, and then run the script:</p>

<pre><code class="bash">$ normalize
Reading inline script metadata from `/home/trey/bin/normalize`
Installed 4 packages in 5ms
usage: normalize [-h] video_file output_file
normalize: error: the following arguments are required: video_file, output_file
</code></pre>

<p>Every time the script is run after that, uv finds and reuses the same virtual environment:</p>

<pre><code class="bash">$ normalize
Reading inline script metadata from `/home/trey/bin/normalize`
usage: normalize [-h] video_file output_file
normalize: error: the following arguments are required: video_file, output_file
</code></pre>

<p>Each time uv runs the script, it quickly checks that all listed dependencies are properly installed with their correct versions.</p>

<p>Another script I use this for is <a href="https://github.com/treyhunner/dotfiles/blob/main/bin/caption">caption</a>, which uses whisper (via the Open AI API) to quickly caption my screencasts just after I record and edit them.
The caption quality very rarely need more than a very minor edit or two (for my personal accent of English at least) even for technical like &ldquo;dunder method&rdquo; and via the API the captions generate very quickly.</p>

<p>See the <a href="https://packaging.python.org/en/latest/specifications/inline-script-metadata/">inline script metadata</a> page of the Python packaging users guide for more details on that format that uv is using (honestly I always just copy-paste an example myself).</p>

<h2>uv everywhere?</h2>

<p>I haven&rsquo;t yet fully embraced uv everywhere.</p>

<p>I don&rsquo;t manage my Python projects with uv, though I do use it to create new virtual environments (with <code>--seed</code> to ensure the <code>pip</code> command is available) as a <a href="https://treyhunner.com/2024/10/switching-from-virtualenvwrapper-to-direnv-starship-and-uv/">virtualenvwrapper replacement, along with direnv</a>.</p>

<p>I have also started using <a href="https://docs.astral.sh/uv/concepts/tools/">uv tool</a> as a <a href="https://pipx.pypa.io">pipx</a> replacement and I&rsquo;ve considered replacing <a href="https://pipx.pypa.io/stable/">pyenv</a> with uv.</p>

<h2>uv instead of pipx</h2>

<p>When I want to install a command-line tool that happens to be Python powered, I used to do this:</p>

<pre><code class="bash">$ pipx countdown-cli
</code></pre>

<p>Now I do this instead:</p>

<pre><code class="bash">$ uv tool install countdown-cli
</code></pre>

<p>Either way, I end up with a <code>countdown</code> script in my <code>PATH</code> that automatically uses its own separate virtual environment for its dependencies:</p>

<pre><code class="bash">$ countdown --help
Usage: countdown [OPTIONS] DURATION

  Countdown from the given duration to 0.

  DURATION should be a number followed by m or s for minutes or seconds.

  Examples of DURATION:

  - 5m (5 minutes)
  - 45s (45 seconds)
  - 2m30s (2 minutes and 30 seconds)

Options:
  --version  Show the version and exit.
  --help     Show this message and exit.
</code></pre>

<h2>uv instead of pyenv</h2>

<p>For years, I&rsquo;ve used pyenv to manage multiple versions of Python on my machine.</p>

<pre><code class="bash">$ pyenv install 3.13.0
</code></pre>

<p>Now I could do this:</p>

<pre><code class="bash">$ uv python install --preview 3.13.0
</code></pre>

<p>Or I could make a <code>~/.config/uv/uv.toml</code> file containing this:</p>

<pre><code>preview = true
</code></pre>

<p>And then run the same thing without the <code>--preview</code> flag:</p>

<pre><code class="bash">$ uv python install 3.13.0
</code></pre>

<p>This puts a <code>python3.10</code> binary in my <code>~/.local/bin directory</code>, which is on my <code>PATH</code>.</p>

<p>Why &ldquo;preview&rdquo;?
Well, without it uv doesn&rsquo;t (<a href="https://github.com/astral-sh/uv/issues/6265#issuecomment-2461107903">yet</a>) place <code>python3.13</code> in my <code>PATH</code> by default, as this feature is currently in testing/development.</p>

<h2>Self-installing Python scripts are the big win</h2>

<p>I still prefer pyenv for its ability to <a href="https://treyhunner.com/2024/05/installing-a-custom-python-build-with-pyenv/">install custom Python builds</a> and I don&rsquo;t have a preference between <code>uv tool</code> and <code>pipx</code>.</p>

<p>The biggest win that I&rsquo;ve experienced from uv so far is the ability to run an executable script and have any necessary dependencies install automagically.</p>

<p>This doesn&rsquo;t mean that I <em>never</em> make Python package out of my Python scripts anymore&hellip; but I do so much more rarely.
I used to create a Python package out of a script as soon as it required third-party dependencies.
Now my &ldquo;do I <em>really</em> need to turn this into a proper package&rdquo; bar is set much higher.</p>
]]></content>
  </entry>
  
</feed>
