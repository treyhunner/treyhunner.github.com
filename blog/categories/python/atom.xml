<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Trey Hunner]]></title>
  <link href="https://treyhunner.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="https://treyhunner.com/"/>
  <updated>2021-10-08T08:23:50-07:00</updated>
  <id>https://treyhunner.com/</id>
  <author>
    <name><![CDATA[Trey Hunner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What's great about Python 3.10?]]></title>
    <link href="https://treyhunner.com/2021/10/whats-great-about-python-3-dot-10/"/>
    <updated>2021-10-08T08:30:30-07:00</updated>
    <id>https://treyhunner.com/2021/10/whats-great-about-python-3-dot-10</id>
    <content type="html"><![CDATA[<p>What changed in Python 3.10 and which of those changes matter for you?</p>

<p>I&rsquo;ve spent this week playing with Python 3.10.
I&rsquo;ve primarily been working on solutions to Python Morsels exercises that embrace new Python 3.10 features.
I&rsquo;d like to share what I&rsquo;ve found.</p>

<h2>Easier troubleshooting with improved error messages</h2>

<p>The biggest Python 3.10 improvements by far are all related improved error messages.
I make typos all the time.
Error messages that help me quickly figure out what&rsquo;s wrong are <em>really</em> important.</p>

<p>I&rsquo;ve already grown accustom to the process of deciphering many of Python&rsquo;s more cryptic error messages.
So while improved error messages <em>are</em> great for me, this change is <em>especially</em> big for new Python learners.</p>

<p>When I teach an introduction to Python course, some of the most common errors I help folks debug are:</p>

<ol>
<li>Missing colons at the end of a block of code</li>
<li>Missing indentation or incorrect indentation in a block of code</li>
<li>Misspelled variable names</li>
<li>Brackets and braces that were never closed</li>
</ol>


<p>Python 3.10 makes all of these errors (and more) much clearer for Python learners.</p>

<p>New Python users often forget to put a <code>:</code> to begin their code blocks.
In Python 3.9 users would see this cryptic error message:</p>

<pre><code class="bash">$ python3.10 temp.py 70
  File "/home/trey/temp.py", line 4
    if temperature &lt; 65
                       ^
SyntaxError: invalid syntax
</code></pre>

<p>Python 3.10 makes this much clearer:</p>

<pre><code class="bash">$ python3.10 temp.py 70
  File "/home/trey/temp.py", line 4
    if temperature &lt; 65
                       ^
SyntaxError: expected ':'
</code></pre>

<p>Indentation errors are clearer too (that <code>after 'if' statement on line 4</code> is new):</p>

<pre><code class="bash">$ python3.10 temp.py 70
  File "/home/trey/temp.py", line 5
    print("Too cold")
    ^
IndentationError: expected an indented block after 'if' statement on line 4
</code></pre>

<p>And incorrect variable and attribute names now show a suggestion:</p>

<pre><code class="bash">$ python3.10 temp.py 70
Traceback (most recent call last):
  File "/home/trey/temp.py", line 4, in &lt;module&gt;
    if temparature &lt; 65:
NameError: name 'temparature' is not defined. Did you mean: 'temperature'?
</code></pre>

<p>I&rsquo;m really excited about that one because I make typos in variable names pretty much daily.</p>

<p>The error message shown for unclosed brackets, braces, and parentheses is also <em>much</em> more helpful.</p>

<p>Python used to show us the <em>next</em> line of code after an unclosed brace:</p>

<pre><code class="bash">$ python3.9 temp.py 70
  File "/home/trey/temp.py", line 6
    elif temperature &gt; 80:
    ^
SyntaxError: invalid syntax
</code></pre>

<p>Now it instead points to the opening brace that was left unclosed:</p>

<pre><code class="bash">$ python3.10 temp.py 70
  File "/home/trey/temp.py", line 5
    print("Too cold"
         ^
SyntaxError: '(' was never closed
</code></pre>

<p>You can find more details on these improved error messages in the <a href="https://docs.python.org/3.10/whatsnew/3.10.html#better-error-messages">better error messages</a> section of the &ldquo;What&rsquo;s new in Python 3.10&rdquo; documentation.</p>

<p>While Python 3.10 does include other changes (read on if you&rsquo;re interested), these improved error messages are the one 3.10 improvement that <strong>all Python users will notice</strong>.</p>

<h2>IDLE is more visually consistent</h2>

<p>Here&rsquo;s another feature that affects new Python users: the look of IDLE <a href="https://twitter.com/sjoerdjob/status/1446172628922867712">improved a bit</a>.
IDLE now uses spaces for indentation instead of tabs (unlike the built-in REPL) and the familiar <code>...</code> in front of REPL continuation lines is now present in IDLE within a sidebar.</p>

<p>Before IDLE looked like this:</p>

<p><img src="/images/idle3.9.png" title="An IDLE Shell window with an if-else block that has no &hellip; prefixes and uses tabs for indentation" ></p>

<p>Now IDLE looks like this:</p>

<p><img src="/images/idle3.10.png" title="An IDLE Shell window with an if-else block that has &hellip; prefixes and uses 4 spaces for indentation" ></p>

<p>Looks a lot more like the Python REPL on the command-prompt, right?</p>

<h2>Length-checking for the zip function</h2>

<p>There&rsquo;s a Python Morsels exercise called <code>strict_zip</code>.
It&rsquo;s now become a &ldquo;re-implement this already built-in functionality&rdquo; exercise.
Still useful for the sake of learning how <code>zip</code> is implemented, but no longer useful day-to-day code.</p>

<p>Why isn&rsquo;t it useful?
Because <code>zip</code> now accepts a <code>strict</code> argument!
So if you&rsquo;re working with iterables that <em>might</em> be different lengths but <em>shouldn&rsquo;t</em> be, passing <code>strict=True</code> is now <a href="https://docs.python.org/3.10/library/functions.html#zip">recommended when using zip</a>.</p>

<h2>Structural pattern matching</h2>

<p>The big Python 3.10 feature everyone is talking about is structural pattern matching.
This feature is very powerful but probably not very relevant for most Python users.</p>

<p>One important note about this feature: <code>match</code> and <code>case</code> are still allowable variable names so all your existing code should keep working (they&rsquo;re <a href="https://www.python.org/dev/peps/pep-0622/#the-match-statement">soft keywords</a>).</p>

<h3>Matching the shape and contents of an iterable</h3>

<p>You could look at the new <code>match</code>/<code>case</code> statement as <strong>like tuple unpacking with a lot more than just length-checking</strong>.</p>

<p>Compare this snippet of code <a href="https://github.com/django/django/blob/main/django/templatetags/i18n.py#L243..L246">from a Django template tag</a>:</p>

<pre><code class="python">    args = token.split_contents()
    if len(args) != 5 or args[1] != 'for' or args[3] != 'as':
        raise TemplateSyntaxError("'%s' requires 'for string as variable' (got %r)" % (args[0], args[1:]))
    return GetLanguageInfoNode(parser.compile_filter(args[2]), args[4])
</code></pre>

<p>To the same snippet refactored to use structural pattern matching:</p>

<pre><code class="python">    match token.split_contents():
        case [name, "for", code "as" info]:
            return GetLanguageInfoNode(parser.compile_filter(code), info)
        case [name, *rest]:
            raise TemplateSyntaxError(f"'{name}' requires 'for string as variable' (got {rest!r})")
</code></pre>

<p>Notice that the second approach allows us to describe both the number of variables we&rsquo;re unpacking our data into and the names to unpack into (just like tuple unpacking) while also matching the second and third values against the strings <code>for</code> and <code>as</code>.
If those strings don&rsquo;t show up in the expected positions, we raise an appropriate exception.</p>

<p>Structural pattern matching is <em>really</em> handy for implementing simple parsers, like Django&rsquo;s template language.
I&rsquo;m looking forward to seeing Django&rsquo;s refactored template code in 2025 (after Python 3.9 support ends).</p>

<h3>Complex type checking</h3>

<p>Structural pattern matching also excels at type checking.
Strong type checking is usually discouraged in Python, but it does come crop up from time to time.</p>

<p>The most common place I see <code>isinstance</code> checks is in operator overloading dunder methods (<code>__eq__</code>, <code>__lt__</code>, <code>__add__</code>, <code>__sub__</code>, etc).
I&rsquo;ve already upgraded some Python Morsels solutions to compare and contrast <code>match</code>-<code>case</code> and <code>isinstance</code> and I&rsquo;m finding it more verbose in some cases but also occasionally somewhat clearer.</p>

<p>For example this code snippet (again <a href="https://github.com/django/django/blob/3.2/django/utils/formats.py#L195..L209">from Django</a>):</p>

<pre><code class="python">    if isinstance(value, str):  # Handle strings first for performance reasons.
        return value
    elif isinstance(value, bool):  # Make sure booleans don't get treated as numbers
        return str(value)
    elif isinstance(value, (decimal.Decimal, float, int)):
        if use_l10n is False:
            return str(value)
        return number_format(value, use_l10n=use_l10n)
    elif isinstance(value, datetime.datetime):
        return date_format(value, 'DATETIME_FORMAT', use_l10n=use_l10n)
    elif isinstance(value, datetime.date):
        return date_format(value, use_l10n=use_l10n)
    elif isinstance(value, datetime.time):
        return time_format(value, 'TIME_FORMAT', use_l10n=use_l10n)
    return value
</code></pre>

<p>Can be replaced by this code snippet instead:</p>

<pre><code class="python">    match value:
        case str():  # Handle strings first for performance reasons.
            return value
        case bool():  # Make sure booleans don't get treated as numbers
            return str(value)
        case decimal.Decimal() | float() | int():
            if use_l10n is False:
                return str(value)
            return number_format(value, use_l10n=use_l10n)
        case datetime.datetime():
            return date_format(value, 'DATETIME_FORMAT', use_l10n=use_l10n)
        case datetime.date():
            return date_format(value, use_l10n=use_l10n)
        case datetime.time():
            return time_format(value, 'TIME_FORMAT', use_l10n=use_l10n)
        case _:
            return value
</code></pre>

<p>Note how much shorter each condition is.
That <code>case</code> syntax definitely takes some getting used to, but I do find it a bit easier to read in long <code>isinstance</code> chains like this.</p>

<h2>Bisecting with a key</h2>

<p>Python&rsquo;s <code>bisect</code> module is really handy for quickly finding an item within a sorted list.</p>

<p>For me, the <code>bisect</code> module is mostly a reminder of how infrequently I need to care about the <a href="https://en.wikipedia.org/wiki/Binary_search_algorithm">binary search</a> algorithms I learned in Computer Science classes.
But for those times you do need to find an item in a sorted list, <code>bisect</code> is great.</p>

<p>As of Python 3.10, all the binary search helpers in the <code>bisect</code> module now accept a <code>key</code> argument.
So you can now quickly search within a case insensitively-sorted list of strings for the string you&rsquo;re looking for.</p>

<pre><code class="pycon">&gt;&gt;&gt; fruits = sorted(['Watermelon','loquat', 'Apple', 'jujube'], key=str.lower)
&gt;&gt;&gt; fruits
['Apple', 'jujube', 'loquat', 'Watermelon']
&gt;&gt;&gt; import bisect
&gt;&gt;&gt; bisect.insort(fruits, 'Lemon', key=str.lower)
&gt;&gt;&gt; fruits
['Apple', 'jujube', 'Lemon', 'loquat', 'Watermelon']
&gt;&gt;&gt; i = bisect.bisect(fruits, 'lime', key=str.lower)
&gt;&gt;&gt; fruits[i] == 'lime'
False
&gt;&gt;&gt; fruits[i]
'loquat'
</code></pre>

<p>Doing a search that involved a <code>key</code> function was <a href="https://stackoverflow.com/a/55007379/98187">surprisingly tricky</a> before Python 3.10.</p>

<h2>Slots for data classes</h2>

<p>Have a data class (especially a frozen one) and want to make it more memory-efficient?
You can add a <code>__slots__</code> attribute but you&rsquo;ll need to type all the field names out yourself.</p>

<pre><code class="python">from dataclasses import dataclass

@dataclass
class Point:
    __slots__ = ('x', 'y')
    x: float
    y: float
</code></pre>

<p>In Python 3.10 you can now use <code>slots=True</code> instead:</p>

<pre><code class="python">from dataclasses import dataclass

@dataclass(slots=True)
class Point:
    x: float
    y: float
</code></pre>

<p>This feature was actually included in the original dataclass implementation but <a href="https://github.com/ericvsmith/dataclasses/issues/28">removed</a> before Python 3.7&rsquo;s release (Guido suggested including it in a later Python version if users expressed interest and we did).</p>

<p>Creating a dataclass with <code>__slots__</code> added manually <a href="https://stackoverflow.com/questions/50180735/how-can-dataclasses-be-made-to-work-better-with-slots">won&rsquo;t allow for default field values</a>, which is why <code>slots=True</code> is so handy.
There&rsquo;s a very smaller quirk with <code>slots=True</code> though: <code>super</code> calls break when <code>slots=True</code> is used because this causes a <em>new</em> class object to be created which breaks the <a href="https://stackoverflow.com/questions/19608134/why-is-python-3-xs-super-magic/19609168#19609168">magic of super</a>.
But unless you&rsquo;re using calling <code>super().__setattr__</code> in the <code>__post_init__</code> method of a frozen dataclass <a href="https://stackoverflow.com/a/54119384/98187">instead of</a> calling <code>object.__setattr__</code>, this quirk likely won&rsquo;t affect you.</p>

<h3>Type annotation improvements</h3>

<p>If you use type annotations, <a href="https://docs.python.org/3.10/whatsnew/3.10.html#pep-604-new-type-union-operator">type unions</a> are even easier now using the <code>|</code> operator (in addition to <code>typing.Union</code>).
Other big additions in type annotation land include <a href="https://docs.python.org/3.10/whatsnew/3.10.html#pep-612-parameter-specification-variables">parameter specification variables</a>, <a href="https://docs.python.org/3.10/whatsnew/3.10.html#pep-613-typealias">type aliases</a>, and <a href="https://docs.python.org/3.10/whatsnew/3.10.html#pep-647-user-defined-type-guards">user-defined type guards</a>.
I still don&rsquo;t use type annotations often, but these features are a pretty big deal for Python devs who do.</p>

<p>Also if you&rsquo;re introspecting annotations, calling the <code>inspect.get_annotations</code> function is <a href="https://docs.python.org/3/howto/annotations.html#accessing-the-annotations-dict-of-an-object-in-python-3-10-and-newer">recommended</a> over accessing <code>__annotations__</code> directly or calling the <code>typing.get_type_hints</code> function.</p>

<h3>Checking for default file encoding issues</h3>

<p>You can also now ask Python to emit warnings when you fail to specify an explicit file encoding (this is <em>very</em> relevant when writing cross operating system compatible code).</p>

<p>Just run Python with <code>-X warn_default_encoding</code> and you&rsquo;ll see a loud error message if you&rsquo;re not specifying encodings everyone you open files up:</p>

<pre><code class="bash">$ python3.10 -X warn_default_encoding count_lines.py declaration-of-independence.txt
/home/trey/count_lines.py:3: EncodingWarning: 'encoding' argument not specified
  with open(sys.argv[1]) as f:
67
</code></pre>

<h2>Plus lots more</h2>

<p>The changes above are the main ones I&rsquo;ve found useful when updating Python Morsels exercises over the last week.
There are many more changes in Python 3.10 though.</p>

<p>Here are a few more things I looked into, and plan to play with later:</p>

<ul>
<li><a href="https://docs.python.org/3.10/whatsnew/3.10.html#keyword-only-fields">keyword-only</a> dataclass fields</li>
<li>The <code>fileinput.input</code> (handy for handling standard input <em>or</em> a file) function <a href="https://docs.python.org/3.10/whatsnew/3.10.html#fileinput">now accepts</a> an <code>encoding</code> argument</li>
<li><code>importlib</code> <a href="https://docs.python.org/3.10/whatsnew/3.10.html#deprecated">deprecations</a>: some of my dynamic module importing code was using features that are now deprecated in Python 3.10 (you&rsquo;ll notice obvious deprecation warnings if your code needs updating too)</li>
<li><a href="https://docs.python.org/3.10/library/stdtypes.html#dict-views">Dictionary views</a> have a <code>mapping</code> attribute now: if you&rsquo;re making your own dictionary-like objects, you should probably add a <code>mapping</code> attribute to your <code>keys</code>/<code>values</code>/<code>items</code> views as well (this will definitely crop up in Python Morsels exercises in the future)</li>
<li>When using multiple context managers in a single <code>with</code> block, parentheses can now be used to wrap them onto the next line (this was actually added in Python 3.9 <a href="https://bugs.python.org/issue12782">but unofficially</a>)</li>
<li>The names of <a href="https://docs.python.org/3.10/library/sys.html#sys.stdlib_module_names">standard library modules</a> and built-in modules are now included in <code>sys.stdlib_module_names</code> and <code>sys.builtin_module_names</code>: I&rsquo;ve occasionally needed to distinguish between third party and standard library modules dynamically and this makes that a lot easier</li>
<li><code>sys.orig_argv</code> includes the <a href="https://docs.python.org/3.10/library/sys.html#sys.orig_argv">full list of command-line arguments</a> (including the Python interpreter and all arguments passed to it) which could be useful when inspecting how your Python process was launched or when re-launching your Python process with the same arguments</li>
</ul>


<h2>Summary</h2>

<p>Structural pattern matching is great and the various other syntax, standard library, and builtins improvements are lovely too.
But the biggest improvement by far are the new error messages.</p>

<p>And you know what&rsquo;s even better news than the new errors in Python 3.10?
<a href="https://docs.python.org/3.11/whatsnew/3.11.html#enhanced-error-locations-in-tracebacks">Python 3.11 will include even better error messages</a>!</p>

<h2>Deepen your Python skills every week</h2>

<p>If you&rsquo;d like to <strong>deepen your Python skills</strong> and finding excuses to try out new Python features, <a href="https://www.pythonmorsels.com/">join Python Morsels</a>.</p>

<p>Python Morsels currently includes <strong>170 Python exercises</strong> and <strong>80 Python screencasts</strong> with a new short screencast/article hybrid added each week.
This service is all about hands-on skill building (we learn and grow through doing, not just reading/watching).</p>

<p>I&rsquo;d love for you to <a href="https://www.pythonmorsels.com/">come learn Python with me</a>! 💖</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Cyber Monday Sales 2020]]></title>
    <link href="https://treyhunner.com/2020/11/python-cyber-monday-sales/"/>
    <updated>2020-11-27T13:20:00-08:00</updated>
    <id>https://treyhunner.com/2020/11/python-cyber-monday-sales</id>
    <content type="html"><![CDATA[<p>This post is a compilation of different Cyber Monday deals I&rsquo;ve found related to Python and Python learning.</p>

<h3>Python Morsels weekly screencasts</h3>

<p>Let&rsquo;s get the self-promotion out of the way first.</p>

<p>I <a href="https://treyhunner.com/2020/11/short-python-screencasts-for-$50-slash-year/">announced a couple days ago</a> that you can now get <strong>one year of Python screencasts</strong> as well as mini-blog posts for <strong>$50/year</strong> (with at least one new screencast each week).
This also includes one Python exercise each month.
I haven&rsquo;t set a concrete end date to this &ldquo;sale&rdquo; (it&rsquo;s actually more of a newly announced service that will be increasing in price in early 2021).</p>

<p>You can <a href="https://treyhunner.com/2020/11/short-python-screencasts-for-$50-slash-year/">find my article on the Python Morsels screencasts sale here</a>.</p>

<h3>Talk Python course bundle</h3>

<p>You can get every Talk Python course that&rsquo;s been made so far <a href="https://training.talkpython.fm/black-friday-2020">for just $250</a>.
There&rsquo;s 28 courses currently and the bundle also includes courses published through October 2021.</p>

<h3>PyBites sales</h3>

<p>PyBites is offering PyBites Premium+ Access for 2 months for $24 and Introductory Bites Course for $15 (both effectively 70% off) during their <a href="https://pybit.es/blackfriday">Black Friday and Cyber Monday sale</a>.</p>

<h3>Reuven Lerner&rsquo;s Python courses and exercises</h3>

<p>Reuven Lerner is offering <a href="https://store.lerner.co.il/?coupon=BF2020">40% off all his products</a> (Python courses, Weekly Python Exercises, and product bundles) through Monday.</p>

<h3>Matt Harrison&rsquo;s Modern Python workshop</h3>

<p>Matt Harrison&rsquo;s <a href="https://mattharrison.podia.com/modern-python-a-hands-on-approach-to-idiomatic-python-projects">Modern Python workshop</a> is $500 (50%) off through Monday with coupon code EARLYBIRD and and <a href="https://mattharrison.podia.com/courses">his other courses</a> (including Python data science and pandas courses) are 40% off through Monday with code BLACKFRIDAY.</p>

<h3>Speed Up Your Django book</h3>

<p>Adam Johnson&rsquo;s <a href="https://adamj.eu/tech/2020/11/28/speed-up-your-django-tests-cyber-monday-deal/">Speed Up Your Django book</a> is 50% off through Monday.
Python Morsels is a Django-powered site and I could use this book, so I&rsquo;ll be buying a copy for myself as well.</p>

<h3>Mike Driscoll&rsquo;s Python books</h3>

<p>Mike Driscoll is <a href="https://www.blog.pythonlibrary.org/2020/11/25/black-friday-cyber-monday-comes-early-in-2020/">offering a sale on all his Python books</a> (each is $15 or less during the sale).</p>

<h3>Brian Okken&rsquo;s Pytest book (Pragmatic Bookshelf)</h3>

<p>Pragmatic Bookshelf is offering 40% off all books with the code turkeysale2020, including <a href="https://pragprog.com/titles/bopytest/python-testing-with-pytest/">Brian Okken&rsquo;s Pytest book</a> which is just under $15 with the coupon.</p>

<h3>No Starch Press Python books</h3>

<p>No Starch Press is also running <a href="https://nostarch.com/catalog/python">a 33% off sale</a> on their Python books (with books by Al Sweigart, Eric Matthes, and many others), though the sale ends before Monday.</p>

<h3>Real Python subscription</h3>

<p>Real Python is offering an annual subscription for <a href="https://realpython.com/account/join/?c=blackfriday2020">$200/year</a> and 20% of that goes to the Python Software Foundation.</p>

<h3>Pluralsight subscription</h3>

<p>We&rsquo;re now moving into &ldquo;I&rsquo;m really not actually sure what you&rsquo;re getting&rdquo; sales.
Pluralsight is running a Black Friday sale this year: <a href="https://www.pluralsight.com/offer/2020/bf-cm-40-off">$180/year for a subscription</a>.
I&rsquo;m not sure whether this is one year for $180 but the subscription renews at the regular price of $300/year or whether it&rsquo;s $180/year indefinitely (the fact that they don&rsquo;t specify is a bit concerning).</p>

<h3>100 Days of Code Python and other Udemy courses</h3>

<p>There&rsquo;s a <a href="https://www.udemy.com/course/100-days-of-code/?couponCode=DCF8D1FDCAA3CE660C34">100 Days of Code Python course</a> course on sale for just $13 on Udemy through mid next week.
I haven&rsquo;t heard anything about it but it looks like it includes <em>a lot</em>.</p>

<p>There are also various other Udemy Python courses on sale, like <a href="https://www.udemy.com/course/automate/">Automate The Boring Stuff</a>, though many of these sales end within the next 24 hours (through Black Friday only).</p>

<h3>Lots of courses, books, screencasts, exercises, live workshops on sale</h3>

<p>Don&rsquo;t go too wild on sales.</p>

<p>I know that I wouldn&rsquo;t want anyone subscribing to Python Morsels unless they think they&rsquo;ll actually commit at least an hour over the next year to watch screencasts.
I imagine many other Python educators feel similar about purchases that go to waste.</p>

<p>Look through the sales above and think about what you could use.
What works well with the way you learn and what would you actually make a habit to use after you&rsquo;ve purchased it?</p>

<p>If you have a question about the <a href="https://treyhunner.com/2020/11/short-python-screencasts-for-$50-slash-year/">Python Morsels screencasts/exercises</a>, email me.
If you have questions about other sales, email the folks running those sales (make sure to do it now in case they take a day or two to get back to you).</p>

<p>Also if you&rsquo;ve found other Python sales I&rsquo;ve missed above, please comment or <a href='m&#97;&#105;l&#116;o&#58;he&#108;p&#64;&#112;%7&#57;th%6Fnmo&#114;s%6&#53;ls&#46;&#99;&#111;m'>email me</a> to let me know about them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Short weekly Python screencasts for $50/year]]></title>
    <link href="https://treyhunner.com/2020/11/short-python-screencasts-for-$50-slash-year/"/>
    <updated>2020-11-25T09:00:00-08:00</updated>
    <id>https://treyhunner.com/2020/11/short-python-screencasts-for-$50-slash-year</id>
    <content type="html"><![CDATA[<p>I&rsquo;m offering a service to help <strong>life-long Python learners</strong> manufacture ah-ha moments.</p>

<p>A few years ago at my local Python meetup I was discussing how function arguments work (they&rsquo;re <a href="https://jeffknupp.com/blog/2012/11/13/is-python-callbyvalue-or-callbyreference-neither/">call-by-assignment</a> a.k.a. <a href="https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing">call by object</a>).
A friend spoke up to clarify: &ldquo;but it doesn&rsquo;t work that way for numbers and strings, right?&rdquo;
I said &ldquo;I&rsquo;m pretty sure it works like this for everything&rdquo;.</p>

<p>After some quiet Googling, my friend declared &ldquo;I&rsquo;ve been using Python for over a decade and I never knew it worked this way&rdquo;.
They&rsquo;d suddenly realized <em>their mental model of the Python world</em> differed from Python&rsquo;s model of itself.
They&rsquo;d experienced an &ldquo;ah-ha moment&rdquo;.</p>

<p>I&rsquo;m going to publish <strong>at least one short Python screencast every week</strong> to help <em>manufacture</em> <strong>Python ah-ha moments</strong>.
These will be single-topic screencasts that <strong>won&rsquo;t waste your time</strong>.</p>

<p>So, if you&rsquo;re a life-long learner who uses Python and doesn&rsquo;t have a wealth of time for learning, read on.</p>

<h3>What is this?</h3>

<p>With this subscription you&rsquo;ll receive access to a growing archive of Python screencasts (<strong>at least one new screencast each week</strong>).
If you enjoy my <a href="https://treyhunner.com/blog/categories/python/">articles</a> or my <a href="https://treyhunner.com/talks">talks and tutorials</a>, you&rsquo;ll probably enjoy the format I use in my screencasts.</p>

<p><strong>Don&rsquo;t like video?</strong> That&rsquo;s okay!
Each screencast is captioned and includes <strong>a mini-blog post</strong> which is nearly <strong>a text-based equivalent</strong> to the video.</p>

<h3>What are the screencasts like?</h3>

<p>Each screencast will be <strong>concise</strong> and short, under 6 minutes.
Examples include <a href="https://www.pythonmorsels.com/topics/variables-are-pointers/">variables are pointers</a> (2 mins) and <a href="https://www.pythonmorsels.com/topics/2-types-change/">the 2 types of &ldquo;change&rdquo;</a> (3 mins), plus <a href="https://www.pythonmorsels.com/screencasts/">others here</a>.</p>

<p><a href="https://www.pythonmorsels.com/screencasts/"><img src="/images/screencasts.png"></a></p>

<p><strong>What topics will the screencasts be on?</strong>
Functions, classes, scope, operator overloading, decorators, exception handling, and more.
Screencasts will focus on Python core, not third-party libraries (no Pandas, Numpy, or Django).
Topics will range from beginner to advanced.</p>

<p><strong>Will the screencasts be freely shareable?</strong>
Some screencasts will be limited to subscribers and some will be available to non-subscribers, with a yet-to-be-decided breakdown between the two.</p>

<h3>You&rsquo;ll also get get occasional Python exercises</h3>

<p>This weekly screencast subscription is part of <a href="https://www.pythonmorsels.com/">Python Morsels</a>, an exercise subscription service I run.
In addition to weekly screencasts, you&rsquo;ll also get <strong>one Python exercise each month</strong>.</p>

<p>If you&rsquo;ve taken <a href="https://treyhunner.com/talks/#tutorials">my PyCon tutorials</a> or attended <a href="https://truthful.technology/">my trainings</a>, you know exercises are the best part of my curriculum.
I spend a lot of time making new exercises because we learn by attempting to retrieve information from our heads (through practice), not by putting information <em>into</em> our heads.</p>

<p>Python Morsels exercises are both interesting and <strong>complex but not complicated</strong>.
You don&rsquo;t need to work through the monthly exercises, but I do recommend it.</p>

<h3>This subscription is $50/year for a limited time</h3>

<p>I&rsquo;m offering this service for a comparatively low price of $50/year because I don&rsquo;t have a large archive of screencasts yet.
I have plans to increase the price in 2021, but as an early user <strong>your price will always be $50/year</strong>.</p>

<p>If you&rsquo;re not sure whether this is for you, <a href="https://www.pythonmorsels.com/accounts/signup/?plan=9">sign up to try it out for free</a>.</p>

<h3>Why pay for this when there&rsquo;s a lot of great free Python videos out there?</h3>

<p>Why am I charging money for this?</p>

<p>There&rsquo;s really one reason: <strong>you&rsquo;re trading money for time</strong>.
This is a tradeoff I&rsquo;ve grown an appreciation for (one which would baffle a younger version of myself).</p>

<p>This time-money tradeoff comes in a few forms:</p>

<ol>
<li>You will never see any ads on Python Morsels: you&rsquo;re not the product, the screencasts are</li>
<li>No filler content or rambling (no ad revenue means no need for long videos)</li>
<li>I have unique expertise and perspective: teaching Python is my business and I&rsquo;m good at it</li>
</ol>


<p>Watch some of <a href="https://www.pythonmorsels.com/screencasts/">the current screencasts</a> before signing up.
If my teaching style isn&rsquo;t for you, that&rsquo;s okay!
But if my teaching style <em>is</em> for you, I think you&rsquo;ll find <strong>the next year&rsquo;s worth of screencasts</strong> will be worthwhile! 😁</p>

<h3>Student discounts? Team subscriptions? Other questions?</h3>

<p>My standard <a href="https://www.pythonmorsels.com/discounts/">discount policy</a> is income-tiered: if you make less than $60,000 USD annually, you&rsquo;re eligible.
I also offer situation-specific discounts, so please <strong>ask for a discount if you need one</strong>.</p>

<p>If you&rsquo;re paying through your employer, note that there are <strong>team subscriptions</strong> too.
Just <a href="https://form.jotform.com/201278113533043">fill out this form</a> to get started setting up a subscription for your team.</p>

<h3>Ready to try it out?</h3>

<p>Are you ready to subscribe to a growing collection of short and concise Python screencasts?
<a href="https://www.pythonmorsels.com/accounts/signup/?plan=9">Let&rsquo;s get learning</a>!</p>

<p><a href="https://www.pythonmorsels.com/accounts/signup/?plan=9" class="subscribe-btn form-big bright">Sign up for weekly Python screencasts now</a></p>

<p>Do you have another question that I haven&rsquo;t answered here?
Check out the <a href="https://pythonmorsels.helpscoutdocs.com/article/23-lite-plan">Lite plan FAQ</a> or <a href="m&#97;&#105;l&#116;o&#58;he&#108;p&#64;&#112;%7&#57;th%6Fnmo&#114;s%6&#53;ls&#46;&#99;&#111;m">email your question to he&#108;p&#64;pyt&#104;o&#110;morsel&#115;&#46;&#99;o&#109;</a>.</p>

<p>Happy learning!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Passing a function as an argument to another function in Python]]></title>
    <link href="https://treyhunner.com/2020/01/passing-functions-as-arguments/"/>
    <updated>2020-01-14T08:00:00-08:00</updated>
    <id>https://treyhunner.com/2020/01/passing-functions-as-arguments</id>
    <content type="html"><![CDATA[<p>One of the more hair-raising facts we learn in my introductory Python trainings is that <strong>you can pass functions into other functions</strong>.
You can pass functions around because in Python, <strong>functions are objects</strong>.</p>

<p>You likely don&rsquo;t need to know about this in your first week of using Python, but as you dive deeper into Python you&rsquo;ll find that it can be quite convenient to understand how to pass a function into another function.</p>

<p>This is part 1 of what I expect to be a series on the various properties of &ldquo;function objects&rdquo;.
This article focuses on what a new Python programmer should know and appreciate about <strong>the object-nature of Python&rsquo;s functions</strong>.</p>

<ul data-toc=".entry-content"></ul>


<h2>Functions can be referenced</h2>

<p>If you try to use a function without putting parentheses after it Python won&rsquo;t complain but it also won&rsquo;t do anything useful:</p>

<pre><code class="pycon">&gt;&gt;&gt; def greet():
...     print("Hello world!")
...
&gt;&gt;&gt; greet
&lt;function greet at 0x7ff246c6d9d0&gt;
</code></pre>

<p>This applies to methods as well (<a href="https://docs.python.org/3/glossary.html#term-method">methods</a> are functions which live on objects):</p>

<pre><code class="pycon">&gt;&gt;&gt; numbers = [1, 2, 3]
&gt;&gt;&gt; numbers.pop
&lt;built-in method pop of list object at 0x7ff246c76a80&gt;
</code></pre>

<p>Python is allowing us to <em>refer</em> to these <em>function objects</em>, the same way we might refer to a string, a number, or a <code>range</code> object:</p>

<pre><code class="pycon">&gt;&gt;&gt; "hello"
'hello'
&gt;&gt;&gt; 2.5
2.5
&gt;&gt;&gt; range(10)
range(0, 10)
</code></pre>

<p>Since we can refer to functions like any other object, we can point a variable to a function:</p>

<pre><code class="pycon">&gt;&gt;&gt; numbers = [2, 1, 3, 4, 7, 11, 18, 29]
&gt;&gt;&gt; gimme = numbers.pop
</code></pre>

<p>That <code>gimme</code> variable now points to the <code>pop</code> method on our <code>numbers</code> list.
So if we call <code>gimme</code>, it&rsquo;ll do the same thing that calling <code>numbers.pop</code> would have done:</p>

<pre><code class="pycon">&gt;&gt;&gt; gimme()
29
&gt;&gt;&gt; numbers
[2, 1, 3, 4, 7, 11, 18]
&gt;&gt;&gt; gimme(0)
2
&gt;&gt;&gt; numbers
[1, 3, 4, 7, 11, 18]
&gt;&gt;&gt; gimme()
18
</code></pre>

<p>Note that we <strong>didn&rsquo;t make a new function</strong>.
We&rsquo;ve just pointed the <code>gimme</code> variable name to the <code>numbers.pop</code> function:</p>

<pre><code class="pycon">&gt;&gt;&gt; gimme
&lt;built-in method pop of list object at 0x7ff246c76bc0&gt;
&gt;&gt;&gt; numbers.pop
&lt;built-in method pop of list object at 0x7ff246c76bc0&gt;
</code></pre>

<p>You can even store functions inside data structures and then reference them later:</p>

<pre><code class="pycon">&gt;&gt;&gt; def square(n): return n**2
...
&gt;&gt;&gt; def cube(n): return n**3
...
&gt;&gt;&gt; operations = [square, cube]
&gt;&gt;&gt; numbers = [2, 1, 3, 4, 7, 11, 18, 29]
&gt;&gt;&gt; for i, n in enumerate(numbers):
...     action = operations[i % 2]
...     print(f"{action.__name__}({n}):", action(n))
...
square(2): 4
cube(1): 1
square(3): 9
cube(4): 64
square(7): 49
cube(11): 1331
square(18): 324
cube(29): 24389
</code></pre>

<p>It&rsquo;s not very common to take a function and give it another name or to store it inside a data structure, but Python allows us to do these things because <strong>functions can be passed around, just like any other object</strong>.</p>

<h2>Functions can be passed into other functions</h2>

<p>Functions, like any other object, can be passed as an argument to another function.</p>

<p>For example we could define a function:</p>

<pre><code class="pycon">&gt;&gt;&gt; def greet(name="world"):
...     """Greet a person (or the whole world by default)."""
...     print(f"Hello {name}!")
...
&gt;&gt;&gt; greet("Trey")
Hello Trey!
</code></pre>

<p>And then pass it into the built-in <code>help</code> function to see what it does:</p>

<pre><code class="pycon">&gt;&gt;&gt; help(greet)
Help on function greet in module __main__:

greet(name='world')
    Greet a person (or the whole world by default).
</code></pre>

<p>And we can pass the function into itself (yes this is weird), which converts it to a string here:</p>

<pre><code class="pycon">&gt;&gt;&gt; greet(greet)
Hello &lt;function greet at 0x7f93416be8b0&gt;!
</code></pre>

<p>There are actually quite a few functions built-in to Python that are specifically meant to accept other functions as arguments.</p>

<p>The built-in <code>filter</code> function accepts two things as an argument: a <code>function</code> and an <code>iterable</code>.</p>

<pre><code class="pycon">&gt;&gt;&gt; help(filter)

 |  filter(function or None, iterable) --&gt; filter object
 |
 |  Return an iterator yielding those items of iterable for which function(item)
 |  is true. If function is None, return the items that are true.
</code></pre>

<p>The given iterable (list, tuple, string, etc.) is looped over and the given function is called on each item in that iterable: whenever the function returns <code>True</code> (or another truthy value) the item is included in the <code>filter</code> output.</p>

<p>So if we pass <code>filter</code> an <code>is_odd</code> function (which returns <code>True</code> when given an odd number) and a list of numbers, we&rsquo;ll get back all of the numbers we gave it which are odd.</p>

<pre><code class="pycon">&gt;&gt;&gt; numbers = [2, 1, 3, 4, 7, 11, 18, 29]
&gt;&gt;&gt; def is_odd(n): return n % 2 == 1
...
&gt;&gt;&gt; filter(is_odd, numbers)
&lt;filter object at 0x7ff246c8dc40&gt;
&gt;&gt;&gt; list(filter(is_odd, numbers))
[1, 3, 7, 11, 29]
</code></pre>

<p>The object returned from <code>filter</code> is <a href="https://treyhunner.com/2018/06/how-to-make-an-iterator-in-python/">a lazy iterator</a> so we needed to convert it to a <code>list</code> to actually see its output.</p>

<p>Since functions can be passed into functions, that also means that functions can accept another function as an argument.
The <code>filter</code> function assumes its first argument is a function.
You can think of the <code>filter</code> function as pretty much the same as this function:</p>

<pre><code class="python">def filter(predicate, iterable):
    return (
        item
        for item in iterable
        if predicate(item)
    )
</code></pre>

<p>This function expects the <code>predicate</code> argument to be a function (technically it could be any <a href="https://treyhunner.com/2019/04/is-it-a-class-or-a-function-its-a-callable/">callable</a>).
When we call that function (with <code>predicate(item)</code>), we pass a single argument to it and then check the truthiness of its return value.</p>

<h2>Lambda functions are an example of this</h2>

<p>A lambda expression is a special syntax in Python for creating an <a href="https://en.wikipedia.org/wiki/Anonymous_function">anonymous function</a>.
When you evaluate a <strong>lambda expression</strong> the object you get back is called a <strong>lambda function</strong>.</p>

<pre><code class="pycon">&gt;&gt;&gt; is_odd = lambda n: n % 2 == 1
&gt;&gt;&gt; is_odd(3)
True
&gt;&gt;&gt; is_odd(4)
False
</code></pre>

<p>Lambda functions are pretty much just like regular Python functions, with a few caveats.</p>

<p>Unlike other functions, lambda functions don&rsquo;t have a name (their name shows up as <code>&lt;lambda&gt;</code>).
They also can&rsquo;t have docstrings and they can only contain a single Python expression.</p>

<pre><code class="pycon">&gt;&gt;&gt; add = lambda x, y: x + y
&gt;&gt;&gt; add(2, 3)
5
&gt;&gt;&gt; add
&lt;function &lt;lambda&gt; at 0x7ff244852f70&gt;
&gt;&gt;&gt; add.__doc__
</code></pre>

<p>You can think of a lambda expression as a shortcut for making a function which will evaluate a single Python expression and return the result of that expression.</p>

<p>So defining a lambda expression doesn&rsquo;t actually evaluate that expression: it returns a function that can evaluate that expression later.</p>

<pre><code class="pycon">&gt;&gt;&gt; greet = lambda name="world": print(f"Hello {name}")
&gt;&gt;&gt; greet("Trey")
Hello Trey
&gt;&gt;&gt; greet()
Hello world
</code></pre>

<p>I&rsquo;d like to note that all three of the above examples of <code>lambda</code> are poor examples.
If you want a variable name to point to a function object that you can use later, you should use <code>def</code> to define a function: that&rsquo;s the <em>usual</em> way to define a function.</p>

<pre><code class="pycon">&gt;&gt;&gt; def is_odd(n): return n % 2 == 1
...
&gt;&gt;&gt; def add(x, y): return x + y
...
&gt;&gt;&gt; def greet(name="world"): print(f"Hello {name}")
...
</code></pre>

<p>Lambda expressions are for when we&rsquo;d like to define a function and <strong>pass it into another function immediately</strong>.</p>

<p>For example here we&rsquo;re using <code>filter</code> to get even numbers, but we&rsquo;re using a lambda expression so we don&rsquo;t have to define an <code>is_even</code> function before we use it:</p>

<pre><code class="pycon">&gt;&gt;&gt; numbers
[2, 1, 3, 4, 7, 11, 18, 29]
&gt;&gt;&gt; list(filter(lambda n: n % 2 == 0, numbers))
[2, 4, 18]
</code></pre>

<p>This is <em>the most appropriate</em> use of lambda expressions: passing a function into another function while defining that passed function all on one line of code.</p>

<p>As I&rsquo;ve written about in <a href="https://treyhunner.com/2018/09/stop-writing-lambda-expressions/">Overusing lambda expressions</a>, I&rsquo;m not a fan of Python&rsquo;s lambda expression syntax.
Whether or not you like this syntax, you should know that this syntax is just a shortcut for creating a function.</p>

<p>Whenever you see <code>lambda</code> expressions, keep in mind that:</p>

<ol>
<li>A lambda expression is a special syntax for creating a function and passing it to another function all on one line of code</li>
<li>Lambda functions are just like all other function objects: neither is more special than the other and both can be passed around</li>
</ol>


<p>All functions in Python can be passed as an argument to another function (that just happens to be the <em>sole</em> purpose of lambda functions).</p>

<h2>A common example: key functions</h2>

<p>Besides the built-in <code>filter</code> function, where will you ever see a function passed into another function?
Probably the most common place you&rsquo;ll see this in Python itself is with a <strong>key function</strong>.</p>

<p>It&rsquo;s a common convention for functions which accept an iterable-to-be-sorted/ordered to also accept a <a href="https://treyhunner.com/2018/04/keyword-arguments-in-python/">named argument</a> called <code>key</code>.
This <code>key</code> argument should be a function <a href="https://treyhunner.com/2019/04/is-it-a-class-or-a-function-its-a-callable/">or another callable</a>.</p>

<p>The <a href="https://treyhunner.com/2019/05/python-builtins-worth-learning/#sorted">sorted</a>, <a href="https://treyhunner.com/2019/05/python-builtins-worth-learning/#min_and_max">min</a>, and <a href="https://treyhunner.com/2019/05/python-builtins-worth-learning/#min_and_max">max</a> functions all follow this convention of accepting a <code>key</code> function:</p>

<pre><code class="pycon">&gt;&gt;&gt; fruits = ['kumquat', 'Cherimoya', 'Loquat', 'longan', 'jujube']
&gt;&gt;&gt; def normalize_case(s): return s.casefold()
...
&gt;&gt;&gt; sorted(fruits, key=normalize_case)
['Cherimoya', 'jujube', 'kumquat', 'longan', 'Loquat']
&gt;&gt;&gt; min(fruits, key=normalize_case)
'Cherimoya'
&gt;&gt;&gt; max(fruits, key=normalize_case)
'Loquat'
</code></pre>

<p>That <a href="https://docs.python.org/3/glossary.html#term-key-function">key function</a> is called for each value in the given iterable and the return value is used to order/sort each of the iterable items.
You can think of this key function as computing <strong>a comparison key</strong> for each item in the iterable.</p>

<p>In the above example our comparison key returns a lowercased string, so each string is compared by its lowercased version (which results in a case-insensitive ordering).</p>

<p>We used a <code>normalize_case</code> function to do this, but the same thing could be done using <code>str.casefold</code>:</p>

<pre><code class="pycon">&gt;&gt;&gt; fruits = ['kumquat', 'Cherimoya', 'Loquat', 'longan', 'jujube']
&gt;&gt;&gt; sorted(fruits, key=str.casefold)
['Cherimoya', 'jujube', 'kumquat', 'longan', 'Loquat']
</code></pre>

<p><strong>Note</strong>: That <code>str.casefold</code> trick is a bit odd if you aren&rsquo;t familiar with how classes work.
Classes store the <em>unbound methods</em> that will accept an instance of that class when called.
We normally type <code>my_string.casefold()</code> but <code>str.casefold(my_string)</code> is what Python translates that to.
That&rsquo;s a story for another time.</p>

<p>Here we&rsquo;re finding the string with the most letters in it:</p>

<pre><code class="pycon">&gt;&gt;&gt; max(fruits, key=len)
'Cherimoya'
</code></pre>

<p>If there are multiple maximums or minimums, the earliest one <em>wins</em> (that&rsquo;s how <code>min</code>/<code>max</code> work):</p>

<pre><code class="pycon">&gt;&gt;&gt; fruits = ['kumquat', 'Cherimoya', 'Loquat', 'longan', 'jujube']
&gt;&gt;&gt; min(fruits, key=len)
'Loquat'
&gt;&gt;&gt; sorted(fruits, key=len)
['Loquat', 'longan', 'jujube', 'kumquat', 'Cherimoya']
</code></pre>

<p>Here&rsquo;s a function which will return a 2-item tuple containing the length of a given string and the case-normalized version of that string:</p>

<pre><code class="python">def length_and_alphabetical(string):
    """Return sort key: length first, then case-normalized string."""
    return (len(string), string.casefold())
</code></pre>

<p>We could pass this <code>length_and_alphabetical</code> function as the <code>key</code> argument to <code>sorted</code> to sort our strings by their length first and then by their case-normalized representation:</p>

<pre><code class="pycon">&gt;&gt;&gt; fruits = ['kumquat', 'Cherimoya', 'Loquat', 'longan', 'jujube']
&gt;&gt;&gt; fruits_by_length = sorted(fruits, key=length_and_alphabetical)
&gt;&gt;&gt; fruits_by_length
['jujube', 'longan', 'Loquat', 'kumquat', 'Cherimoya']
</code></pre>

<p>This relies on the fact that <a href="https://treyhunner.com/2019/03/python-deep-comparisons-and-code-readability/">Python&rsquo;s ordering operators do deep comparisons</a>.</p>

<h2>Other examples of passing a function as an argument</h2>

<p>The <code>key</code> argument accepted by <code>sorted</code>, <code>min</code>, and <code>max</code> is just one common example of passing functions into functions.</p>

<p>Two more function-accepting Python built-ins are <code>map</code> and <code>filter</code>.</p>

<p>We&rsquo;ve already seen that <code>filter</code> will <em>filter</em> our list based on a given function&rsquo;s return value.</p>

<pre><code class="pycon">&gt;&gt;&gt; numbers
[2, 1, 3, 4, 7, 11, 18, 29]
&gt;&gt;&gt; def is_odd(n): return n % 2 == 1
...
&gt;&gt;&gt; list(filter(is_odd, numbers))
[1, 3, 7, 11, 29]
</code></pre>

<p>The <code>map</code> function will call the given function on each item in the given iterable and use the result of that function call as the new item:</p>

<pre><code class="pycon">&gt;&gt;&gt; list(map(is_odd, numbers))
[False, True, True, False, True, True, False, True]
</code></pre>

<p>For example here we&rsquo;re converting numbers to strings and squaring numbers:</p>

<pre><code class="pycon">&gt;&gt;&gt; list(map(str, numbers))
['2', '1', '3', '4', '7', '11', '18', '29']
&gt;&gt;&gt; list(map(lambda n: n**2, numbers))
[4, 1, 9, 16, 49, 121, 324, 841]
</code></pre>

<p><strong>Note</strong>: as I noted in my article on overusing lambda, I personally prefer to <a href="https://treyhunner.com/2018/09/stop-writing-lambda-expressions/#Overuse:_lambda_with_map_and_filter">use generator expressions instead of the <code>map</code> and <code>filter</code> functions</a>.</p>

<p>Similar to <code>map</code>, and <code>filter</code>, there&rsquo;s also <a href="https://docs.python.org/3/library/itertools.html#itertools.takewhile">takewhile</a> and <a href="https://docs.python.org/3/library/itertools.html#itertools.dropwhile">dropwhile</a> from the <code>itertools</code> module.
The first one is like <code>filter</code> except it stops once it finds a value for which the <em>predicate function</em> is false.
The second one does the opposite: it only includes values after the predicate function has become false.</p>

<pre><code class="pycon">&gt;&gt;&gt; from itertools import takewhile, dropwhile
&gt;&gt;&gt; colors = ['red', 'green', 'orange', 'purple', 'pink', 'blue']
&gt;&gt;&gt; def short_length(word): return len(word) &lt; 6
...
&gt;&gt;&gt; list(takewhile(short_length, colors))
['red', 'green']
&gt;&gt;&gt; list(dropwhile(short_length, colors))
['orange', 'purple', 'pink', 'blue']
</code></pre>

<p>And there&rsquo;s <a href="https://docs.python.org/3/library/functools.html#functools.reduce">functools.reduce</a> and <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate">itertools.accumulate</a>, which both call a 2-argument function to accumulate values as they loop:</p>

<pre><code class="pycon">&gt;&gt;&gt; from functools import reduce
&gt;&gt;&gt; from itertools import accumulate
&gt;&gt;&gt; numbers = [2, 1, 3, 4, 7]
&gt;&gt;&gt; def product(x, y): return x * y
...
&gt;&gt;&gt; reduce(product, numbers)
168
&gt;&gt;&gt; list(accumulate(numbers, product))
[2, 2, 6, 24, 168]
</code></pre>

<p>The <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict">defaultdict</a> class in the <code>collections</code> module is another example.
The <code>defaultdict</code> class creates dictionary-like objects which will never raise a <code>KeyError</code> when a missing key is accessed, but will instead add a new value to the dictionary automatically.</p>

<pre><code class="pycon">&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; counts = defaultdict(int)
&gt;&gt;&gt; counts['jujubes']
0
&gt;&gt;&gt; counts
defaultdict(&lt;class 'int'&gt;, {'jujubes': 0})
</code></pre>

<p>This <code>defaultdict</code> class accepts a <a href="https://treyhunner.com/2019/04/is-it-a-class-or-a-function-its-a-callable/">callable</a> (function or class) that will be called to create a default value whenever a missing key is accessed.</p>

<p>The above code worked because <code>int</code> returns <code>0</code> when called with no arguments:</p>

<pre><code class="pycon">&gt;&gt;&gt; int()
0
</code></pre>

<p>Here the default value is <code>list</code>, which returns a new list when called with no arguments.</p>

<pre><code class="pycon">&gt;&gt;&gt; things_by_color = defaultdict(list)
&gt;&gt;&gt; things_by_color['purple'].append('socks')
&gt;&gt;&gt; things_by_color['purple'].append('shoes')
&gt;&gt;&gt; things_by_color
defaultdict(&lt;class 'list'&gt;, {'purple': ['socks', 'shoes']})
</code></pre>

<p>The <a href="https://docs.python.org/3/library/functools.html#functools.partial">partial</a> function in the <code>functools</code> module is another example.
<code>partial</code> accepts a function and any number of arguments and returns a new function (technically it returns a <a href="https://treyhunner.com/2019/04/is-it-a-class-or-a-function-its-a-callable/#Callable_objects">callable object</a>).</p>

<p>Here&rsquo;s an example of <code>partial</code> used to &ldquo;bind&rdquo; the <code>sep</code> keyword argument to the <code>print</code> function:</p>

<pre><code class="pycon">&gt;&gt;&gt; print_each = partial(print, sep='\n')
</code></pre>

<p>The <code>print_each</code> function returned now does the same thing as if <code>print</code> was called with <code>sep='\n'</code>:</p>

<pre><code class="pycon">&gt;&gt;&gt; print(1, 2, 3)
1 2 3
&gt;&gt;&gt; print(1, 2, 3, sep='\n')
1
2
3
&gt;&gt;&gt; print_each(1, 2, 3)
1
2
3
</code></pre>

<p>You&rsquo;ll also find functions-that-accept-functions in third-party libraries, like <a href="https://docs.djangoproject.com/en/3.0/ref/models/fields/#default">in Django</a>, and <a href="https://numpy.org/doc/1.17/reference/generated/numpy.fromfunction.html">in numpy</a>.
Anytime you see a class or a function with documentation stating that one of its arguments should be a <strong>callable</strong> or a <strong>callable object</strong>, that means &ldquo;you could pass in a function here&rdquo;.</p>

<h2>A topic I&rsquo;m skipping over: nested functions</h2>

<p>Python also supports nested functions (functions defined inside of other functions).
Nested functions power Python&rsquo;s <a href="https://docs.python.org/3/glossary.html#term-decorator">decorator</a> syntax.</p>

<p>I&rsquo;m not going to discuss nested functions in this article because nested functions warrant exploration of <a href="https://en.wikipedia.org/wiki/Non-local_variable">non-local variables</a>, <a href="https://en.wikipedia.org/wiki/Closure_(computer_programming)">closures</a>, and other weird corners of Python that you don&rsquo;t need to know when you&rsquo;re first getting started with treating functions as objects.</p>

<p>I plan to write a follow-up article on this topic and link to it here later.
In the meantime, if you&rsquo;re interested in nested functions in Python, a search for <a href="https://duckduckgo.com/?q=higher-order+functions+in+Python">higher order functions in Python</a> may be helpful.</p>

<h2>Treating functions as objects is normal</h2>

<p>Python has <a href="https://en.wikipedia.org/wiki/First-class_function">first-class functions</a>, which means:</p>

<ol>
<li>You can assign functions to variables</li>
<li>You can store functions in lists, dictionaries, or other data structures</li>
<li>You can pass functions into other functions</li>
<li>You can write functions that return functions</li>
</ol>


<p>It might seem odd to treat functions as objects, but it&rsquo;s not that unusual in Python.
By my count, about 15% of the Python built-ins are meant to accept functions as arguments (<code>min</code>, <code>max</code>, <code>sorted</code>, <code>map</code>, <code>filter</code>, <code>iter</code>, <code>property</code>, <code>classmethod</code>, <code>staticmethod</code>, <code>callable</code>).</p>

<p>The most important uses of Python&rsquo;s first-class functions are:</p>

<ol>
<li>Passing a <code>key</code> function to the built-in <code>sorted</code>, <code>min</code>, and <code>max</code> functions</li>
<li>Passing functions into looping helpers like <code>filter</code> and <code>itertools.dropwhile</code></li>
<li>Passing a &ldquo;default-value generating factory function&rdquo; to classes like <code>defaultdict</code></li>
<li>&ldquo;Partially-evaluating&rdquo; functions by passing them into <code>functools.partial</code></li>
</ol>


<p>This topics goes <em>much deeper</em> than what I&rsquo;ve discussed here, but until you find yourself writing decorator functions, you probably don&rsquo;t need to explore this topic any further.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cyber Monday Python Sales 2019]]></title>
    <link href="https://treyhunner.com/2019/12/cyber-monday-python-sales/"/>
    <updated>2019-12-02T02:00:00-08:00</updated>
    <id>https://treyhunner.com/2019/12/cyber-monday-python-sales</id>
    <content type="html"><![CDATA[<p>I&rsquo;m running <a href="https://treyhunner.com/2019/11/black-friday-sale-gift-python-morsels-to-a-friend/">a sale</a> that ends in 24 hours, but I&rsquo;m not the only one.
This post is a compilation of the different Cyber Monday deals I&rsquo;ve found related to Python and Python learning.</p>

<h3>Python Morsels, weekly skill-building for professional Pythonistas</h3>

<p><a href="https://www.pythonmorsels.com/">Python Morsels</a> is my weekly Python skill-building service.</p>

<p>I&rsquo;m offering something sort of like a &ldquo;buy one get one free&rdquo; sale this year.</p>

<p>You can pay $200 to get 2 redemption codes, each worth 12 months of Python Morsels.</p>

<p>You can use one code for yourself and give one to a friend.
Or you could be extra generous and give them both away to two friends.
Either way, 2 people are each getting one year&rsquo;s worth of weekly Python training.</p>

<p>You can find <a href="https://treyhunner.com/2019/11/black-friday-sale-gift-python-morsels-to-a-friend/">more details on this sale here</a>.</p>

<h3>Data School&rsquo;s Machine Learning course</h3>

<p>Kevin Markham of Data School is selling his &ldquo;Machine Learning with Text in Python&rdquo; course for $195 (it&rsquo;s usually $295).
You can find more details on this sale <a href="https://www.dataschool.io/black-friday/">on the Data School Black Friday post</a>.</p>

<h3>Talk Python Course Bundle</h3>

<p>Michael Kennedy is selling a bundle that includes <a href="https://training.talkpython.fm/black-friday-2019">every Talk Python course for $250</a>.</p>

<p>There are 20 courses included in this bundle.
If you&rsquo;re into Python and you don&rsquo;t already own most of these courses, this bundle could be a really good deal for you.</p>

<h3>Reuven Lerner&rsquo;s Python courses</h3>

<p>Reuven Lerner is offering a <a href="https://lerner.co.il/2019/11/28/my-black-friday-sale-is-live-take-50-off-any-course-in-python-or-data-science/">50% off sale on his courses</a>.
Reuven has courses on Python, Git, and regular expressions.</p>

<p>This sale also includes Reuven&rsquo;s <a href="https://store.lerner.co.il/wpe?coupon=BF2019">Weekly Python Exercise</a>, which is similar to <a href="https://www.pythonmorsels.com/">Python Morsels</a>, but has its own flavor.
You could sign up for both if you want double the weekly learning.</p>

<h3>Real Python courses</h3>

<p>Real Python is also offering <a href="https://realpython.com/account/join/?c=blackfriday2019">$40 off their annual memberships</a>.
Real Python has many tutorials and courses as well.</p>

<h3>PyBites Code Challenges</h3>

<p>Bob and Julian of PyBites are offering their a <a href="https://gumroad.com/l/Xhxeo/teachingpython">40% discount off their Newbie Bites</a> on their PyBites Code Challenges platform.</p>

<p>If you&rsquo;re new to Python and programming, check out their newbie bites.</p>

<h3>Automate the Boring Stuff Course (for free!)</h3>

<p>Al Sweigart is offering <a href="https://www.udemy.com/course/automate/?couponCode=DEC2019FREE">free lifetime access to his Automate the Boring Stuff with Python course</a> on Udemy until Wednesday.
It&rsquo;s hard to beat free!</p>

<h3>Other Cyber Monday deals?</h3>

<p>If you have questions about the <a href="https://treyhunner.com/2019/11/black-friday-sale-gift-python-morsels-to-a-friend/">Python Morsels sale</a>, <a href='m&#97;&#105;l&#116;o&#58;he&#108;p&#64;&#112;%7&#57;th%6Fnmo&#114;s%6&#53;ls&#46;&#99;&#111;m'>email me</a>.</p>

<p>The Python Morsels sale and likely all the other sales above will end in the next 24 hours, probably sooner depending on when you&rsquo;re reading this.</p>

<p>So go check them out!</p>

<p>Did I miss a deal that you know about?
Link to it in the comments!</p>
]]></content>
  </entry>
  
</feed>
