<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Trey Hunner]]></title>
  <link href="https://treyhunner.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="https://treyhunner.com/"/>
  <updated>2024-10-13T21:12:05-07:00</updated>
  <id>https://treyhunner.com/</id>
  <author>
    <name><![CDATA[Trey Hunner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Django and the Python 3.13 REPL]]></title>
    <link href="https://treyhunner.com/2024/10/django-and-the-new-python-3-dot-13-repl/"/>
    <updated>2024-10-13T21:03:32-07:00</updated>
    <id>https://treyhunner.com/2024/10/django-and-the-new-python-3-dot-13-repl</id>
    <content type="html"><![CDATA[<p>Your new Django project uses Python 3.13.</p>

<p>You&rsquo;re really looking forward to using the new REPL&hellip; but <code>python manage.py shell</code> just shows the same old Python REPL.
What gives?</p>

<p>Well, Django&rsquo;s management shell uses Python&rsquo;s <code>code</code> module to launch a custom REPL, but the <code>code</code> module doesn&rsquo;t (<a href="https://github.com/python/cpython/issues/119512">yet</a>) use the new Python REPL.</p>

<p>So you&rsquo;re out of luck&hellip; or are you?</p>

<h2>How stable do you need your <code>shell</code> command to be?</h2>

<p>The new Python REPL&rsquo;s code lives in a <code>_pyrepl</code> package.
Surely there must be some way to launch the new REPL using that <code>_pyrepl</code> package!</p>

<p>First, note the <code>_</code> before that package name.
It&rsquo;s <code>_pyrepl</code>, not <code>pyrepl</code>.</p>

<p>Any solution that relies on this module may break in future Python releases.</p>

<p>So&hellip; should we give up on looking for a solution, if we can&rsquo;t get a &ldquo;stable&rdquo; one?</p>

<p>I don&rsquo;t think so.</p>

<p>My <code>shell</code> command doesn&rsquo;t usually <em>need</em> to be stable in more than one version of Python at a time.
So I&rsquo;m fine with a solution that <em>attempts</em> to use the new REPL and then falls back to the old REPL if it fails.</p>

<h2>A working solution</h2>

<p>So, let&rsquo;s look at a working solution.</p>

<p>Stick <a href="https://pym.dev/p/2zqeq/">this code</a> in a <code>management/commands/shell.py</code> file within one of your Django apps:</p>

<pre><code class="python">"""Python 3.13 REPL support using the unsupported _pyrepl module."""
from django.core.management.commands.shell import Command as BaseShellCommand


class Command(BaseShellCommand):
    shells = ["ipython", "bpython", "pyrepl", "python"]

    def pyrepl(self, options):
        from _pyrepl.main import interactive_console
        interactive_console()
</code></pre>

<h2>How it works</h2>

<p>Django&rsquo;s <code>shell</code> command has made it very simple to add support for your favorite REPL of choice.</p>

<p><a href="https://github.com/django/django/blob/5.1.2/django/core/management/commands/shell.py">The code for the <code>shell</code> command</a> loops through the <code>shells</code> list and attempts to run a method with that name on its own class.
If an <code>ImportError</code> is raised then it attempts the next command, stopping once no exception occurs.</p>

<p>Our new command will try to use IPython and bpython if they&rsquo;re installed and then it will try the new Python 3.13 REPL followed by the old Python REPL.</p>

<p>If Python 3.14 breaks our import by moving the <code>interactive_console</code> function, then an <code>ImportError</code> will be raised, causing us to fall back to the old REPL after we upgrade to Python 3.14 one day.
If instead, the <code>interactive_console</code> function&rsquo;s usage changes (maybe it will require arguments) then our <code>shell</code> command will completely break and we&rsquo;ll need to manually fix it when we upgrade to Python 3.14.</p>

<h2>What&rsquo;s so great about the new REPL?</h2>

<p>If you&rsquo;re already using IPython or BPython as your REPL and you&rsquo;re enjoying them, I would stick with them.</p>

<p>Third-party libraries move faster than Python itself and they&rsquo;re often more feature-rich.
IPython has about 20 years worth of feature development and it has features that the built-in Python REPL will likely never have.</p>

<p>If you&rsquo;re using the default Python REPL though, this new REPL is a <em>huge</em> upgrade.
I&rsquo;ve been using it as my default REPL since May and I <em>love</em> it.
See <a href="https://pym.dev/python-313-whats-new/">my screencast on Python 3.13</a> for my favorite features in the new REPL.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Switching from virtualenvwrapper to direnv, Starship, and uv]]></title>
    <link href="https://treyhunner.com/2024/10/switching-from-virtualenvwrapper-to-direnv-starship-and-uv/"/>
    <updated>2024-10-03T14:00:00-07:00</updated>
    <id>https://treyhunner.com/2024/10/switching-from-virtualenvwrapper-to-direnv-starship-and-uv</id>
    <content type="html"><![CDATA[<p>Earlier this week I considered whether I should finally switch away from <a href="https://virtualenvwrapper.readthedocs.io">virtualenvwrapper</a> to using local <code>.venv</code> managed by <a href="https://direnv.net">direnv</a>.</p>

<p>I&rsquo;ve never seriously used direnv, but I&rsquo;ve been hearing <a href="https://micro.webology.dev/2024/03/13/on-environment-variables.html">Jeff</a> and <a href="https://hynek.me/til/python-project-local-venvs/">Hynek</a> talk about their use of direnv for a while.</p>

<p>After a few days, I&rsquo;ve finally stumbled into a setup that works great for me.
I&rsquo;d like to note the basics of this setup as well as some fancy additions that are specific to my own use case.</p>

<h2>My old virtualenvwrapper workflow</h2>

<p>First, I&rsquo;d like to note my <em>old</em> workflow that I&rsquo;m trying to roughly recreate:</p>

<ol>
<li>I type <code>mkvenv3 &lt;project_name&gt;</code> to create a new virtual environment for the current project directory and activate it</li>
<li>I type <code>workon &lt;project_name&gt;</code> when I want to workon that project: this activates the correct virtual environment <em>and</em> changes to the project directory</li>
</ol>


<p>The initial setup I thought of allows me to:</p>

<ol>
<li>Run <code>echo layout python &gt; .envrc &amp;&amp; direnv allow</code> to create a virtual environment for the current project and activate it</li>
<li>Change directories into the project directory to automatically activate the virtual environment</li>
</ol>


<p>The more complex setup I eventually settled on allows me to:</p>

<ol>
<li>Run <code>venv &lt;project_name&gt;</code> to create a virtual environment for the current project and activate it</li>
<li>Run <code>workon &lt;project_name&gt;</code> to change directories into the project (which automatically activates the virtual environment)</li>
</ol>


<h2>The initial setup</h2>

<p>First, I <a href="https://direnv.net">installed direnv</a> and added this to my <code>~/.zshrc</code> file:</p>

<pre><code class="bash">eval "$(direnv hook zsh)"
</code></pre>

<p>Then whenever I wanted to create a virtual environment for a new project I created a <code>.envrc</code> file in that directory, which looked like this:</p>

<pre><code class="bash">layout python
</code></pre>

<p>Then I ran <code>direnv allow</code> to allow, as <code>direnv</code> instructed me to, to allow the new virtual environment to be automatically created and activated.</p>

<p>That&rsquo;s pretty much it.</p>

<p>Unfortunately, I did not like this initial setup.</p>

<h2>No shell prompt?</h2>

<p>The first problem was that the virtual environment&rsquo;s prompt didn&rsquo;t show up in my shell prompt.
This is due to a <a href="https://github.com/direnv/direnv/issues/529">direnv not allowing modification of the <code>PS1</code> shell prompt</a>.
That means I&rsquo;d need to modify my shell configuration to show the correct virtual environment name myself.</p>

<p>So I added this to my <code>~/.zshrc</code> file to show the virtual environment name at the beginning of my prompt:</p>

<pre><code class="bash"># Add direnv-activated venv to prompt
show_virtual_env() {
  if [[ -n "$VIRTUAL_ENV_PROMPT" &amp;&amp; -n "$DIRENV_DIR" ]]; then
    echo "($(basename $VIRTUAL_ENV_PROMPT)) "
  fi
}
PS1='$(show_virtual_env)'$PS1
</code></pre>

<h2>Wrong virtual environment directory</h2>

<p>The next problem was that the virtual environment was placed in <code>.direnv/python3.12</code>.
I wanted each virtual environment to be in a <code>.venv</code> directory instead.</p>

<p>To do that, I made a <code>.config/direnv/direnvrc</code> file that customized the python layout:</p>

<pre><code class="bash">layout_python() {
    if [[ -d ".venv" ]]; then
        VIRTUAL_ENV="$(pwd)/.venv"
    fi

    if [[ -z $VIRTUAL_ENV || ! -d $VIRTUAL_ENV ]]; then
        log_status "No virtual environment exists. Executing \`python -m venv .venv\`."
        python -m venv .venv
        VIRTUAL_ENV="$(pwd)/.venv"
    fi

    # Activate the virtual environment
    . $VIRTUAL_ENV/bin/activate
}
</code></pre>

<h2>Loading, unloading, loading, unloading&hellip;</h2>

<p>I also didn&rsquo;t like the loading and unloading messages that showed up each time I changed directories.
I removed those by clearing the <code>DIRENV_LOG_FORMAT</code> variable in my <code>~/.zshrc</code> configuration:</p>

<pre><code class="bash">export DIRENV_LOG_FORMAT=
</code></pre>

<h2>The more advanced setup</h2>

<p>I don&rsquo;t like it when all my virtual environment prompts show up as <code>.venv</code>.
I want ever prompt to be the name of the actual project&hellip; which is usually the directory name.</p>

<p>I also <em>really</em> wanted to be able to type <code>venv</code> to create a new virtual environment, activate it, and create the <code>.envrc</code> file for my <em>automatically</em>.</p>

<p>Additionally, I thought it would be really handy if I could type <code>workon &lt;project_name&gt;</code> to change directories to a specific project.</p>

<p>I made two aliases in my <code>~/.zshrc</code> configuration for all of this:</p>

<pre><code class="bash">venv() {
    local venv_name=${1:-$(basename "$PWD")}
    local projects_file="$HOME/.projects"

    # Check if .envrc already exists
    if [ -f .envrc ]; then
        echo "Error: .envrc already exists" &gt;&amp;2
        return 1
    fi

    # Create venv
    if ! python3 -m venv --prompt "$venv_name"; then
        echo "Error: Failed to create venv" &gt;&amp;2
        return 1
    fi

    # Create .envrc
    echo "layout python" &gt; .envrc

    # Append project name and directory to projects file
    echo "${venv_name} = ${PWD}" &gt;&gt; $projects_file

    # Allow direnv to immediately activate the virtual environment
    direnv allow
}

workon() {
    local project_name="$1"
    local projects_file="$HOME/.projects"
    local project_dir

    # Check for projects config file
    if [[ ! -f "$projects_file" ]]; then
        echo "Error: $projects_file not found" &gt;&amp;2
        return 1
    fi

    # Get the project directory for the given project name
    project_dir=$(grep -E "^$project_name\s*=" "$projects_file" | sed 's/^[^=]*=\s*//')

    # Ensure a project directory was found
    if [[ -z "$project_dir" ]]; then
        echo "Error: Project '$project_name' not found in $projects_file" &gt;&amp;2
        return 1
    fi

    # Ensure the project directory exists
    if [[ ! -d "$project_dir" ]]; then
        echo "Error: Directory $project_dir does not exist" &gt;&amp;2
        return 1
    fi

    # Change directories
    cd "$project_dir"
}
</code></pre>

<p>Now I can type this to create a <code>.venv</code> virtual environment in my current directory, which has a prompt named after the current directory, activate it, and create a <code>.envrc</code> file which will automatically activate that virtual environment (thanks to that <code>~/.config/direnv/direnvrc</code> file) whenever I change into that directory:</p>

<pre><code class="bash">$ venv
</code></pre>

<p>If I wanted to customized the prompt name for the virtual environment, I could do this:</p>

<pre><code class="bash">$ venv my_project
</code></pre>

<p>When I wanted to start working on that project later, I can either change into that directory <em>or</em> if I&rsquo;m feeling lazy I can simply type:</p>

<pre><code class="bash">$ workon my_project
</code></pre>

<p>That reads from my <code>~/.projects</code> file to look up the project directory to switch to.</p>

<h2>Switching to uv</h2>

<p>I also decided to try using <a href="https://docs.astral.sh/uv/">uv</a> for all of this, since it&rsquo;s faster at creating virtual environments.
One benefit of <code>uv</code> is that it tries to select the correct Python version for the project, if it sees a version noted in a <code>pyproject.toml</code> file.</p>

<p>Another benefit of using <code>uv</code>, is that I should also be able to update the <code>venv</code> to use a specific version of Python with something like <code>--python 3.12</code>.</p>

<p>Here are the updated shell aliases for the <code>~/.zshrc</code> for <code>uv</code>:</p>

<pre><code class="bash">venv() {
    local venv_name
    local dir_name=$(basename "$PWD")

    # If there are no arguments or the last argument starts with a dash, use dir_name
    if [ $# -eq 0 ] || [[ "${!#}" == -* ]]; then
        venv_name="$dir_name"
    else
        venv_name="${!#}"
        set -- "${@:1:$#-1}"
    fi

    # Check if .envrc already exists
    if [ -f .envrc ]; then
        echo "Error: .envrc already exists" &gt;&amp;2
        return 1
    fi

    # Create venv using uv with all passed arguments
    if ! uv venv --seed --prompt "$@" "$venv_name"; then
        echo "Error: Failed to create venv" &gt;&amp;2
        return 1
    fi

    # Create .envrc
    echo "layout python" &gt; .envrc

    # Append to ~/.projects
    echo "${venv_name} = ${PWD}" &gt;&gt; ~/.projects

    # Allow direnv to immediately activate the virtual environment
    direnv allow
}
</code></pre>

<h2>Switching to starship</h2>

<p>I also decided to try out using <a href="https://starship.rs">Starship</a> to customize my shell this week.</p>

<p>I added this to my <code>~/.zshrc</code>:</p>

<pre><code class="bash">eval "$(starship init zsh)"
</code></pre>

<p>And removed this, which is no longer needed since Starship will be managing the shell for me:</p>

<pre><code class="bash"># Add direnv-activated venv to prompt
show_virtual_env() {
  if [[ -n "$VIRTUAL_ENV_PROMPT" &amp;&amp; -n "$DIRENV_DIR" ]]; then
    echo "($(basename $VIRTUAL_ENV_PROMPT)) "
  fi
}
PS1='$(show_virtual_env)'$PS1
</code></pre>

<p>I also switched my <code>python</code> layout for direnv to just set the <code>$VIRTUAL_ENV</code> variable and add the <code>$VIRTUAL_ENV/bin</code> directory to my <code>PATH</code>, since the <code>$VIRTUAL_ENV_PROMPT</code> variable isn&rsquo;t needed for Starship to pick up the prompt:</p>

<pre><code class="bash">layout_python() {
    VIRTUAL_ENV="$(pwd)/.venv"
    PATH_add "$VIRTUAL_ENV/bin"
    export VIRTUAL_ENV
}
</code></pre>

<p>I also made a <em>very</em> boring Starship configuration in <code>~/.config/starship.toml</code>:</p>

<pre><code class="toml">format = """
$python\
$directory\
$git_branch\
$git_state\
$character"""

add_newline = false

[python]
format = '([(\($virtualenv\) )]($style))'
style = "bright-black"

[directory]
style = "bright-blue"

[character]
success_symbol = "[\\$](black)"
error_symbol = "[\\$](bright-red)"
vimcmd_symbol = "[❮](green)"

[git_branch]
format = "[$symbol$branch]($style) "
style = "bright-purple"

[git_state]
format = '\([$state( $progress_current/$progress_total)]($style)\) '
style = "purple"

[cmd_duration.disabled]
</code></pre>

<p>I setup such a boring configuration because when I&rsquo;m teaching, I don&rsquo;t want my students to be confused or distracted by a prompt that has considerably more information in it than <em>their</em> default prompt may have.</p>

<p>The biggest downside of switching to Starship has been my own earworm-oriented brain.
As I update my Starship configuration files, I&rsquo;ve repeatedly heard David Bowie singing &ldquo;I&rsquo;m a Starmaaan&rdquo;. 🎶</p>

<h2>Ground control to major TOML</h2>

<p>After all of that, I realized that I could additionally use different Starship configurations for different directories by putting a <code>STARSHIP_CONFIG</code> variable in specific layouts.
After that realization, I made my configuration even <em>more</em> vanilla and made some alternative configurations in my <code>~/.config/direnv/direnvrc</code> file:</p>

<pre><code class="bash">layout_python() {
    VIRTUAL_ENV="$(pwd)/.venv"

    PATH_add "$VIRTUAL_ENV/bin"
    export VIRTUAL_ENV

    export STARSHIP_CONFIG=/home/trey/.config/starship/python.toml
}

layout_git() {
    export STARSHIP_CONFIG=/home/trey/.config/starship/git.toml
}
</code></pre>

<p>Those other two configuration files are fancier, as I have no concern about them distracting my students since I&rsquo;ll never be within those directories while teaching.</p>

<p>You can find those files in <a href="https://github.com/treyhunner/dotfiles">my dotfiles repository</a>.</p>

<h2>The necessary tools</h2>

<p>So I replaced virtualenvwrapper with direnv, uv, and Starship.
Though direnv was is doing most of the important work here.
The use of uv and Starship were just bonuses.</p>

<p>I <em>am</em> also hoping to eventually replace my pipx use with uv and once uv supports <a href="https://github.com/astral-sh/uv/issues/6265">adding python3.x commands</a> to my <code>PATH</code>, I may replace my use of pyenv with uv as well.</p>

<p>Thanks to all who <a href="https://mastodon.social/@treyhunner/113232640710715449">participated in my Mastodon thread</a> as I fumbled through discovering this setup.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10-Week Hands-On Python Course]]></title>
    <link href="https://treyhunner.com/2024/08/python-high-five/"/>
    <updated>2024-08-20T14:20:00-07:00</updated>
    <id>https://treyhunner.com/2024/08/python-high-five</id>
    <content type="html"><![CDATA[<p>Ever wished you could take an <strong>Intro to Python training</strong> with me, but you don&rsquo;t work for a company with a generous training budget?
I&rsquo;m running a Python-learning program just for this situation.</p>

<p><a href="https://www.pythonmorsels.com/high-five/">Python High Five</a> is a 10-week Python jumpstart program that starts <strong>this September</strong>.</p>

<h2>Set aside the time to learn ⌚</h2>

<p>One of the biggest problems for folks starting to learn Python is <strong>setting aside the time</strong>.
And even if you <em>do</em> manage to set aside the time, you&rsquo;ll often hit a roadblock where you feel <strong>confused</strong>.</p>

<p>Python High Five is a way to keep a <strong>daily learning habit</strong> <em>and</em> to <strong>get help</strong> when find yourself stuck.</p>

<p>This program is based around <strong>daily practice</strong>.
Monday through Friday you&rsquo;ll pick <strong>30 minutes</strong> from your schedule, at any time that works you.
During those 30 minutes, you&rsquo;ll watch a 5 minute video, work on the day&rsquo;s exercise, and reflect on your progress.</p>

<h2>The most effective learning is hands-on 🖐️</h2>

<p>Python High Five is all about learning through <strong>writing Python code</strong>.
Each week we&rsquo;ll dive deeper into Python, building upon what we&rsquo;ve learned so far.</p>

<p>When you find yourself stuck you can get help through an asynchronous <strong>group chat</strong> and weekly <strong>office hour</strong> sessions.
In addition to our weekly office hours together, I&rsquo;ll check the chat each day, respond to questions, and provide guidance.</p>

<h2>Proven learning techniques behind the scenes 📝</h2>

<p>The daily check-ins allow for daily <strong>accountability</strong>.
The group chat also provides both a community of peers to rely on, and <strong>guidance from an experienced Python trainer</strong> (me).</p>

<p>We&rsquo;ll also be using proven learning techniques behind the scenes:</p>

<ul>
<li><strong>Retrieval practice</strong>: you don&rsquo;t learn by putting information into your head, but by trying to take it out; for Python learning, that means writing code.</li>
<li><strong>Spaced repetition</strong>: cramming is less effective than learning spaced out over time, which is why we&rsquo;ll spend 30 minutes each weekday instead of spending a few hours every week.</li>
<li><strong>Interleaving</strong>: each day&rsquo;s exercise isn&rsquo;t predictably themed because a bit of unpredictability can be <em>really</em> improve learning outcomes.</li>
<li><strong>Elaboration</strong>: your daily check-in isn&rsquo;t <em>just</em> about reflection: it&rsquo;s also a helpful learning tool!</li>
</ul>


<p>Plus, we&rsquo;ll be working through curriculum I&rsquo;ve been developing and iterating on for many years.
I have taught these topics in many different settings to folks from <em>many</em> different backgrounds.</p>

<h2>Form a daily learning habit 🔁</h2>

<p>Any 10-week program will be <em>just the start</em> of a Python learning habit.
You&rsquo;ll need to keep up your Python after Python High Five ends, either by promptly applying your skills to a new project or diving deeper into Python with continued daily practice.</p>

<p>That&rsquo;s why I&rsquo;m offering an <strong>80% discount</strong> for High Five attendees on one year of <a href="https://www.pythonmorsels.com">Python Morsels</a>, which is my skill-building service designed to help <strong>deepen your Python skills every week</strong>.
You can <a href="https://www.pythonmorsels.com/high-five/#morsels">see more details on that here</a>.</p>

<h2>Ready to start your Python journey? ⛰️</h2>

<p>Are you ready to start your Python journey with a solid foundation?</p>

<p><a href="https://www.pythonmorsels.com/high-five/">Read more about Python High Five</a> and decide whether this is for you.</p>

<p>Keep in mind that while the program begins on September 9, <strong>enrollment closes on August 31</strong>.
So <a href="https://www.pythonmorsels.com/high-five/#faq">check the FAQs</a> and if you have additional questions, be sure to email me soon!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quickly find the right datetime format code for your date]]></title>
    <link href="https://treyhunner.com/2024/08/find-the-datetime-format-code-for-your-date/"/>
    <updated>2024-08-05T11:30:00-07:00</updated>
    <id>https://treyhunner.com/2024/08/find-the-datetime-format-code-for-your-date</id>
    <content type="html"><![CDATA[<p>I often find myself with a string representing a date and time and the need to create a format string that will parse this string into a <code>datetime</code> object.</p>

<p>I decided to make a tool that solves this problem for me: <a href="https://pym.dev/strptime">https://pym.dev/strptime</a></p>

<h2>Finding the code to parse a date format with <code>strptime</code></h2>

<p>Here&rsquo;s how I&rsquo;m now using this new tool.</p>

<p>I find a date string in a random spreadsheet or log file that I need to parse.
For example, the string <code>30-Jun-2024 20:09</code>, which I recently found in a spreadsheet.</p>

<p>I then paste the string into the tool and watch the format appear:</p>

<p><a href="https://pym.dev/strptime"><img src="/images/strptime-1.png"></a></p>

<p>Then I click on the date format to copy-paste it.
That&rsquo;s it!</p>

<p>This tool works by cycling through a number of common formats.
It also works for dates without a time, like <code>Jul 1, 2024</code>.</p>

<p><a href="https://pym.dev/strptime"><img src="/images/strptime-2.png"></a></p>

<p>This input field works great when you&rsquo;re in need of a code for the <code>datetime</code> class&rsquo;s <code>strptime</code> method (which <em>parses</em> dates).
But what if you need a code for <code>strftime</code> (for <em>formatting</em> dates)?</p>

<h2>Finding the code to format a date with <code>strftime</code></h2>

<p>If you don&rsquo;t have a date but instead want to <em>construct</em> a date in a specific common format, scroll down the page a bit.</p>

<p>This page includes a table of common formats.</p>

<p><a href="https://pym.dev/strptime#formats"><img src="/images/strptime-table.png"></a></p>

<p>Click on the format to copy it.
That&rsquo;s it.</p>

<h2>Playing with format codes</h2>

<p>What if you have a date format already but you&rsquo;re not sure what it represents?</p>

<p>Paste it in the box!</p>

<p>For example if you&rsquo;re wondering what the <code>%B</code> in <code>%B %d, %Y</code> means, paste it in to see what that represent with the current date and time:</p>

<p><a href="https://pym.dev/strptime"><img src="/images/strptime-reverse.png"></a></p>

<h2>Other features</h2>

<p>There are a few other hidden features in this tool:</p>

<ul>
<li>After a date or date format is pasted, if it corresponds to one of the formats listed in the table of common formats, that row will be highlighted</li>
<li>Hitting the <code>Enter</code> key anywhere on the page will select the input field</li>
<li>Clicking on a date within the format table will fill that date into the input box</li>
<li>The bottom of the page includes links to other useful datetime formatting/parsing tools as well as a link to the relevant Python documentation</li>
</ul>


<h2>Thoughts? Feature requests?</h2>

<p>What do you think of this tool?</p>

<p>Is this something you&rsquo;d bookmark and use often?
Is this missing a key feature that you would need for it to be valuable for your use?</p>

<p>Are there date and time formats you&rsquo;d like to see that don&rsquo;t seem to be supported yet?</p>

<p>Comment or email me to let me know!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why does "python -m json" not work? Why is it "json.tool"?]]></title>
    <link href="https://treyhunner.com/2024/08/why-does-python-m-json-not-work/"/>
    <updated>2024-08-01T14:00:00-07:00</updated>
    <id>https://treyhunner.com/2024/08/why-does-python-m-json-not-work</id>
    <content type="html"><![CDATA[<p><strong>Update</strong>: upon the encouragement of a few CPython core team members, I <a href="https://github.com/python/cpython/pull/122884">opened a pull request</a> to add this to Python 3.14.</p>

<p>Have you ever used Python&rsquo;s <code>json.tool</code> command-line interface?</p>

<p>You can run <code>python -m json.tool</code> against a JSON file and Python will print a nicely formatted version of the file.</p>

<pre><code class="bash">python -m json.tool example.json
[
    1,
    2,
    3,
    4
]
</code></pre>

<p>Why do we need to run <code>json.tool</code> instead of <code>json</code>?</p>

<h2>The history of <code>python -m</code></h2>

<p>Python 3.5 added the ability to run a module as a command-line script using the <code>-m</code> argument (see <a href="https://peps.python.org/pep-0338/">PEP 338</a>) which was implemented in Python 2.5.
While that feature was being an additional feature/bug was accidentally added, alowing packages to be run with the <code>-m</code> flag as well.
When a package was run with the <code>-m</code> flag, the package&rsquo;s <code>__init__.py</code> file would be run, with the <code>__name__</code> variable set to <code>__main__</code>.</p>

<p>This accidental feature/bug was <a href="https://github.com/python/cpython/issues/47000">removed in Python 2.6</a>.</p>

<p>It wasn&rsquo;t until Python 2.7 that the ability to run <code>python -m package</code> was re-added (see below).</p>

<h2>The history of the <code>json</code> module</h2>

<p>The <code>json</code> module was <a href="https://docs.python.org/3/whatsnew/2.6.html#the-json-module-javascript-object-notation">added in Python 2.6</a>.
It was based on the third-party <code>simplejson</code> library.</p>

<p>That library originally relied on the fact that Python packages could be run with the <code>-m</code> flag to run the package&rsquo;s <code>__init__.py</code> file with <code>__name__</code> set to <code>__main__</code> (see <a href="https://github.com/simplejson/simplejson/blob/v1.8.1/simplejson/__init__.py#L368">this code from version 1.8.1</a>).</p>

<p>When <code>simplejson</code> was added to Python as the <code>json</code> module in Python 2.6, this bug/feature could no longer be relied upon as it was fixed in Python 2.6.
To continue allowing for a nice command-line interface, it was decided that running a <code>tool</code> submodule would be the way to add a command-line interface to the <code>json</code> package (<a href="https://github.com/simplejson/simplejson/commit/74d9c5c4c4339db47dfa86bf37858cae80ed3776">discussion here</a>).</p>

<p>Python 2.7 <a href="https://docs.python.org/2.7/using/cmdline.html?highlight=__main__#cmdoption-m">added the ability to run any package as a command-line tool</a>.
The package would simply need a <code>__main__.py</code> file within it, which Python would run as the entry point to the package.</p>

<p>At this point, <code>json.tool</code> had already been added in Python 2.6 and no attempt was made (as far as I can tell) to allow <code>python -m json</code> to work instead.
Once you&rsquo;ve added a feature, removing or changing it can be painful.</p>

<h2>Could we make <code>python -m json</code> work today?</h2>

<p>We could.
We would just need to <a href="https://github.com/treyhunner/cpython/commit/1226315e2df0d4229558734d5f0d50f1386a025e">rename <code>tool.py</code> to <code>__main__.py</code></a>.
To allow <code>json.tool</code> to still work <em>also</em>, would could <a href="https://github.com/python/cpython/commit/7ce95d21886c7ad5278c07c1a20cda5bebab4731">make a new <code>tool.py</code> module</a> that simply imports <code>json.__main__</code>.</p>

<p>We could even go so far as to <a href="https://github.com/treyhunner/cpython/commit/ae4ca62346c690e1c6aaf1ccfed37069984b5d67">deprecate <code>json.tool</code></a> if we wanted to.</p>

<p>Should we do this though? 🤔</p>

<h2>Should we make <code>python -m json</code> work?</h2>

<p>I don&rsquo;t know about you, but I would rather type <code>python -m json</code> than <code>python -m json.tool</code>.
It&rsquo;s more memorable <em>and</em> easier to guess, if you&rsquo;re not someone who has memorized <a href="https://www.pythonmorsels.com/cli-tools/">all the command-line tools hiding in Python</a>.</p>

<p>But would this actually be used?
I mean, don&rsquo;t people just use the <a href="https://jqlang.github.io/jq/">jq</a> tool instead?</p>

<p>Well, a <code>sqlite3</code> shell was <a href="https://docs.python.org/3/library/sqlite3.html#command-line-interface">added to Python 3.12</a> despite the fact that third-party interactive sqlite prompts are fairly common.</p>

<p>It is pretty handy to have a access to a tool within an unfamiliar environment where installing yet-another-tool might pose a problem.
Think Docker, a locked-down Windows machine, or any computer without network or with network restrictions.</p>

<p>Personally, I&rsquo;d like to see <code>python3 -m json</code> work.
I can&rsquo;t think of any big downsides.
Can you?</p>

<p><strong>Update</strong>: <a href="https://github.com/python/cpython/pull/122884">pull request opened</a>.</p>

<h2>Too long; didn&rsquo;t read</h2>

<p>The &ldquo;too long didn&rsquo;t read version&rdquo;:</p>

<ul>
<li>Python 2.5 added support for the <code>-m</code> argument for <em>modules</em>, but not <em>packages</em></li>
<li>A third-party <code>simplejson</code> app existed with a nice CLI that relied on a <code>-m</code> implementation bug allowing packages to be run using <code>-m</code></li>
<li>Python 2.6 fixed that implementation quirk and broke the previous ability to run <code>python -m simplejson</code></li>
<li>Python 2.6 also added the <code>json</code> module, which was based on this third-party <code>simplejson</code> package</li>
<li>Since <code>python -m json</code> couldn&rsquo;t work anymore, the ability to run <code>python -m json.tool</code> was added</li>
<li>Python 2.7 added official support for <code>python -m some_package</code> by running a <code>__main__</code> submodule</li>
<li>The <code>json.tool</code> module already existed in Python 2.6 and the ability to run <code>python -m json</code> was (as far as I can tell) never seriously considered</li>
</ul>


<h2>All thanks to git history and issue trackers</h2>

<p>I discovered this by noting <a href="https://github.com/simplejson/simplejson/commit/74d9c5c4c4339db47dfa86bf37858cae80ed3776">the first commit</a> that added the <code>tool</code> submodule to <code>simplejson</code>, which notes the fact that this was for consistency with the new <code>json</code> standard library module.</p>

<p>Thank you git history.
And thank you to the folks who brought us the <code>simplejson</code> library, the <code>json</code> module, and the ability to use <code>-m</code> on both a module and a package!</p>

<p>Also, thank you to Alyssa Coghlan, Hugo van Kemenade, and Adam Turner for reviewing my pull request to add this feature to Python 3.14. 💖</p>
]]></content>
  </entry>
  
</feed>
