<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Trey Hunner]]></title>
  <link href="https://treyhunner.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="https://treyhunner.com/"/>
  <updated>2024-04-27T11:51:00-07:00</updated>
  <id>https://treyhunner.com/</id>
  <author>
    <name><![CDATA[Trey Hunner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[10 years of Python conferences]]></title>
    <link href="https://treyhunner.com/2024/04/10-years-of-python-conferences/"/>
    <updated>2024-04-27T11:45:00-07:00</updated>
    <id>https://treyhunner.com/2024/04/10-years-of-python-conferences</id>
    <content type="html"><![CDATA[<p>10 years and 10 days ago I flew home from my very first Python conference.</p>

<p>I left a few days into the PyCon US 2014 sprints and I remember feeling a bit like summer camp was ending.
I&rsquo;d played board games, contributed to an open source project, seen tons of talks, and met a <em>ton</em> of people.</p>

<h2>My first Python conference: PyCon US 2014</h2>

<p>PyCon 2014 was the first Python conference I attended.</p>

<p>At the start of the conference I only knew a handful of San Diegans.
I left having met many more folks.
Some of the folks I met I knew from online forums, GitHub repos, or videos
I met Kenneth Love, Baptiste Mispelon, Carl Meyer, Eric Holscher in-person, among many others.
Most folks I met I had never encountered online, but I was glad to have met in person.</p>

<p>For the most part, I had no idea who anyone was, what they did with Python, or what they might be interested in talking about.
I also had no idea what most of the various non-talk activities were.
I found out about the Education Summit and hadn&rsquo;t realized that it required pre-registration.
The open spaces are one of my favorite parts of PyCon and I didn&rsquo;t even they existed until PyCon 2015.</p>

<p>I <em>did</em> stay for a couple days of the sprints and I was grateful for that.
Most of the memorable human connections I had were during the sprints.
I helped <a href="https://pyvideo.org">PyVideo</a> upgrade their code base from Python 2 to Python 3 (this was before Will and Sheila <a href="https://pyvideo.org/pages/thanks-will-and-sheila.html">stepped down as maintainers</a>).
Will guided me through the code base and seemed grateful for the help.</p>

<p>I also got the idea to write front-end JavaScript tests for Django during the sprints and eventually <a href="https://github.com/django/deps/blob/main/final/0003-javascript-tests.rst">started that process</a> after PyCon thanks to Carl Meyer&rsquo;s guidance.</p>

<h2>Attending regional conferences and DjangoCon</h2>

<p>In fall 2014, I attended Django BarCamp at the Eventbrite office.
That was my first exposure to the idea of an &ldquo;unconference&rdquo;&hellip; which I kept in mind when I spotted the open spaces board at PyCon 2015.</p>

<p>Before coming back to Montreal for PyCon 2015, I emailed Harry Percival to ask if he could use a teaching assistant during his tutorial on writing tests. His reply was much more enthusiastic than I expected: &ldquo;YES YES OH GOD YES THANK YOU THANK YOU THANK YOU TREY&rdquo;.
I was very honored to be able to help Harry, as my testing workflow was <em>heavily</em> inspired by many blog posts he&rsquo;d written about testing best practices in Django.</p>

<p>I coached at my first Django Girls event in 2015 in Ensenada and then my second at DjangoCon 2015 in Austin. I gave my first lightning talk at DjangoCon 2015, comparing modern JavaScript to Python. It was a lightning talk I had given at the San Diego JavaScript and <a href="https://www.sandiegopython.org">San Diego Python</a> meetups.</p>

<p>In 2016, I attended PyTennessee in Nashville. I remember attending a dinner of of about a dozen folks who spoke at the conference. I was grateful to get to chat with so many folks whose talks I&rsquo;d attended.</p>

<h2>Presenting talks and tutorials</h2>

<p>I presented my first conference tutorial at PyCon 2016 in Portland and <a href="https://pyvideo.org/djangocon-us-2016/readability-counts.html">my first talk</a> at DjangoCon US 2016 in Philadelphia.
I had been presenting lightning talks every few months at my local Python and JavaScript meetups for a few years by then and I had hosted free workshops at my local meetup and paid workshops for training clients.</p>

<p>Having presented locally helped, but presenting on a big stage is always scary.</p>

<h2>Volunteering</h2>

<p>I volunteered at some of my first few conferences and found that I really enjoyed it.
I especially enjoyed running the registration desk, as you&rsquo;re often the first helpful face that people see coming into the conference.</p>

<p>During PyCon 2016, 2017, and 2018, I co-chaired the open spaces thanks to Anna Ossowski inviting me to help.
I had first attended open spaces during PyCon 2015 and I <em>loved</em> them.
Talks are great, but so are discussions!</p>

<p>I also ran for the PSF board of directors in 2016 and ended up serving on the board for a few years before stepping down.
After my board terms, I volunteered for the PSF Code of Conduct working group for about 6 years.
I didn&rsquo;t even know what the PSF <em>was</em> until PyCon 2015!</p>

<h2>A <em>lot</em> of travel&hellip; maybe too much</h2>

<p>After DjangoCon 2016, I went a bit conference-wild.
I attended PyTennessee 2017, PyCaribbean 2017 in Puerto Rico, PyCon US 2017 in Portland, PyCon Australia 2017 in Melbourne, DjangoCon 2017 in Spokane, PyGotham 2017 in NYC, and North Bay Python 2017 in Petaluma.</p>

<p>In 2018 I sponsored PyTennessee and PyOhio and spoke at both.
I passed out chocolate chip cookies at PyTennessee as a way to announce the launch of <a href="https://www.pythonmorsels.com">Python Morsels</a>.
I also attended PyCon 2018 in Cleveland, DjangoCon 2018 in San Diego, PyGotham 2018, and North Bay Python 2018.</p>

<p>I slowed down <em>a bit</em> in 2019, with just PyCascades (Seattle), PyCon US (Cleveland), PyCon Australia (Sydney), and DjangoCon US (San Diego, which is home for me).</p>

<h2>Since the pandemic</h2>

<p>Since the start of the pandemic, I&rsquo;ve attended PyCon US 2022, DjangoCon 2022 in San Diego (in my city for the <em>third</em> time!) and PyCon US 2023.
Traveling is more challenging for me than it used to be, but I hope to attend more regional conferences again soon.</p>

<p>Between client work, I&rsquo;ve been focusing less on conferences and more on blog posts (<a href="https://www.pythonmorsels.com/articles/">over here</a>), <a href="https://www.youtube.com/@PythonMorsels">screencasts</a>, my <a href="https://www.pythonmorsels.com/newsletter/">weekly Python tips</a> emails, and (of course) on <a href="https://www.pythonmorsels.com">Python Morsels</a>.</p>

<h2>My journey started locally</h2>

<p>I became part of the Python community before I knew I was part of it.</p>

<p>I started using Python professionally in December 2009 and I attended my first San Diego Python meetup in March 2012.
I met the organizers, gave some lightning talks, attended Saturday study group sessions (thanks Carol Willing, Alain Domissy, and others for running these), and volunteered to help organize meetups, study groups, and workshops.</p>

<p>By 2014, I had learned from folks online and in-person and I had helped out at my local Python meetup.
I had even made a few contributions to some small Django packages I relied on heavily.</p>

<p>I was encouraged to attend PyCon 2014 by others who were attending (thanks Carol, Micah, and Paul among others).
The conference was well-worth the occasional feeling of overwhelm.</p>

<h2>We&rsquo;re all just people</h2>

<p>The biggest thing I&rsquo;ve repeatedly learned over the past decade of Python conferences is that we&rsquo;re all just people.</p>

<p>Carol Willing keynoted PyCon US 2023.
But I met Carol as a kind Python user in San Diego who started the first Python study group meetings in Pangea Bakery on Convoy Street.</p>

<p>Jay Miller will be keynoting PyCon US 2024.
But I met Jay as an attendee of the Python study group, who was enthusiastic about both learning and teaching others.</p>

<p>My partner, Melanie Arbor, keynoted DjangoCon 2022 along with Jay Miller.
When I met Melanie, she was new to Python and was very eager to both learn and help others.</p>

<p>David Lord has made a huge impact on the maintenance of Flask and other Pallets projects.
I met David as a Python study group attendee who was an enthusiastic StackOverflow contributor.</p>

<p>I learned a ton from Brandon Rhodes, Ned Batchelder, Russell Keith-Magee, and many others from online videos, forums, and open source projects before I ever met them.
But each of them are also just Python-loving people like the rest of us.
Russell gives good hugs, Ned is an organizer of his local Python meetup, and Brandon wears the same brand of shoes as me.</p>

<p>We all have people we&rsquo;ve learned from, we suffer from feelings of inadequacy, we get grumpy sometimes, and we care about the Python language and community in big and small ways.</p>

<h2>What&rsquo;s next for you?</h2>

<p>Will you attend a local meetup?
Or will you attend an online social event?</p>

<p>If so, consider asking the organize if you can present a 5 minute lightning talk at a future event.
As I <a href="https://youtu.be/aNHBr7q-KVw?si=Fryj6Ez4Cw7q-RAq">noted in a DjangoCon 2016 lightning talk</a>, lightning talks are a great way to connect with folks.</p>

<p>Will you attend a Python conference one day?
See <a href="https://treyhunner.com/2018/04/how-to-make-the-most-of-your-first-pycon/">having a great first PyCon</a> when/if you do.</p>

<p>Remember that we&rsquo;re all just people though.
Some may have a bit more experience (whether at speaking, contributing to open source, or something else), but we&rsquo;re just people.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Black Friday &amp; Cyber Monday sales (2023)]]></title>
    <link href="https://treyhunner.com/2023/11/python-black-friday-and-cyber-monday-sales-2023/"/>
    <updated>2023-11-20T08:00:00-08:00</updated>
    <id>https://treyhunner.com/2023/11/python-black-friday-and-cyber-monday-sales-2023</id>
    <content type="html"><![CDATA[<p>It&rsquo;s time for my annual compilation post of <strong>Python learning deals</strong>.
I&rsquo;ve been compiling Python-related Black Friday &amp; Cyber Monday sales <a href="https://treyhunner.com/blog/categories/sales/">since 2018</a> and 2023&rsquo;s Python-related sales are coming up.</p>

<h2>Lifetime Python Morsels access for the price of two years</h2>

<p>I&rsquo;m kicking things off with <a href="https://www.pythonmorsels.com/lifetime-access-sale/">my sale</a> on Python Morsels.
Python Morsels helps developers <strong>deepen their Python skills</strong> in a way that day-to-day coding simply can&rsquo;t.</p>

<p>Python Morsels is designed for:</p>

<ul>
<li>experienced developers frustrated with gaps in their Python knowledge</li>
<li>self-taught programmers seeking courage and confidence in their Python abilities</li>
<li>experienced Python developers hoping to dive even deeper</li>
</ul>


<p>If you saw yourself in that list and you plan to use Python heavily for at least a few more years, I highly recommend checking out <a href="https://www.pythonmorsels.com/lifetime-access-sale/">the Python Morsels sale</a>.</p>

<p>From now through November 27, you can get <strong>lifetime access</strong> to Python Morsels for a one-time fee.
Python Morsels usually costs <strong>$240/year</strong> but lifetime access is <strong>only $480</strong>.
This is the best sale I&rsquo;ve ever offered on Python Morsels and I&rsquo;m guessing this might be the best Python-related deal this year.</p>

<p><a href="https://pythonmorsels.com/lifetime-access-sale/" class="subscribe-btn form-big">💰 See the Python Morsels sale</a></p>

<h2>On sale now</h2>

<p>Here are Python-related sales that are live right now:</p>

<ul>
<li><strong><a href="https://www.pythonmorsels.com/lifetime-access-sale/">Python Morsels</a></strong>: lifetime access to my Python skill-building platform for the price of 2 years</li>
<li><strong><a href="https://learning.oreilly.com/signup/?promotion_code=CYBERWEEK23">O'Reilly Media</a></strong>: the first year is $200 off with the coupon <code>CYBERWEEK23</code> ($299 instead of $499)</li>
<li><strong><a href="http://talkpython.fm/black-friday">Talk Python</a></strong>: 50% off 5 of their courses</li>
<li><strong><a href="https://courses.dataschool.io/black-friday">Data School</a></strong>: 40% off all Kevin Markham&rsquo;s courses</li>
<li><strong><a href="https://courses.pythontest.com/p/complete-pytest-course?code=BLACKFRIDAY">Brian Okken</a></strong>: 50% off pytest course and community access with coupon code <code>BLACKFRIDAY</code> (ends Nov 30)</li>
<li><strong><a href="https://lernerpython.com/bfcm-2023/">Reuven Lerner</a></strong>: 40% off Reuven&rsquo;s courses and 25% off a new membership he&rsquo;s launching</li>
<li><strong><a href="https://www.linkedin.com/feed/update/urn:li:activity:7133217889460883456/">Matt Harrison</a></strong>: 20% off Matt&rsquo;s corporate training</li>
<li><strong><a href="https://learnbyexample.gumroad.com">Sundeep Agarwal</a></strong>: around 70% off Sundeep&rsquo;s <a href="https://learnbyexample.gumroad.com/l/all-books/FestiveOffer">all book</a> and <a href="https://learnbyexample.gumroad.com/l/python-bundle/FestiveOffer">Python</a> and his <a href="https://learnbyexample.gumroad.com/l/py_regex/FestiveOffer">regex</a> book is free</li>
<li><strong><a href="https://www.blog.pythonlibrary.org">Mike Driscoll</a></strong>: 33% off Mike&rsquo;s Python <a href="https://driscollis.gumroad.com/">books</a> and <a href="https://www.teachmepython.com/">courses</a> with code <code>black2023</code></li>
<li><strong><a href="https://thepythoncodingplace.com/membership/">Stephen Gruppetta</a></strong>: 70% off pre-sale on his new Python membership ($95 instead of $395)</li>
<li><strong><a href="https://mathspp.gumroad.com/">Rodrigo</a></strong>: 40% discount on Rodrigo&rsquo;s upcoming <a href="https://mathspp.gumroad.com/l/pythonbootcamp?code=bootcampbf23">bootcamp</a> and on his <a href="https://mathspp.gumroad.com/l/comprehending-comprehensions?code=presale">comprehensions course</a></li>
<li><strong><a href="https://nostarch.com/catalog/python">No Starch</a></strong>: 35% off with code <code>DEALS4DAYS</code> (Crash Course, Automate The Boring Stuff, etc.)</li>
<li><strong><a href="https://pragprog.com/">Pragmatic Bookshelf</a></strong>: 40% off <a href="https://pragprog.com/titles/bopytest2/python-testing-with-pytest-second-edition/">the pytest book</a> and all other books with code <code>turkeycode2023</code></li>
<li><strong><a href="https://www.manning.com/catalog#section-50">Manning</a></strong> 50% off eBooks, 40% off print books</li>
<li><strong><a href="https://udemy.com">Udemy</a></strong>: various <a href="https://www.udemy.com/topic/python/">Python courses</a> are on sale right now</li>
</ul>


<p>If you know of another sale (or a likely sale) <strong>please comment below</strong>.</p>

<h2>Django sales</h2>

<p>Adam Johnson is also compiling many <strong>Django-related Black Friday and Cyber Monday sales</strong> via a <a href="https://adamj.eu/tech/2023/11/20/django-black-friday-deals-2023/">Django sales post</a>.</p>

<h2>More developer-oriented deals</h2>

<p>For even more Black Friday deals for software developers, see <a href="https://blackfridaydeals.dev">BlackFridayDeals.dev</a>, which I believe launched this year.</p>

<h2>Go get yourself some deals!</h2>

<p>Go hop on those sales! (But make sure to put an event in your calendar to actually use what you purchase. 😉)
And if you have questions about the <a href="https://www.pythonmorsels.com/lifetime-access-sale/"><strong>Python Morsels Cyber Monday sale</strong></a> please comment below or <a href="mailto:he&amp;#108;p&amp;#64;&amp;#112;%7&amp;#57;th%6Fnmo&amp;#114;s%6&amp;#53;ls&amp;#46;&amp;#99;&amp;#111;m">email me</a>.</p>

<p>Happy Python-ing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Morsels Cyber Monday sale]]></title>
    <link href="https://treyhunner.com/2022/11/python-morsels-cyber-monday-sale/"/>
    <updated>2022-11-25T08:30:00-08:00</updated>
    <id>https://treyhunner.com/2022/11/python-morsels-cyber-monday-sale</id>
    <content type="html"><![CDATA[<p>Python Morsels helps Python users <strong>sharpen their Python skills</strong> in a way that writing production code doesn&rsquo;t. If you are:</p>

<ul>
<li>an experienced developer, frustrated with <strong>gaps in your Python knowledge</strong></li>
<li>a self-taught programmer seeking <strong>courage and confidence</strong> in your Python abilities</li>
<li>or an intermediate-level Python learner trying to <strong>deepen your Python skills</strong></li>
</ul>


<p>&hellip;a weekly Python Morsels habit can help you make <strong>consistent progress</strong> and <strong>noticeable growth</strong> in <strong>just a few months</strong>.</p>

<p>Python Morsels is <strong>on sale</strong> through Cyber Monday. <a href="https://www.pythonmorsels.com/all-python-exercises-and-screencasts/">Subscribe</a> now to <strong><a href="https://www.pythonmorsels.com/pricing/">save up to $108 per year</a></strong>.</p>

<h2>Day-to-day coding isn&rsquo;t purposeful learning</h2>

<p>If you write Python frequently, you likely learn new things all the time.
The learning you get from day-to-day coding is messy and unpredictable. Yes, learning happens, but gradually.</p>

<p>What if you could <strong>learn something unexpected about Python</strong> in <strong>just 30 minutes</strong> a week?</p>

<p>That&rsquo;s what Python Morsels is designed to do: push you <em>just</em> outside your comfort zone to <strong>discover something new</strong> without requiring a big time sink.</p>

<blockquote><p>The time I spent working on Python Morsels problems translates into saved time programming for work. And it&rsquo;s not a grind - it&rsquo;s actually fun. I&rsquo;ve learned advanced Python concepts that I would have never had the opportunity to use in my day to day work.
<br><span style="float: right;">
— Eric Pederson, <a href="https://www.pythonmorsels.com/testimonials/#tag:short_on_time">Python Morsels user</a></span>
<br></p></blockquote>

<div class="clearfix"></div>


<h2>Guided Python practice every single week</h2>

<p>Python Morsels is <strong>quite different</strong> from many other Python learning systems: you tell me your Python skill level (from <strong>novice</strong> to <strong>advanced</strong>) and I send you small tasks to help you sharpen your Python skills.</p>

<p>Every Monday, you&rsquo;ll receive an email from me with:</p>

<ul>
<li>a short screencast to watch (or read)</li>
<li>a multi-part exercise to move you outside your comfort zone (often achievable in 30 minutes)</li>
<li>a mini exercise that you can accomplish in just 10 minutes</li>
<li>links to dive deeper into subsequent screencasts and exercises</li>
</ul>


<p>If you&rsquo;d like to nudge your learning in a specific direction, you can always work through a topic-specific exercise path, or watch one of my many screencast series.</p>

<h2>Does this actually work?</h2>

<p>If you use Python Morsels even semi-regularly, I’m confident your Python skills will improve.</p>

<p>Here&rsquo;s what Python Morsels users have to say:</p>

<blockquote><p>I was hesitant about paying for Python Morsels given how many free learning resources there are. But it was definitely worth it. I&rsquo;ve learnt more from Python Morsels than anything else, by far.
<br><span style="float: right;">
— Cosmo Grant</span>
<br></p></blockquote>

<div class="clearfix"></div>


<blockquote><p>During my study of Python, I used various programming challenge sites. I can say for sure that this is the best challenge site I have ever come across.
<br><span style="float: right;">
— Bartosz Chojnacki</span>
<br></p></blockquote>

<div class="clearfix"></div>


<p>Not sure? <a href="https://www.pythonmorsels.com/testimonials/">Read more from Python Morsels users here</a>.</p>

<h2>Lock-in your $200/year subscription</h2>

<p>Python Morsels currently includes <strong>over 150 screencasts and articles</strong> and <strong>nearly 200 exercises</strong>, each of which links to over a dozen helpful resources.</p>

<p>Subscribe before November 29, 2022 to lock-in your subscription at $200/year.</p>

<p><a href="https://www.pythonmorsels.com/pricing" class="subscribe-btn form-big">Subscribe to Python Morsels 💰</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Black Friday &amp; Cyber Monday sales (2022)]]></title>
    <link href="https://treyhunner.com/2022/11/python-black-friday-and-cyber-monday-sales-2022/"/>
    <updated>2022-11-22T10:15:00-08:00</updated>
    <id>https://treyhunner.com/2022/11/python-black-friday-and-cyber-monday-sales-2022</id>
    <content type="html"><![CDATA[<p>It&rsquo;s that time of year again… time for my annual compilation post of <strong>Black Friday and Cyber Monday deals for learning Python</strong>.</p>

<h2>Save up to $108 a year on Python Morsels</h2>

<p>Of course I&rsquo;m going to kick things off with my own sale. 😉</p>

<p><a href="https://trey.io/cyber-monday-sale-2022">Python Morsels</a> helps developers <strong>deepen their Python skills</strong> in a way that day-to-day coding simply can&rsquo;t.</p>

<p>Python Morsels is specifically crafted for:</p>

<ul>
<li>experienced developers frustrated with gaps in their Python knowledge</li>
<li>self-taught programmers seeking courage and confidence in their Python abilities</li>
<li>intermediate-level Python learners trying to deepen skills</li>
</ul>


<p>If you saw yourself in that list, subscribe now before prices increase on November 29, 2022!</p>

<p><a href="https://trey.io/cyber-monday-sale-2022" class="subscribe-btn form-big">💰 See the Python Morsels sale</a></p>

<h2>Python books, courses, templates, and exercises</h2>

<p>There are a <em>lot</em> of Python-related sales going on this year.
Note that some of the below sales include courses, some include books, some include templates (Itamar&rsquo;s Docker templates for example) and some include a mix of different learning products.</p>

<ul>
<li><strong><a href="https://store.lerner.co.il/?coupon=BF2022">Reuven Lerner</a></strong>: Reuven&rsquo;s Python courses are 40% off this week with the coupon <code>BF2022</code></li>
<li><strong><a href="http://talkpython.fm/black-friday">Talk Python</a></strong>: Get all Talk Python courses in one $249 bundle</li>
<li><strong>Sundeep Agarwal</strong>: Sundeep&rsquo;s <a href="https://learnbyexample.gumroad.com/l/all-books/FestiveOffer">all books bundle is 64% off</a> (it&rsquo;s $10), the <a href="https://learnbyexample.gumroad.com/l/python-bundle/FestiveOffer">Learn by example Python bundle</a> is 80% off (it&rsquo;s $3), and <a href="https://learnbyexample.gumroad.com/l/py_projects/FestiveOffer">Practice Python Projects</a> is free!</li>
<li><strong><a href="https://store.metasnake.com/?coupon=PANDAS30">Matt Harrison</a></strong>: Matt&rsquo;s offering 30% off his Effective Pandas book on Friday <strong>only</strong></li>
<li><strong><a href="https://pythonspeed.com/products/docker/">Itamar Turner-Trauring</a></strong>: Itamar&rsquo;s Docker packaging products for Python are all 25% off through November with the code <code>FALL22</code></li>
<li><strong><a href="https://www.blog.pythonlibrary.org/2022/11/22/python-black-friday-cyber-monday-sales-2022/">Mike Driscoll</a></strong>: Mike is offering $10 off any of his books this year with the coupon code <code>black2022</code></li>
<li><strong><a href="https://nostarch.com/catalog/python">No Starch</a></strong>: books are 35% off with the coupon <code>HOLIDAYDEALS</code></li>
<li><strong><a href="https://pragprog.com/">Pragmatic Bookshelf</a></strong>: save 40% on Brian Okken&rsquo;s PyTest book or any other Pragmatic Bookshelf book with the coupon code <code>turkeysale2022</code></li>
<li><strong><a href="https://udemy.com">Udemy</a></strong>: various Python courses are also on sale on Udemy right now, including Al Sweigart&rsquo;s <a href="https://www.udemy.com/course/automate/">Automate the Boring Stuff with Python course</a></li>
</ul>


<h2>Python learning subscriptions</h2>

<p>I use a subscription model for <a href="https://trey.io/cyber-monday-sale-2022">Python Morsels</a> because subscriptions (when done well) can encourage habitual learning, which is often more effective than binge-learning.
But Python Morsels isn&rsquo;t the only subscription-based Python learning platform.</p>

<p>Here sales on other learning subscriptions:</p>

<ul>
<li><strong><a href="https://www.oreilly.com/online-learning/cyber-monday-2022.html">O'Reilly Media</a></strong> subscriptions are $200 off with the coupon <a href="https://www.oreilly.com/online-learning/cyber-monday-2022.html">CYBERWEEK22</a></li>
<li><strong><a href="https://www.dunderdata.com/black-friday">Dunder Data</a></strong> subscriptions (by Ted Petrou) are 40% off (normally $399), plus an extra 50% off for completing 3 certificates within 3 months</li>
<li><strong><a href="https://www.datacamp.com/promo/black-friday-2022">DataCamp</a></strong> has a 50% off sale on their annual subscriptions right now as well</li>
</ul>


<p>Also here&rsquo;s a Python-related service that&rsquo;s on sale (a subscription product, not a learning service):</p>

<ul>
<li><strong>Sourcery</strong>: <a href="https://sourcery.ai/pricing/">Sourcery Pro</a> is 33% off for the first 12 months with coupon <code>BLACKFRIDAY2022</code></li>
</ul>


<h2>Django sales</h2>

<p>Adam Johnson compiled many <a href="https://adamj.eu/tech/2022/11/21/django-black-friday-deals-2022/"><strong>Django-related Black Friday and Cyber Monday sales</strong></a>.</p>

<p>Here&rsquo;s a quick summary:</p>

<ul>
<li>Will Vincent is offering 50% off a bundle for newer Django developers (<a href="https://wsvincent.gumroad.com/l/bhylo/blackfriday2022">sale</a>)</li>
<li>Adam Johnson is offering 50% off his books for experienced Django developers (<a href="https://adamj.eu/tech/2022/11/21/django-black-friday-deals-2022/">announcement</a>)</li>
<li>Test Driven is selling a discounted bundle of courses on Django REST Framework, Celery, and search (<a href="https://testdriven.io/bundle/django-black-friday/">sale</a>)</li>
</ul>


<p>Plus other discounted books, apps, templates, and services from others: <a href="https://adamj.eu/tech/2022/11/21/django-black-friday-deals-2022/">read Adam&rsquo;s full post</a> for more details on the Django-related sales this year.</p>

<h2>Go get yourself some deals!</h2>

<p>Go hop on those sales! (But make sure to put an event in your calendar to actually use what you purchase. 😉)</p>

<p>And if you have questions about the <a href="https://trey.io/cyber-monday-sale-2022"><strong>Python Morsels Cyber Monday sale</strong></a> please comment below or <a href="mailto:he&amp;#108;p&amp;#64;&amp;#112;%7&amp;#57;th%6Fnmo&amp;#114;s%6&amp;#53;ls&amp;#46;&amp;#99;&amp;#111;m">email me</a>.</p>

<p>Happy Python-ing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Overlooked facts about variables and objects in Python: it's all about pointers]]></title>
    <link href="https://treyhunner.com/2022/03/variables-objects-and-pointers-in-python/"/>
    <updated>2022-03-29T08:00:00-07:00</updated>
    <id>https://treyhunner.com/2022/03/variables-objects-and-pointers-in-python</id>
    <content type="html"><![CDATA[<p><em>This article was originally published <a href="https://www.pythonmorsels.com/pointers/">on Python Morsels</a>.</em></p>

<p>In Python, variables and data structures <strong>don&rsquo;t contain objects</strong>.
This fact is both commonly overlooked and tricky to internalize.</p>

<p>You can happily use Python for years without really understanding the below concepts, but this knowledge can certainly help alleviate <em>many</em> common Python gotchas.</p>

<p>Table of Contents:</p>

<ul data-toc=".entry-content"></ul>


<h2>Terminology</h2>

<p>Let&rsquo;s start with by introducing some terminology.
The last few definitions likely won&rsquo;t make sense until we define them in more detail later on.</p>

<p><strong>Object</strong> (a.k.a. <strong>value</strong>): a &ldquo;thing&rdquo;.
Lists, dictionaries, strings, numbers, tuples, functions, and modules are all objects.
&ldquo;Object&rdquo; defies definition because <a href="https://www.pythonmorsels.com/topics/everything-is-an-object/">everything is an object in Python</a>.</p>

<p><strong>Variable</strong> (a.k.a. <strong>name</strong>): a name used to refer to an object.</p>

<p><strong>Pointer</strong> (a.k.a. <strong>reference</strong>): describes where an object lives (often shown visually as an arrow)</p>

<p><strong>Equality</strong>: whether two objects represent the same data</p>

<p><strong>Identity</strong>: whether two pointers refer to the same object</p>

<p>These terms are best understood by their relationships to each other and that&rsquo;s the primarily purpose of this article.</p>

<h2>Python&rsquo;s variables are pointers, not buckets</h2>

<p>Variables in Python are not buckets containing things; they&rsquo;re <strong>pointers</strong> (they <em>point</em> to objects).</p>

<p>The word &ldquo;pointer&rdquo; may sound scary, but a lot of that scariness comes from related concepts (e.g. dereferencing) which aren&rsquo;t relevant in Python.
In Python a pointer just represents <strong>the connection between a variable and an objects</strong>.</p>

<p>Imagine <strong>variables</strong> living in <em>variable land</em> and <strong>objects</strong> living in <em>object land</em>.
A <strong>pointer</strong> is a little arrow that connects each variable to the object it <strong>points to</strong>.</p>

<p><img class="&ldquo;no-radius full-width&rdquo;" src="/images/variable-diagram-different-values.svg" title="Diagram showing variables on the left and objects on the right, with arrows between each. The numbers variable points to a list. The numbers2 variable points to a separate list. The name variable points to a string." ></p>

<p>This above diagram represents the state of our Python process after running this code:</p>

<pre><code class="pycon">&gt;&gt;&gt; numbers = [2, 1, 3, 4, 7]
&gt;&gt;&gt; numbers2 = [11, 18, 29]
&gt;&gt;&gt; name = "Trey"
</code></pre>

<p>If the word <strong>pointer</strong> scares you, use the word <strong>reference</strong> instead.
Whenever you see pointer-based phrases in this article, do a mental translation to a reference-based phrase:</p>

<ul>
<li><strong>pointer</strong> &rArr; <strong>reference</strong></li>
<li><strong>point to</strong> &rArr; <strong>refer to</strong></li>
<li><strong>pointed to</strong> &rArr; <strong>referenced</strong></li>
<li><strong>point X to Y</strong> &rArr; <strong>cause X to refer to Y</strong></li>
</ul>


<h2>Assignments point a variable to an object</h2>

<p>Assignment statements point a variable to an object.
That&rsquo;s it.</p>

<p>If we run this code:</p>

<pre><code class="pycon">&gt;&gt;&gt; numbers = [2, 1, 3, 4, 7]
&gt;&gt;&gt; numbers2 = numbers
&gt;&gt;&gt; name = "Trey"
</code></pre>

<p>The state of our variables and objects would look like this:</p>

<p><img class="&ldquo;no-radius full-width&rdquo;" src="/images/variable-diagram-same-value.svg" title="Diagram showing variables on the left and objects on the right, with arrows between each. The numbers and numbers2 variables have arrows coming out of them pointing to the same list. The name variable points to a string." ></p>

<p>Note that <code>numbers</code> and <code>numbers2</code> <strong>point to the same object</strong>.
If we <em>change</em> that object, both variables will seem to &ldquo;see&rdquo; that change:</p>

<pre><code class="pycon">&gt;&gt;&gt; numbers.pop()
7
&gt;&gt;&gt; numbers
[2, 1, 3, 4]
&gt;&gt;&gt; numbers2
[2, 1, 3, 4]
</code></pre>

<p>That strangeness was all due to this assignment statement:</p>

<pre><code class="pycon">&gt;&gt;&gt; numbers2 = numbers
</code></pre>

<p>Assignment statements don&rsquo;t copy anything: they just point a variable to an object.
So assigning one variable to another variable just <strong>points two variables to the same object</strong>.</p>

<h2>The 2 types of &ldquo;change&rdquo; in Python</h2>

<p>Python has 2 distinct types of &ldquo;change&rdquo;:</p>

<ol>
<li><strong>Assignment</strong> changes a variable (it changes <em>which</em> object it points to)</li>
<li><strong>Mutation</strong> changes an object (which any number of variables might point to)</li>
</ol>


<p>The word &ldquo;change&rdquo; is often ambiguous.
The phrase &ldquo;we changed <code>x</code>&rdquo; could mean &ldquo;we re-assigned <code>x</code>&rdquo; or it might mean &ldquo;we mutated the object <code>x</code> points to&rdquo;.</p>

<p><strong>Mutations change objects</strong>, not variables.
But variables <em>point to</em> objects.
So if another variable points to an object that <em>we&rsquo;ve just mutated</em>, that other variable will reflect the same change; not because the variable changed but because <strong>the object it points to</strong> changed.</p>

<h2>Equality compares objects and identity compares pointers</h2>

<p>Python&rsquo;s <code>==</code> operator checks that two objects <strong>represent the same data</strong> (a.k.a. <strong>equality</strong>):</p>

<pre><code class="pycon">&gt;&gt;&gt; my_numbers = [2, 1, 3, 4]
&gt;&gt;&gt; your_numbers = [2, 1, 3, 4]
&gt;&gt;&gt; my_numbers == your_numbers
True
</code></pre>

<p>Python&rsquo;s <code>is</code> operator checks whether two objects <strong>are the same object</strong> (a.k.a. <strong>identity</strong>):</p>

<pre><code class="pycon">&gt;&gt;&gt; my_numbers is your_numbers
False
</code></pre>

<p>The variables <code>my_numbers</code> and <code>your_numbers</code> point to <strong>objects representing the same data</strong>, but the objects they point to <strong>are not the same object</strong>.</p>

<p>So changing one object doesn&rsquo;t change the other:</p>

<pre><code class="pycon">&gt;&gt;&gt; my_numbers[0] = 7
&gt;&gt;&gt; my_numbers == your_numbers
False
</code></pre>

<p>If two variables point to the same object:</p>

<pre><code class="pycon">&gt;&gt;&gt; my_numbers_again = my_numbers
&gt;&gt;&gt; my_numbers is my_numbers_again
True
</code></pre>

<p>Changing the object one variable points also changes the object the other points to because they both point to the same object:</p>

<pre><code class="pycon">&gt;&gt;&gt; my_numbers_again.append(7)
&gt;&gt;&gt; my_numbers_again
[2, 1, 3, 4, 7]
&gt;&gt;&gt; my_numbers
[2, 1, 3, 4, 7]
</code></pre>

<p>The <code>==</code> operator checks for <strong>equality</strong> and the <code>is</code> operator checks for <strong>identity</strong>.
This distinction between identity and equality exists because variables <strong>don&rsquo;t contain objects</strong>, they <strong>point to objects</strong>.</p>

<p>In Python equality checks are very common and <a href="https://www.pythonmorsels.com/topics/equality-vs-identity/">identity checks are very rare</a>.</p>

<h2>There&rsquo;s no exception for immutable objects</h2>

<p>But wait, modifying a number <em>doesn&rsquo;t</em> change other variables pointing to the same number, right?</p>

<pre><code class="pycon">&gt;&gt;&gt; n = 3
&gt;&gt;&gt; m = n  # n and m point to the same number
&gt;&gt;&gt; n += 2
&gt;&gt;&gt; n  # n has changed
5
&gt;&gt;&gt; m  # but m hasn't changed!
3
</code></pre>

<p>Well, <strong>modifying a number is not possible</strong> in Python.
Numbers and strings are both <strong>immutable</strong>, meaning you can&rsquo;t mutate them.
You <strong>cannot change</strong> an immutable object.</p>

<p>So what about that <code>+=</code> operator above?
Didn&rsquo;t that mutate a number?
(It didn&rsquo;t.)</p>

<p>With immutable objects, these two statements are equivalent:</p>

<pre><code class="pycon">&gt;&gt;&gt; n += 2
&gt;&gt;&gt; n = n + 2
</code></pre>

<p>For immutable objects, augmented assignments (<code>+=</code>, <code>*=</code>, <code>%=</code>, etc.) perform an operation (which returns a new object) and then do an assignment (to that new object).</p>

<p>Any operation you might <em>think</em> changes a string or a number instead returns a new object.
Any operation on an immutable object always <strong>returns a new object</strong> instead of modifying the original.</p>

<h2>Data structures contain pointers</h2>

<p>Like variables, data structures <strong>don&rsquo;t contain objects</strong>, they <strong>contain pointers to objects</strong>.</p>

<p>Let&rsquo;s say we make a list-of-lists:</p>

<pre><code class="pycon">&gt;&gt;&gt; matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
</code></pre>

<p>And then we make a variable pointing to the second list in our list-of-lists:</p>

<pre><code class="pycon">&gt;&gt;&gt; row = matrix[1]
&gt;&gt;&gt; row
[4, 5, 6]
</code></pre>

<p>The state of our variables and objects now looks like this:</p>

<p><img class="&ldquo;no-radius full-width&rdquo;" src="/images/data-structures-diagram.svg" title="Diagram showing matrix variable which points to a list of 3 items. Each item has an arrow coming out of it, pointing to a separate list. Each of these sublists has 3 elements which each point to a separate integer object. There&rsquo;s also a row variable which points to a list that&rsquo;s also pointed to by index 1 of the matrix list." ></p>

<p>Our <code>row</code> variable <strong>points to the same object</strong> as index <code>1</code> in our <code>matrix</code> list:</p>

<pre><code class="pycon">&gt;&gt;&gt; row is matrix[1]
True
</code></pre>

<p>So if we mutate the list that <code>row</code> points to:</p>

<pre><code class="pycon">&gt;&gt;&gt; row[0] = 1000
</code></pre>

<p>We&rsquo;ll see that change in both places:</p>

<pre><code class="pycon">&gt;&gt;&gt; row
[1000, 5, 6]
&gt;&gt;&gt; matrix
[[1, 2, 3], [1000, 5, 6], [7, 8, 9]]
</code></pre>

<p>It&rsquo;s common to speak of data structures &ldquo;containing&rdquo; objects, but they actually only contain pointers to objects.</p>

<h2>Function arguments act like assignment statements</h2>

<p>Function calls also perform assignments.</p>

<p>If you mutate an object that was passed-in to your function, you&rsquo;ve mutated the original object:</p>

<pre><code class="pycon">&gt;&gt;&gt; def smallest_n(items, n):
...     items.sort()  # This mutates the list (it sorts in-place)
...     return items[:n]
...
&gt;&gt;&gt; numbers = [29, 7, 1, 4, 11, 18, 2]
&gt;&gt;&gt; smallest_n(numbers, 4)
[1, 2, 4, 7]
&gt;&gt;&gt; numbers
[1, 2, 4, 7, 11, 18, 29]
</code></pre>

<p>But if you reassign a variable to a different object, the original object will not change:</p>

<pre><code class="pycon">&gt;&gt;&gt; def smallest_n(items, n):
...     items = sorted(items)  # this makes a new list (original is unchanged)
...     return items[:n]
...
&gt;&gt;&gt; numbers = [29, 7, 1, 4, 11, 18, 2]
&gt;&gt;&gt; smallest_n(numbers, 4)
[1, 2, 4, 7]
&gt;&gt;&gt; numbers
[29, 7, 1, 4, 11, 18, 2]
</code></pre>

<p>We&rsquo;re reassigning the <code>items</code> variable here.
That reassignment changes <em>which</em> object the <code>items</code> variable points to, but it doesn&rsquo;t change the original object.</p>

<p>We <strong>changed an object</strong> in the first case and we <strong>changed a variable</strong> in the second case.</p>

<p>Here&rsquo;s another example you&rsquo;ll sometimes see:</p>

<pre><code class="python">class Widget:
    def __init__(self, attrs=(), choices=()):
        self.attrs = list(attrs)
        self.choices = list(choices)
</code></pre>

<p>Class <a href="https://www.pythonmorsels.com/topics/what-is-init/">initializer methods</a> often copy iterables given to them by making a new list out of their items.
This allows the class to accept any iterable (not just lists) and decouples the original iterable from the class (modifying these lists won&rsquo;t upset the original caller).
The above example was <a href="https://github.com/django/django/blob/4.0.2/django/forms/widgets.py#L560,L565">borrowed from Django</a>.</p>

<p><strong>Don&rsquo;t mutate the objects</strong> passed-in to your function unless the function caller expects you to.</p>

<h2>Copies are shallow and that&rsquo;s usually okay</h2>

<p>Need to copy a list in Python?</p>

<pre><code class="pycon">&gt;&gt;&gt; numbers = [2000, 1000, 3000]
</code></pre>

<p>You could call the <code>copy</code> method (if you&rsquo;re certain your iterable is a list):</p>

<pre><code class="pycon">&gt;&gt;&gt; my_numbers = numbers.copy()
</code></pre>

<p>Or you could pass it to the <code>list</code> constructor (this works on <strong>any iterable</strong>):</p>

<pre><code class="pycon">&gt;&gt;&gt; my_numbers = list(numbers)
</code></pre>

<p>Both of these techniques make a new list which <strong>points to the same objects</strong> as the original list.</p>

<p>The two lists are distinct, but the objects within them are the same:</p>

<pre><code class="pycon">&gt;&gt;&gt; numbers is my_numbers
False
&gt;&gt;&gt; numbers[0] is my_numbers[0]
True
</code></pre>

<p>Since integers (and all numbers) are immutable in Python we don&rsquo;t really care that each list contains the same objects because we can&rsquo;t mutate those objects anyway.</p>

<p>With mutable objects, this distinction matters.
This makes two list-of-lists which each contain pointers to the same three lists:</p>

<pre><code class="pycon">&gt;&gt;&gt; matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
&gt;&gt;&gt; new_matrix = list(matrix)
</code></pre>

<p>These two lists aren&rsquo;t the same, but each item within them is the same:</p>

<pre><code class="pycon">&gt;&gt;&gt; matrix is new_matrix
False
&gt;&gt;&gt; matrix[0] is new_matrix[0]
True
</code></pre>

<p>Here&rsquo;s a rather complex visual representation of these two objects and the pointers they contain:</p>

<p><img class="&ldquo;no-radius full-width&rdquo;" src="/images/data-structures-same-pointers-diagram.svg" title="Diagram showing matrix variable which points to a list of 3 items and a new_matrix variable which points to a separate list of 3 items. Each corresponding item in each of these matrix and new_matrix lists points to the same sublist." ></p>

<p>So if we mutate the first item in one list, it&rsquo;ll mutate the same item within the other list:</p>

<pre><code class="pycon">&gt;&gt;&gt; matrix[0].append(100)
&gt;&gt;&gt; matrix
[[1, 2, 3, 100], [4, 5, 6], [7, 8, 9]]
&gt;&gt;&gt; new_matrix
[[1, 2, 3, 100], [4, 5, 6], [7, 8, 9]]
</code></pre>

<p>When you copy an object in Python, if that object <strong>points to other objects</strong>, you&rsquo;ll copy pointers to those other objects instead of copying the objects themselves.</p>

<p>New Python programmers respond to this behavior by sprinkling <code>copy.deepcopy</code> into their code.
The <code>deepcopy</code> function attempts to recursively copy an object along with all objects it points to.</p>

<p>Sometimes new Python programmers will use <code>deepcopy</code> to recursively copy data structures:</p>

<pre><code class="python">from copy import deepcopy
from datetime import datetime

tweet_data = [{"date": "Feb 04 2014", "text": "Hi Twitter"}, {"date": "Apr 16 2014", "text": "At #pycon2014"}]

# Parse date strings into datetime objects
processed_data = deepcopy(tweet_data)
for tweet in processed_data:
    tweet["date"] = datetime.strptime(tweet["date"], "%b %d %Y")
</code></pre>

<p>But in Python, we often prefer to make new objects instead of mutating existing objects.
So we could entirely remove that <code>deepcopy</code> usage above by making a new list of new dictionaries instead of deep-copying our old list-of-dictionaries.</p>

<pre><code class="python"># Parse date strings into datetime objects
processed_data = [
    {**tweet, "date": datetime.strptime(tweet["date"], "%b %d %Y")}
    for tweet in tweet_data
]
</code></pre>

<p>We tend to prefer shallow copies in Python.
If you <strong>don&rsquo;t mutate objects that don&rsquo;t belong to you</strong> you usually won&rsquo;t have any need for <code>deepcopy</code>.</p>

<p>The <code>deepcopy</code> function certainly has its uses, but it&rsquo;s often unnecessary.
&ldquo;How to avoid using <code>deepcopy</code>&rdquo; warrants a separate discussion in a future article.</p>

<h2>Summary</h2>

<p>Variables in Python are not buckets containing things; they&rsquo;re <strong>pointers</strong> (they <em>point</em> to objects).</p>

<p>Python&rsquo;s model of variables and objects boils down to two primary rules:</p>

<ol>
<li><strong>Mutation</strong> changes an object</li>
<li><strong>Assignment</strong> points a variable to an object</li>
</ol>


<p>As well as these corollary rules:</p>

<ol>
<li><strong>Reassigning</strong> a variable points it to <strong>a different object</strong>, leaving the original object unchanged</li>
<li><strong>Assignments don&rsquo;t copy</strong> anything, so it&rsquo;s up to you to copy objects as needed</li>
</ol>


<p>Furthermore, data structures work the same way: lists and dictionaries container <strong>pointers to objects</strong> rather than the objects themselves.
And attributes work the same way: <strong>attributes point to objects</strong> (just like any variable points to an object).
So <strong>objects cannot contain objects in Python</strong> (they can only <em>point to</em> objects).</p>

<p>And note that while <strong>mutations change objects</strong> (not variables), multiple variables <em>can</em> point to the same object.
If two variables point to the same object changes to that object will be seen when accessing either variable (because they both point to <em>the same</em> object).</p>

<p>For more on this topic see:</p>

<ul>
<li>My <a href="https://www.pythonmorsels.com/topics/playlist/assignment-and-mutation/">screencast series on Assignments and Mutation in Python</a></li>
<li>Ned Batchelder&rsquo;s <a href="https://nedbatchelder.com/text/names1.html">Python Names and Values</a> talk</li>
<li>Brandon Rhodes' <a href="https://pyvideo.org/pyohio-2011/pyohio-2011-names-objects-and-plummeting-from.html">Names, Objects, and Plummeting From The Cliff</a> talk</li>
</ul>


<p>This mental model of Python is tricky to internalize so it&rsquo;s okay if it still feels confusing!
Python&rsquo;s features and best practices <em>often</em> nudge us toward &ldquo;doing the right thing&rdquo; automatically.
But if your code is acting strangely, it might be due to changing an object you didn&rsquo;t mean to change.</p>
]]></content>
  </entry>
  
</feed>
