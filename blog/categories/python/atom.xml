<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Trey Hunner]]></title>
  <link href="https://treyhunner.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="https://treyhunner.com/"/>
  <updated>2024-08-20T14:11:16-07:00</updated>
  <id>https://treyhunner.com/</id>
  <author>
    <name><![CDATA[Trey Hunner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[10-Week Hands-On Python Course]]></title>
    <link href="https://treyhunner.com/2024/08/python-high-five/"/>
    <updated>2024-08-20T14:20:00-07:00</updated>
    <id>https://treyhunner.com/2024/08/python-high-five</id>
    <content type="html"><![CDATA[<p>Ever wished you could take an <strong>Intro to Python training</strong> with me, but you don&rsquo;t work for a company with a generous training budget?
I&rsquo;m running a Python-learning program just for this situation.</p>

<p><a href="https://www.pythonmorsels.com/high-five/">Python High Five</a> is a 10-week Python jumpstart program that starts <strong>this September</strong>.</p>

<h2>Set aside the time to learn ‚åö</h2>

<p>One of the biggest problems for folks starting to learn Python is <strong>setting aside the time</strong>.
And even if you <em>do</em> manage to set aside the time, you&rsquo;ll often hit a roadblock where you feel <strong>confused</strong>.</p>

<p>Python High Five is a way to keep a <strong>daily learning habit</strong> <em>and</em> to <strong>get help</strong> when find yourself stuck.</p>

<p>This program is based around <strong>daily practice</strong>.
Monday through Friday you&rsquo;ll pick <strong>30 minutes</strong> from your schedule, at any time that works you.
During those 30 minutes, you&rsquo;ll watch a 5 minute video, work on the day&rsquo;s exercise, and reflect on your progress.</p>

<h2>The most effective learning is hands-on üñêÔ∏è</h2>

<p>Python High Five is all about learning through <strong>writing Python code</strong>.
Each week we&rsquo;ll dive deeper into Python, building upon what we&rsquo;ve learned so far.</p>

<p>When you find yourself stuck you can get help through an asynchronous <strong>group chat</strong> and weekly <strong>office hour</strong> sessions.
In addition to our weekly office hours together, I&rsquo;ll check the chat each day, respond to questions, and provide guidance.</p>

<h2>Proven learning techniques behind the scenes üìù</h2>

<p>The daily check-ins allow for daily <strong>accountability</strong>.
The group chat also provides both a community of peers to rely on, and <strong>guidance from an experienced Python trainer</strong> (me).</p>

<p>We&rsquo;ll also be using proven learning techniques behind the scenes:</p>

<ul>
<li><strong>Retrieval practice</strong>: you don&rsquo;t learn by putting information into your head, but by trying to take it out; for Python learning, that means writing code.</li>
<li><strong>Spaced repetition</strong>: cramming is less effective than learning spaced out over time, which is why we&rsquo;ll spend 30 minutes each weekday instead of spending a few hours every week.</li>
<li><strong>Interleaving</strong>: each day&rsquo;s exercise isn&rsquo;t predictably themed because a bit of unpredictability can be <em>really</em> improve learning outcomes.</li>
<li><strong>Elaboration</strong>: your daily check-in isn&rsquo;t <em>just</em> about reflection: it&rsquo;s also a helpful learning tool!</li>
</ul>


<p>Plus, we&rsquo;ll be working through curriculum I&rsquo;ve been developing and iterating on for many years.
I have taught these topics in many different settings to folks from <em>many</em> different backgrounds.</p>

<h2>Form a daily learning habit üîÅ</h2>

<p>Any 10-week program will be <em>just the start</em> of a Python learning habit.
You&rsquo;ll need to keep up your Python after Python High Five ends, either by promptly applying your skills to a new project or diving deeper into Python with continued daily practice.</p>

<p>That&rsquo;s why I&rsquo;m offering an <strong>80% discount</strong> for High Five attendees on one year of <a href="https://www.pythonmorsels.com">Python Morsels</a>, which is my skill-building service designed to help <strong>deepen your Python skills every week</strong>.
You can <a href="https://www.pythonmorsels.com/high-five/#morsels">see more details on that here</a>.</p>

<h2>Ready to start your Python journey? ‚õ∞Ô∏è</h2>

<p>Are you ready to start your Python journey with a solid foundation?</p>

<p><a href="https://www.pythonmorsels.com/high-five/">Read more about Python High Five</a> and decide whether this is for you.</p>

<p>Keep in mind that while the program begins on September 9, <strong>enrollment closes on August 31</strong>.
So <a href="https://www.pythonmorsels.com/high-five/#faq">check the FAQs</a> and if you have additional questions, be sure to email me soon!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quickly find the right datetime format code for your date]]></title>
    <link href="https://treyhunner.com/2024/08/find-the-datetime-format-code-for-your-date/"/>
    <updated>2024-08-05T11:30:00-07:00</updated>
    <id>https://treyhunner.com/2024/08/find-the-datetime-format-code-for-your-date</id>
    <content type="html"><![CDATA[<p>I often find myself with a string representing a date and time and the need to create a format string that will parse this string into a <code>datetime</code> object.</p>

<p>I decided to make a tool that solves this problem for me: <a href="https://pym.dev/strptime">https://pym.dev/strptime</a></p>

<h2>Finding the code to parse a date format with <code>strptime</code></h2>

<p>Here&rsquo;s how I&rsquo;m now using this new tool.</p>

<p>I find a date string in a random spreadsheet or log file that I need to parse.
For example, the string <code>30-Jun-2024 20:09</code>, which I recently found in a spreadsheet.</p>

<p>I then paste the string into the tool and watch the format appear:</p>

<p><a href="https://pym.dev/strptime"><img src="/images/strptime-1.png"></a></p>

<p>Then I click on the date format to copy-paste it.
That&rsquo;s it!</p>

<p>This tool works by cycling through a number of common formats.
It also works for dates without a time, like <code>Jul 1, 2024</code>.</p>

<p><a href="https://pym.dev/strptime"><img src="/images/strptime-2.png"></a></p>

<p>This input field works great when you&rsquo;re in need of a code for the <code>datetime</code> class&rsquo;s <code>strptime</code> method (which <em>parses</em> dates).
But what if you need a code for <code>strftime</code> (for <em>formatting</em> dates)?</p>

<h2>Finding the code to format a date with <code>strftime</code></h2>

<p>If you don&rsquo;t have a date but instead want to <em>construct</em> a date in a specific common format, scroll down the page a bit.</p>

<p>This page includes a table of common formats.</p>

<p><a href="https://pym.dev/strptime#formats"><img src="/images/strptime-table.png"></a></p>

<p>Click on the format to copy it.
That&rsquo;s it.</p>

<h2>Playing with format codes</h2>

<p>What if you have a date format already but you&rsquo;re not sure what it represents?</p>

<p>Paste it in the box!</p>

<p>For example if you&rsquo;re wondering what the <code>%B</code> in <code>%B %d, %Y</code> means, paste it in to see what that represent with the current date and time:</p>

<p><a href="https://pym.dev/strptime"><img src="/images/strptime-reverse.png"></a></p>

<h2>Other features</h2>

<p>There are a few other hidden features in this tool:</p>

<ul>
<li>After a date or date format is pasted, if it corresponds to one of the formats listed in the table of common formats, that row will be highlighted</li>
<li>Hitting the <code>Enter</code> key anywhere on the page will select the input field</li>
<li>Clicking on a date within the format table will fill that date into the input box</li>
<li>The bottom of the page includes links to other useful datetime formatting/parsing tools as well as a link to the relevant Python documentation</li>
</ul>


<h2>Thoughts? Feature requests?</h2>

<p>What do you think of this tool?</p>

<p>Is this something you&rsquo;d bookmark and use often?
Is this missing a key feature that you would need for it to be valuable for your use?</p>

<p>Are there date and time formats you&rsquo;d like to see that don&rsquo;t seem to be supported yet?</p>

<p>Comment or email me to let me know!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why does "python -m json" not work? Why is it "json.tool"?]]></title>
    <link href="https://treyhunner.com/2024/08/why-does-python-m-json-not-work/"/>
    <updated>2024-08-01T14:00:00-07:00</updated>
    <id>https://treyhunner.com/2024/08/why-does-python-m-json-not-work</id>
    <content type="html"><![CDATA[<p><strong>Update</strong>: upon the encouragement of a few CPython core team members, I <a href="https://github.com/python/cpython/pull/122884">opened a pull request</a> to add this to Python 3.14.</p>

<p>Have you ever used Python&rsquo;s <code>json.tool</code> command-line interface?</p>

<p>You can run <code>python -m json.tool</code> against a JSON file and Python will print a nicely formatted version of the file.</p>

<pre><code class="bash">python -m json.tool example.json
[
    1,
    2,
    3,
    4
]
</code></pre>

<p>Why do we need to run <code>json.tool</code> instead of <code>json</code>?</p>

<h2>The history of <code>python -m</code></h2>

<p>Python 3.5 added the ability to run a module as a command-line script using the <code>-m</code> argument (see <a href="https://peps.python.org/pep-0338/">PEP 338</a>) which was implemented in Python 2.5.
While that feature was being an additional feature/bug was accidentally added, alowing packages to be run with the <code>-m</code> flag as well.
When a package was run with the <code>-m</code> flag, the package&rsquo;s <code>__init__.py</code> file would be run, with the <code>__name__</code> variable set to <code>__main__</code>.</p>

<p>This accidental feature/bug was <a href="https://github.com/python/cpython/issues/47000">removed in Python 2.6</a>.</p>

<p>It wasn&rsquo;t until Python 2.7 that the ability to run <code>python -m package</code> was re-added (see below).</p>

<h2>The history of the <code>json</code> module</h2>

<p>The <code>json</code> module was <a href="https://docs.python.org/3/whatsnew/2.6.html#the-json-module-javascript-object-notation">added in Python 2.6</a>.
It was based on the third-party <code>simplejson</code> library.</p>

<p>That library originally relied on the fact that Python packages could be run with the <code>-m</code> flag to run the package&rsquo;s <code>__init__.py</code> file with <code>__name__</code> set to <code>__main__</code> (see <a href="https://github.com/simplejson/simplejson/blob/v1.8.1/simplejson/__init__.py#L368">this code from version 1.8.1</a>).</p>

<p>When <code>simplejson</code> was added to Python as the <code>json</code> module in Python 2.6, this bug/feature could no longer be relied upon as it was fixed in Python 2.6.
To continue allowing for a nice command-line interface, it was decided that running a <code>tool</code> submodule would be the way to add a command-line interface to the <code>json</code> package (<a href="https://github.com/simplejson/simplejson/commit/74d9c5c4c4339db47dfa86bf37858cae80ed3776">discussion here</a>).</p>

<p>Python 2.7 <a href="https://docs.python.org/2.7/using/cmdline.html?highlight=__main__#cmdoption-m">added the ability to run any package as a command-line tool</a>.
The package would simply need a <code>__main__.py</code> file within it, which Python would run as the entry point to the package.</p>

<p>At this point, <code>json.tool</code> had already been added in Python 2.6 and no attempt was made (as far as I can tell) to allow <code>python -m json</code> to work instead.
Once you&rsquo;ve added a feature, removing or changing it can be painful.</p>

<h2>Could we make <code>python -m json</code> work today?</h2>

<p>We could.
We would just need to <a href="https://github.com/treyhunner/cpython/commit/1226315e2df0d4229558734d5f0d50f1386a025e">rename <code>tool.py</code> to <code>__main__.py</code></a>.
To allow <code>json.tool</code> to still work <em>also</em>, would could <a href="https://github.com/python/cpython/commit/7ce95d21886c7ad5278c07c1a20cda5bebab4731">make a new <code>tool.py</code> module</a> that simply imports <code>json.__main__</code>.</p>

<p>We could even go so far as to <a href="https://github.com/treyhunner/cpython/commit/ae4ca62346c690e1c6aaf1ccfed37069984b5d67">deprecate <code>json.tool</code></a> if we wanted to.</p>

<p>Should we do this though? ü§î</p>

<h2>Should we make <code>python -m json</code> work?</h2>

<p>I don&rsquo;t know about you, but I would rather type <code>python -m json</code> than <code>python -m json.tool</code>.
It&rsquo;s more memorable <em>and</em> easier to guess, if you&rsquo;re not someone who has memorized <a href="https://www.pythonmorsels.com/cli-tools/">all the command-line tools hiding in Python</a>.</p>

<p>But would this actually be used?
I mean, don&rsquo;t people just use the <a href="https://jqlang.github.io/jq/">jq</a> tool instead?</p>

<p>Well, a <code>sqlite3</code> shell was <a href="https://docs.python.org/3/library/sqlite3.html#command-line-interface">added to Python 3.12</a> despite the fact that third-party interactive sqlite prompts are fairly common.</p>

<p>It is pretty handy to have a access to a tool within an unfamiliar environment where installing yet-another-tool might pose a problem.
Think Docker, a locked-down Windows machine, or any computer without network or with network restrictions.</p>

<p>Personally, I&rsquo;d like to see <code>python3 -m json</code> work.
I can&rsquo;t think of any big downsides.
Can you?</p>

<p><strong>Update</strong>: <a href="https://github.com/python/cpython/pull/122884">pull request opened</a>.</p>

<h2>Too long; didn&rsquo;t read</h2>

<p>The &ldquo;too long didn&rsquo;t read version&rdquo;:</p>

<ul>
<li>Python 2.5 added support for the <code>-m</code> argument for <em>modules</em>, but not <em>packages</em></li>
<li>A third-party <code>simplejson</code> app existed with a nice CLI that relied on a <code>-m</code> implementation bug allowing packages to be run using <code>-m</code></li>
<li>Python 2.6 fixed that implementation quirk and broke the previous ability to run <code>python -m simplejson</code></li>
<li>Python 2.6 also added the <code>json</code> module, which was based on this third-party <code>simplejson</code> package</li>
<li>Since <code>python -m json</code> couldn&rsquo;t work anymore, the ability to run <code>python -m json.tool</code> was added</li>
<li>Python 2.7 added official support for <code>python -m some_package</code> by running a <code>__main__</code> submodule</li>
<li>The <code>json.tool</code> module already existed in Python 2.6 and the ability to run <code>python -m json</code> was (as far as I can tell) never seriously considered</li>
</ul>


<h2>All thanks to git history and issue trackers</h2>

<p>I discovered this by noting <a href="https://github.com/simplejson/simplejson/commit/74d9c5c4c4339db47dfa86bf37858cae80ed3776">the first commit</a> that added the <code>tool</code> submodule to <code>simplejson</code>, which notes the fact that this was for consistency with the new <code>json</code> standard library module.</p>

<p>Thank you git history.
And thank you to the folks who brought us the <code>simplejson</code> library, the <code>json</code> module, and the ability to use <code>-m</code> on both a module and a package!</p>

<p>Also, thank you to Alyssa Coghlan, Hugo van Kemenade, and Adam Turner for reviewing my pull request to add this feature to Python 3.14. üíñ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A beautiful Python monstrosity]]></title>
    <link href="https://treyhunner.com/2024/06/a-beautiful-python-monstrosity/"/>
    <updated>2024-06-08T14:30:00-07:00</updated>
    <id>https://treyhunner.com/2024/06/a-beautiful-python-monstrosity</id>
    <content type="html"><![CDATA[<p>Creating performance tests for <a href="https://www.pythonmorsels.com">Python Morsels</a> exercises is a frequent annoyance</p>

<p>I loathe writing automated tests for performance-related exercises because they&rsquo;re <em>always</em> flaky.
How flaky depends on the exercise, what I&rsquo;m testing, and the time variability inherent in the particular Python features that a learner might use.</p>

<p>I came up with a solution for flaky tests recently, but it also makes my tests less readable.
I then came up with a tool to improve the readability, but that has its own trade-offs.</p>

<p>The code I eventually came up with is a <strong>beautiful Python monstrosity</strong>.</p>

<pre><code class="python">    @attempt_n_times(10)
    def _():
        nonlocal micro_time, tiny_time
        micro_time = time(micro_numbers)
        tiny_time = time(tiny_numbers)
        self.assertLess(tiny_time, micro_time*n)
</code></pre>

<p>I&rsquo;ll explain what that code does, but first let&rsquo;s talk about why it&rsquo;s needed.</p>

<h2>The flaky performance tests</h2>

<p>My flaky performance tests initially looked like this:</p>

<pre><code class="python">def test_some_test(self):
    n, m = 2.45, 2.04

    micro_time = time(micro_numbers)
    tiny_time = time(tiny_numbers)
    self.assertLess(tiny_time, micro_time*n)

    small_time = time(small_numbers)
    self.assertLess(small_time, tiny_time*n)
    self.assertLess(small_time, micro_time*n*m)

    medium_time = time(medium_numbers)
    self.assertLess(medium_time, micro_time*n*m*m)
    self.assertLess(medium_time, tiny_time*n*m)
    self.assertLess(medium_time, small_time*n)
</code></pre>

<p>The first block runs a performance test for the user&rsquo;s function on a very small list and on a slightly larger list and then asserting that the slightly larger list didn&rsquo;t take <em>too</em> much longer to run.
The next two blocks run the same code on even larger lists and make further assertions about the relative times that the code took to run.</p>

<p>This roughly approximates the <a href="https://www.pythonmorsels.com/time-complexities/">time complexity</a> of this code.</p>

<h2>Running performance checks in a loop</h2>

<p>These performance checks need to:</p>

<ol>
<li>Predictably fail for inefficient solutions</li>
<li>Predictably pass for efficient solutions</li>
<li>Run <em>fast</em> (within just a few seconds) even when the code is inefficient</li>
<li>Avoid the use of <code>threading</code> because they&rsquo;ll be running on WebAssembly in the browser</li>
<li>Run consistently on pretty much any computer</li>
</ol>


<p>These 5 requirements together have caused me countless headaches.
I get the tests passing well, but they don&rsquo;t always fail when they should.
I get the tests failing and passing when they should, but then they&rsquo;re too slow.
And so on&hellip;</p>

<p>Notice the <code>n</code> and <code>m</code> factors in the above assertions:</p>

<pre><code class="python">    self.assertLess(small_time, micro_time*n*m)
</code></pre>

<p>If <code>n</code> and <code>m</code> are too big, we&rsquo;ll get false positives (tests passing when they should fail).
If <code>n</code> and <code>m</code> are too small, we&rsquo;ll get false negatives (tests failing when they should pass).</p>

<p>To avoid both <a href="https://en.wikipedia.org/wiki/Type_I_and_type_II_errors">Type I and Type II errors</a>, I decided to keep <code>n</code> and <code>m</code> small but attempt the assertion block multiple times.</p>

<p>Here&rsquo;s the (far less flaky) revised code:</p>

<pre><code class="python">def test_some_test(self):
    n, m = 2.45, 2.04

    for attempts_left in reversed(range(10)):
        try:
            micro_time = time(micro_numbers)
            tiny_time = time(tiny_numbers)
            self.assertLess(tiny_time, micro_time*n)
            break
        except AssertionError:
            if attempts_left == 0:
                raise

    for attempts_left in reversed(range(5)):
        try:
            small_time = time(small_numbers)
            self.assertLess(small_time, tiny_time*n)
            self.assertLess(small_time, micro_time*n*m)
            break
        except AssertionError:
            if attempts_left == 0:
                raise

for attempts_left in reversed(range(3)):
    try:
        medium_time = time(medium_numbers)
        self.assertLess(medium_time, micro_time*n*m*m)
        self.assertLess(medium_time, tiny_time*n*m)
        self.assertLess(medium_time, small_time*n)
        break
    except AssertionError:
        if attempts_left == 0:
            raise
</code></pre>

<p>The <code>for</code> loop runs the code multiple times, the <code>break</code> statement stops the code as soon as the assertions all pass, and the <code>except</code> and <code>if</code> ensure that any assertion errors are suppressed until/unless we&rsquo;re on the final iteration of the loop.</p>

<p>Let&rsquo;s call this a <code>for</code>-<code>try</code>-<code>break</code>-<code>except</code>-<code>if</code>-<code>raise</code> pattern.
It&rsquo;s an absurdly verbose name fitting of absurdly verbose code.</p>

<p>This <code>for</code>-<code>try</code>-<code>break</code>-<code>except</code>-<code>if</code>-<code>raise</code> pattern works pretty well!
But it&rsquo;s not pretty.</p>

<p>Like many programmers, I believe that <strong>Don&rsquo;t Repeat Yourself</strong> (<a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">DRY</a>) need not apply to tests.
Tests are <em>allowed</em> to be repetitive if <a href="https://stackoverflow.com/questions/6453235/what-does-damp-not-dry-mean-when-talking-about-unit-tests">the verbosity improves readability</a>.</p>

<p>But there is <em>so much noise</em> in that code!
I decided that removing some noise might improve readability.
So I devised a helper utility to reduce the repetition.</p>

<h2>In search of a solution</h2>

<p>While pondering the repetitive noise in this code, I wondered what Python features I could use to abstract away this <code>for</code>-<code>try</code>-<code>break</code>-<code>except</code>-<code>if</code>-<code>raise</code> pattern.</p>

<p>Could I make a context manager and use a <code>with</code> block?
That might help with the <code>try</code>-<code>except</code>, but context managers can&rsquo;t run their code block multiple times, so that wouldn&rsquo;t help with the <code>for</code> and the <code>break</code>.
So a context manager is out.</p>

<p>Could I abstract this away into a looping helper by implementing a generator function?
We <em>are</em> looping and generator functions <em>can</em> <code>break</code> early.
But, a generator function can&rsquo;t catch an exception that&rsquo;s raised within the <em>body</em> of a loop.
So a generator function wouldn&rsquo;t work either.</p>

<p>What about a decorator? ü§î</p>

<p>Context managers and decorators both sandwich a block of code.
But decorators sandwich functions and they have the power to run the same function <em>repeatedly</em>.
A decorator might work!</p>

<p>Here&rsquo;s a decorator that will run a given function up to 10 times (until no <code>AssertionError</code> is raised):</p>

<pre><code class="python">def try_10_times(function):
    def wrapper():
        for attempts_left in reversed(range(10)):
            try:
                return function()
            except AssertionError:
                if attempts_left == 0:
                    raise
    return wrapper
</code></pre>

<p>To use this decorator, we would need to define a function and then call that function:</p>

<pre><code class="python">@try_10_times
def assertions():
    micro_time = time(micro_numbers)
    tiny_time = time(tiny_numbers)
    self.assertLess(tiny_time, micro_time*n)

assertions()
</code></pre>

<p>This isn&rsquo;t <em>quite</em> good enough though&hellip;</p>

<ol>
<li>We need a pattern to run code N times (not necessarily exactly 10)</li>
<li>We reference the variables defined in each block in later blocks, so <code>micro_time</code> and <code>tiny_time</code> will need to be available <em>outside</em> that function</li>
<li>We need this function to run just one time right after it&rsquo;s defined&hellip; could we do that automatically?</li>
</ol>


<p>All 3 of these problems are solvable:</p>

<ol>
<li>We need a decorator that accepts arguments</li>
<li>We need to use <em>rarely seen</em> <a href="https://stackoverflow.com/a/1261961/98187"><code>nonlocal</code></a> statement</li>
<li>We could have the decorator automatically call the decorated function</li>
</ol>


<h2>The final <em>weird</em> decorator</h2>

<p>Here&rsquo;s the decorator I ended up with:</p>

<pre><code class="python">def attempt_n_times(n):
    """
    Run tests multiple times if assertions are raised.

    Allows for more forgiving tests when assertions may be a bit flaky.
    """
    def decorator(function):
        """This looks like a decorator, but it actually runs the function!"""
        for attempts_left in reversed(range(n)):
            try:
                return function()
            except AssertionError:
                if attempts_left == 0:
                    raise
    return decorator
</code></pre>

<p>This decorator accepts an <code>n</code> argument which determines the maximum number of times the decorated function should be called.
The decorator then <em>calls</em> the function repeatedly in a <code>for</code> loop and a <code>try</code>-<code>except</code> block.
As soon as an <code>AssertionError</code> is <em>not</em> raised during one of these function calls, the looping stops.</p>

<p>The <em>weirdest</em> part about this decorator is that it calls the decorated function.
Note that the <code>decorator</code> function doesn&rsquo;t define a <code>wrapper</code> function within itself&hellip; it just runs code right away!</p>

<h2>The resulting beautiful Python monstrosity</h2>

<p>Here&rsquo;s the final refactored test code:</p>

<pre><code class="python">def test_some_test(self):
    n, m = 2.45, 2.04
    micro_time = tiny_time = small_time = medium_time = 0

    @attempt_n_times(10)
    def _():
        nonlocal micro_time, tiny_time
        micro_time = time(micro_numbers)
        tiny_time = time(tiny_numbers)
        self.assertLess(tiny_time, micro_time*n)

    @attempt_n_times(5)
    def _():
        nonlocal small_time
        small_time = time(small_numbers)
        self.assertLess(small_time, tiny_time*n)
        self.assertLess(small_time, micro_time*n*m)

    @attempt_n_times(3)
    def _():
        nonlocal medium_time
        medium_time = time(medium_numbers)
        self.assertLess(medium_time, micro_time*n*m*m)
        self.assertLess(medium_time, tiny_time*n*m)
        self.assertLess(medium_time, small_time*n)
</code></pre>

<p>The <code>attempt_n_times</code> decorator <strong>immediately calls the function it decorates</strong>.
Each function is defined and immediately called one or more times, in a <code>try</code>-<code>except</code> block within a loop.</p>

<p>That&rsquo;s why we&rsquo;ve named these functions with the <a href="https://stackoverflow.com/questions/36315309/how-does-python-throw-away-variable-work">throwaway</a> <code>_</code> name: <strong>we don&rsquo;t care about the name of a function we&rsquo;re never going to refer to again</strong>.</p>

<p>Also note the use of the <code>nonlocal</code> statement.
Each function in Python has its own scope and all assignments <a href="https://www.pythonmorsels.com/local-and-global-variables/#assigning-to-local-and-global-variables">assign to the local scope</a> by default.
That <code>nonlocal</code> variable pulls those variables to the scope of the outer function instead.</p>

<p>Compare the above code to the code just before this refactor:</p>

<pre><code class="python">def test_some_test(self):
    n, m = 2.45, 2.04

    for attempts_left in reversed(range(10)):
        try:
            micro_time = time(micro_numbers)
            tiny_time = time(tiny_numbers)
            self.assertLess(tiny_time, micro_time*n)
            break
        except AssertionError:
            if attempts_left == 0:
                raise

    for attempts_left in reversed(range(5)):
        try:
            small_time = time(small_numbers)
            self.assertLess(small_time, tiny_time*n)
            self.assertLess(small_time, micro_time*n*m)
            break
        except AssertionError:
            if attempts_left == 0:
                raise

    for attempts_left in reversed(range(3)):
        try:
            medium_time = time(medium_numbers)
            self.assertLess(medium_time, micro_time*n*m*m)
            self.assertLess(medium_time, tiny_time*n*m)
            self.assertLess(medium_time, small_time*n)
            break
        except AssertionError:
            if attempts_left == 0:
                raise
</code></pre>

<p>I find the refactored version easier to skim.</p>

<p>But that <code>attempt_n_times</code> decorator <em>does</em> abuse the decorator syntax.
Decorators aren&rsquo;t <em>meant</em> to call the function they&rsquo;re decorating.</p>

<p>Is this misuse of decorators worth it?</p>

<h2>Is this worth it?</h2>

<p>Decorators aren&rsquo;t supposed to immediately call the function they decorate.
But there&rsquo;s nothing stopping them from doing so.
I feel that I&rsquo;ve traded &ldquo;normal code&rdquo; for a beautiful monstrosity that&rsquo;s easier to skim at a glance.</p>

<p>The <code>attempt_n_times</code> decorator is pretending that it&rsquo;s a block-level tool by using a function because there&rsquo;s no other way to invent such a tool in Python.</p>

<p>I think abstracting away the <code>for</code>-<code>try</code>-<code>break</code>-<code>except</code>-<code>if</code>-<code>raise</code> pattern was worth it, even though I ended up abusing Python&rsquo;s decorator syntax in the process.</p>

<p>What do you think?
Was that <code>attempt_n_times</code> abstraction worth it?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PyCon 2024 Reflection]]></title>
    <link href="https://treyhunner.com/2024/05/pycon-2024-reflection/"/>
    <updated>2024-05-28T13:00:00-07:00</updated>
    <id>https://treyhunner.com/2024/05/pycon-2024-reflection</id>
    <content type="html"><![CDATA[<p>I traveled back home from PyCon US 2024 last week.
This is my reflection on my time at PyCon.</p>

<h2>Attempting to eat vegan</h2>

<p>Since 2020, I&rsquo;ve been <a href="https://mastodon.social/@treyhunner/111794737871397453">gradually eating more plant-based</a> and <a href="https://mastodon.social/@treyhunner/111982459215543497">a few months ago</a> I decided to take PyCon as an opportunity to attempt exclusively vegan eating outside my own home.
As <a href="https://mastodon.social/@treyhunner/112493037289419028">I noted on Mastodon</a>, it was a challenge and I failed every day at least once but I found the experience worthwhile.
Our food system is <em>very</em> dairy-oriented.</p>

<h2>Staying hydrated and fed</h2>

<p>One of the first things I did before heading to the convention center was walk to Target and buy snacks and drinks.
When at PyCon, I prefer to spend 30 minutes and $20 to have a backup plan for last minute hydration and calories (even if not the <em>greatest</em> calories).
I never quite know when I might sleep through breakfast, find lunch lacking, or wish I&rsquo;d eaten more dinner.</p>

<h2>A tutorial, an orientation, a lightning talk, and open spaces</h2>

<p>My responsibilities at PyCon this year included teaching a tutorial and helping run the Newcomer&rsquo;s Orientation with <a href="https://x.com/KojoIdrissa">Kojo</a> and <a href="https://social.coop/@brainwane">Sumana</a>.</p>

<p><a href="https://mastodon.social/@treyhunner/112479031063220835">Yngve and Marie</a> offered to act as teaching assistants during my tutorial and I was very grateful for their help!
<a href="https://x.com/mathsppblog">Rodrigo</a> and Krishna also offered to TA just before my tutorial started and I was extra grateful to have even more help than I&rsquo;d expected.
The attendees were mostly better prepared than I expected they would be, which was also great.
It&rsquo;s always great to spend less time on setup and more time exploring Python together.</p>

<p>The newcomer&rsquo;s orientation the next day went well.
We kept it fairly brief and were able to address about 10 minutes of audience questions before the opening reception started.</p>

<p>Once my PyCon responsibilities completed, I invented a few more (light) responsibilities for myself. üòÖ
I signed up to give a lightning talk on how to give a lightning talk.
They slotted it as the first talk of the first lightning talk session on Friday night.
I kept this talk pretty much the same as the one <a href="https://youtu.be/aNHBr7q-KVw?feature=shared&amp;t=915">I presented DjangoCon 2016</a>.
I could have made the transitions fancier, but I decided to embrace the idea of simplicity with the hope that audience members might think &ldquo;look if that first speaker can give such a simple and succinct presentation, maybe I can too.&rdquo;</p>

<p>On Saturday I ran <a href="https://mastodon.social/@treyhunner/112457077109815019">an open space on Python Learning</a>.
Some of you showed up because you&rsquo;re on my mailing list or you&rsquo;re paying Python Morsels subscribers.
Many folks showed up because the topic was interesting, either as a learner or as a teacher.
I really enjoyed the round-table-style conversation we had.</p>

<p>I also ran a <a href="https://mastodon.social/@treyhunner/112468136603503893">Cabo Card game open space</a> during lunch on Sunday on the 4th floor rooftop.
Cabo is my usual conference ice breaker game and I played it at least a few nights <a href="https://mas.to/@davidism/112465501797531611">in The Westin lobby</a> as well.</p>

<h2>Seeing conference friends, old and new</h2>

<p>For me, PyCon is largely about having conversations.
The talks and tutorials are great for starting me thinking about an idea.
The hallway track, open spaces, and meals are great for continuing conversations about those ideas (or <em>other</em> ideas).</p>

<p>My first morning in Pittsburgh, I chatted with <a href="https://www.linkedin.com/in/naomiceder/">Naomi</a> and <a href="https://x.com/reuvenmlerner/">Reuven</a>.
I&rsquo;m glad I ran into them before the conference kicked off because (as often happens at PyCon) I only very briefly saw either of them during the rest of PyCon!</p>

<p>After my tutorial that afternoon, I did dinner with Marie, Yngve, and Rodrigo at Rosewater Mediterranean (good vegan options, assuming you enjoy falafel and various sauces).
As sometimes happens at PyCon, another PyCon attendee, Sachin, joined our table because we noticed him eating on his own at a table near us and invited him to join us.</p>

<p>On Saturday, <a href="https://hachyderm.io/@melaniearbor">Melanie</a>, <a href="https://mas.to/@davidism">David</a>, <a href="https://x.com/kjaymiller">Jay</a>, and I had a sort of mini San Diego Python study group reunion dinner before inviting folks to join us for <a href="https://mastodon.social/@treyhunner/112465503888730383">Cabo and Knucklebones</a> one night.
The 4 of us originally met each other (along with <a href="https://hachyderm.io/@willingc">Carol</a> and other wonderful Python folks) at the San Diego Python study group about 10 years ago.</p>

<p>I had some wonderful conversations about ways to improve the Python documentation over dinner (at Nicky&rsquo;s Thai) on Sunday night with <em>so</em> many docs-concerned folks who I highly respect.
I&rsquo;m really excited that Python has <a href="https://peps.python.org/pep-0732/">the documentation editorial board</a> and I&rsquo;m hopeful that that board, with the help of many others community members, will usher in big improvements to the documentation in the coming years.</p>

<p>I also met a number of Internet acquaintances IRL for the first time at PyCon.
I met <a href="https://www.linkedin.com/in/tereza-iofciu/">Tereza</a> and <a href="https://www.linkedin.com/in/jessica0greene/">Jessica</a>, who I know from our work in the PSF Code of Conduct workgroup.
I met <a href="https://fosstodon.org/@slott56">Steve Lott</a>, who I originally knew as <a href="https://stackoverflow.com/users/10661/s-lott">a prolific question-answerer</a>.
I also met <a href="https://github.com/hugovk">Hugo</a>, a CPython core dev, the Python 3.14 &amp; 3.15 release manager, and a <a href="https://mastodon.social/@hugovk">social media user</a> (which is how I&rsquo;ve primarily interacted with him because the Internet is occasionally lovely).
I was also very excited to meet many <a href="https://www.pythonmorsels.com">Python Morsels members</a> as well as folks who know me through <a href="https://www.pythonmorsels.com/newsletter/">my weekly Python tips newsletter</a>.</p>

<p>I was grateful to chat with <a href="https://mastodon.social/@hynek">Hynek</a> and <a href="https://mastodon.social/@AlSweigart">Al</a> about creating talks, YouTube videos, and other online content.
I also enjoyed chatting with <a href="https://mastodon.social/@glyph">Glyph</a> a bit about our experiences consulting and training and (in hindsight) wished I&rsquo;d planned an open space for either consultants or trainers, both of which have been held at PyCon before but it just takes someone to stick it on the open space board.</p>

<p>Many folks I only saw very briefly (I said a quick hi and bye to <a href="https://aeracode.org/@andrew">Andrew</a> over lunch during the sprints) and some I didn&rsquo;t see at all (<a href="https://mastodon.social/@frank@frankwiles.social">Frank</a> was at PyCon but we never ran into each other).
Some I essentially saw through playing a few rounds of Cabo (<a href="https://social.coop/@Yhg1s">Thomas</a> and <a href="https://hachyderm.io/@ethantyping">Ethan</a> among many others).
We also ran into at least 4 other PyCon attendees in the airport on Tuesday afternoon, including <a href="https://www.linkedin.com/in/bbelderbos/">Bob</a> and <a href="https://www.linkedin.com/in/juliansequeira/">Julian</a>, who it&rsquo;s always a pleasure to see.</p>

<h2>A Mastodon-oriented PyCon</h2>

<p>On Thursday night I had the feeling that the number of Mastodon posts I saw on the <strong>#PyConUS</strong> hashtag was greater than the number of Twitter posts.
I (very unscientifically) counted up the number of posts I was seeing on each and found that my perception was correct: <a href="https://mastodon.social/@treyhunner/112453920848761679">Mastodon seemed to slightly overtake Twitter at PyCon this year</a>.</p>

<p>Over dinner on Wednesday, I tried to convince Marie, Yngve, and Rodrigo to get Mastodon accounts just to follow the hashtag during PyCon.
I succeeded: <a href="https://mastodon.social/@treyhunner/112479031063220835">Marie and Yngve</a> and <a href="https://fosstodon.org/@davep/112458736212760528">Rodrigo</a>!</p>

<p>Mastodon will never be <em>the</em> social media platform.
Its decentralized nature is too much of a barrier for many folks.
However, it does seem to be used by <em>enough</em> somewhat nerdy Python folks to now be one the most used social media platform for PyCon posting.</p>

<h2>The talks</h2>

<p>I ended up spending little time in the talks during PyCon.
This wasn&rsquo;t on purpose.
I just happened to attend many open spaces, take personal breaks, and end up in hallway conversations often.
I did see many of the lightning talks live, as well as <a href="https://x.com/kjaymiller">Jay</a>, <a href="https://simonwillison.net/@simon">Simon</a>, and <a href="https://social.coop/@brainwane">Sumana</a>&rsquo;s keynotes (all of them were exceptional) and the opening and closing remarks.
I also watched a few talks from my hotel room while taking breaks.</p>

<p>While I&rsquo;m often a bit light on my talk load at PyCon, I do recommend folks attend a good handful of live talks during PyCon, <a href="https://mastodon.social/@jonafato/112514979873634457">as Jon</a> and <a href="https://hynek.me/articles/hallway-track/">others</a> recommend.
I wish I had seen more talks live.
I also wish I had attended a few open spaces that I missed.</p>

<p>At any one time, I know that I&rsquo;m always missing about 90% of what&rsquo;s scheduled during PyCon (if you include the talks <em>and</em> the open spaces).
That&rsquo;s assuming I don&rsquo;t ditch the conference entirely for a few hours and <a href="https://social.coop/@bitprophet/112452662184950234">walk across a bridge</a> or <a href="https://mastodon.social/@AlSweigart/112514009252817862">ride a funicular</a> (neither of which I did, as I stuck around the venue the whole time this year).
I am glad I saw, did, and talked about everything I did, but there&rsquo;s always something I wish I&rsquo;d seen/done!</p>

<h2>The sprints</h2>

<p>Thanks to the documentation dinner, I had a couple documentation-related ideas in mind on the first day of sprints.
But I&rsquo;m also <em>really</em> excited about the new Python REPL coming in Python 3.13 (<a href="https://x.com/treyhunner/status/1720185049461801371">in case</a> you <a href="https://treyhunner.com/2024/05/installing-a-custom-python-build-with-pyenv/">can&rsquo;t tell</a> from <a href="https://treyhunner.com/2024/05/my-favorite-python-3-dot-13-feature/">how much</a> I <a href="https://x.com/treyhunner/status/1788307498715554160">talk</a> about <a href="https://www.linkedin.com/posts/treyhunner_python-activity-7194082747315859456-qQjk/?utm_source=share&amp;utm_medium=member_desktop">it</a>), so I sprinted on that instead.
<a href="https://github.com/ambv">≈Åukasz</a> assigned me the task of researching keyboard shortcuts that the new REPL is missing (compared to the current one on Linux and Mac) so <a href="https://github.com/python/cpython/issues/119034#issuecomment-2121142576">I spent some time researching that</a>.
I got to see the REPL running on <a href="https://fosstodon.org/@tonybaloney/112477098396842900">Anthony&rsquo;s laptop</a> on Windows and I am <em>so excited</em> that Windows support will be included before 3.13.0 lands! üéâ</p>

<p>Partly inspired by <a href="https://youtu.be/RL3HFj5SDqI?t=1549">Carol Willing&rsquo;s PyCon preview message</a>, I also thanked <a href="https://github.com/pablogsal">Pablo</a>, <a href="https://github.com/ambv">≈Åukasz</a>, and <a href="https://github.com/lysnikolaou">Lysandros</a> in-person for all their work on the new Python REPL. ü§ó</p>

<h2>Until next year</h2>

<p>I&rsquo;ll be <a href="https://www.pyohio.org/2024/program/speakers/keynote-speakers/#trey-hunner">keynoting at PyOhio</a> this year.</p>

<p>Besides PyOhio, I&rsquo;m not sure whether I&rsquo;ll make it to another conference until PyCon US next year.
I&rsquo;d love to attend all of them, but I do have work and personal goals that need accomplishing too!</p>

<p>I hope to see you at PyCon US 2025!
In the meantime, if you&rsquo;re wishing we&rsquo;d exchanged contact details or met in-person, please feel free to stay in touch through <a href="https://mastodon.social/@treyhunner">Mastodon</a>, <a href="https://mastodon.social/@treyhunner">LinkedIn</a>, <a href="https://pym.dev/newsletter">my weekly emails</a>, <a href="https://www.youtube.com/@PythonMorsels">YouTube</a>, or <a href="http://twitter.com/treyhunner">Twitter</a>.</p>

<p><img class="&ldquo;no-border&rdquo;" src="/images/pycon2024-pic.jpg" title="&ldquo;&rdquo; &ldquo;Yellow bridges over a river just outside the PyCon 2024 conference center in Pittsburgh&rdquo;" ></p>
]]></content>
  </entry>
  
</feed>
