<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Trey Hunner]]></title>
  <link href="https://treyhunner.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="https://treyhunner.com/"/>
  <updated>2024-11-20T10:11:56-08:00</updated>
  <id>https://treyhunner.com/</id>
  <author>
    <name><![CDATA[Trey Hunner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python Black Friday &amp; Cyber Monday sales (2024)]]></title>
    <link href="https://treyhunner.com/2024/11/python-black-friday-and-cyber-monday-sales-2024/"/>
    <updated>2024-11-20T11:00:00-08:00</updated>
    <id>https://treyhunner.com/2024/11/python-black-friday-and-cyber-monday-sales-2024</id>
    <content type="html"><![CDATA[<p>Ready for some Python skill-building sales?</p>

<p>This is my <strong><a href="https://treyhunner.com/blog/categories/sales/">seventh</a></strong> annual compilation of <strong>Python learning deals</strong>.</p>

<p>I&rsquo;m publishing this post <em>extra</em> early this year, so bookmark this page and set a calendar event for yourself to <strong>check back on Friday November 29</strong>.</p>

<h2>Currently live sales</h2>

<p>Here are Python-related sales that are live right now:</p>

<ul>
<li><strong><a href="https://www.pythonmorsels.com/courses/jumpstart/overview/">Python Jumpstart</a></strong> with Python Morsels: <strong>50% off</strong> my brand new Python course, an introduction to Python that&rsquo;s <em>very</em> hands-on (<strong>$99</strong> instead of <strong>$199</strong>)</li>
<li><strong><a href="https://mathspp.gumroad.com/">Rodrigo</a></strong> 50% off Rodrigo&rsquo;s <a href="https://mathspp.gumroad.com/l/all-books-bundle/BF24">all books bundle</a> with code <code>BF24</code></li>
<li><strong><a href="https://thepythoncodingplace.com/membership/">The Python Coding Place</a></strong>: 40% off <a href="https://thepythoncodingplace.thinkific.com/enroll/2906653?coupon=black2024">The Python Coding Book</a> and 40% off a lifetime membership to <a href="https://thepythoncodingplace.thinkific.com/cart/add_product/2731141?price_id=3865919&amp;coupon=black2024">The Python Coding Place</a> with code <code>black2024</code></li>
<li><strong><a href="https://learnbyexample.gumroad.com">Sundeep Agarwal</a></strong>: ~50% off Sundeep&rsquo;s <a href="https://learnbyexample.gumroad.com/l/all-books/FestiveOffer">all book</a> and <a href="https://learnbyexample.gumroad.com/l/python-bundle/FestiveOffer">Python</a> bundles with code <code>FestiveOffer</code></li>
<li><strong><a href="https://learning.oreilly.com/signup/?promotion_code=CYBERWEEK24">O'Reilly Media</a></strong>: 40% off the first year with code <code>CYBERWEEK24</code> ($299 instead of $499)</li>
</ul>


<h2>Anticipated sales</h2>

<p>Here are sales that will be live <em>soon</em>:</p>

<ul>
<li><strong><a href="https://courses.dataschool.io/black-friday">Data School</a></strong> 40% off all Kevin&rsquo;s courses or get a bundle with all 5 of his courses</li>
<li><strong><a href="https://www.blog.pythonlibrary.org">Mike Driscoll</a></strong>: 35% off Mike&rsquo;s Python <a href="https://driscollis.gumroad.com/">books</a> and <a href="https://www.teachmepython.com/">courses</a> with code <code>BF24</code></li>
</ul>


<p>Here are some sales I expect to see, but which haven&rsquo;t been announced yet:</p>

<ul>
<li><strong><a href="http://talkpython.fm/black-friday">Talk Python</a></strong>: usually holds a sale on a variety of courses</li>
<li><strong><a href="https://courses.pythontest.com/">Brian Okken</a></strong>: often holds a sale on his pytest course</li>
<li><strong><a href="https://lernerpython.com/">Reuven Lerner</a></strong>: usually holds a sale</li>
<li><strong><a href="https://pragprog.com/">Pragmatic Bookshelf</a></strong>: I&rsquo;m <em>guessing</em> they&rsquo;ll hold a 40% off sale with code <code>turkeycode2024</code></li>
</ul>


<p>Also see Adam Johnson&rsquo;s <a href="https://adamj.eu/tech/2024/11/18/django-black-friday-deals-2024/">Django-related Deals for Black Friday 2024</a> for sales on Adam&rsquo;s books, courses from the folks at Test Driven, Django templates, and various other Django-related deals.</p>

<p>If you know of another sale (or a likely sale) <strong>please comment below</strong> or email me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding keyboard shortcuts to the Python REPL]]></title>
    <link href="https://treyhunner.com/2024/10/adding-keyboard-shortcuts-to-the-python-repl/"/>
    <updated>2024-10-28T07:15:00-07:00</updated>
    <id>https://treyhunner.com/2024/10/adding-keyboard-shortcuts-to-the-python-repl</id>
    <content type="html"><![CDATA[<p>I talked about the new Python 3.13 REPL <a href="https://treyhunner.com/2024/05/my-favorite-python-3-dot-13-feature/">a few months ago</a> and <a href="https://www.pythonmorsels.com/python-313-whats-new/">after 3.13 was released</a>.
I think it&rsquo;s <strong>awesome</strong>.</p>

<p>I&rsquo;d like to share a secret feature within the Python 3.13 REPL which I&rsquo;ve been finding useful recently: <strong>adding custom keyboard shortcuts</strong>.</p>

<p>This feature involves a <code>PYTHONSTARTUP</code> file, use of an unsupported Python module, and dynamically evaluating code.</p>

<p>In short, we may be getting ourselves into trouble.
But the result is <em>very</em> neat!</p>

<p>Thanks to ≈Åukasz Llanga for inspiring this post via his excellent <a href="https://youtu.be/dK6HGcSb60Y?si=jWPEa8BcdYGnW9l6">EuroPython keynote talk</a>.</p>

<h2>The goal: keyboard shortcuts in the REPL</h2>

<p>First, I&rsquo;d like to explain the end result.</p>

<p>Let&rsquo;s say I&rsquo;m in the Python REPL on my machine and I&rsquo;ve typed <code>numbers =</code>:</p>

<pre><code class="pycon">&gt;&gt;&gt; numbers =
</code></pre>

<p>I can now hit <code>Ctrl-N</code> to enter a list of numbers I often use while teaching (<a href="https://en.wikipedia.org/wiki/Lucas_number">Lucas numbers</a>):</p>

<pre><code class="pycon">numbers = [2, 1, 3, 4, 7, 11, 18, 29]
</code></pre>

<p>That saved me some typing!</p>

<h2>Getting a prototype working</h2>

<p>First, let&rsquo;s try out an example command.</p>

<p>Copy-paste this into your Python 3.13 REPL:</p>

<pre><code class="python">from _pyrepl.simple_interact import _get_reader
from _pyrepl.commands import Command

class Lucas(Command):

    def do(self):
        self.reader.insert("[2, 1, 3, 4, 7, 11, 18, 29]")

reader = _get_reader()
reader.commands["lucas"] = Lucas
reader.bind(r"\C-n", "lucas")
</code></pre>

<p>Now hit <code>Ctrl-N</code>.</p>

<p>If all worked as planned, you should see that list of numbers entered into the REPL.</p>

<p>Cool!
Now let&rsquo;s generalize this trick and make Python run our code whenever it starts.</p>

<p>But first&hellip; a disclaimer.</p>

<h2>Here be dragons üêâ</h2>

<p>Notice that <code>_</code> prefix in the <code>_pyrepl</code> module that we&rsquo;re importing from?
That means this module is officially unsupported.</p>

<p>The <code>_pyrepl</code> module is an implementation detail and its implementation may change at any time in future Python versions.</p>

<p>In other words: <code>_pyrepl</code> is designed to be used by <em>Python&rsquo;s standard library modules</em> and not anyone else.
That means that we should assume this code will break in a future Python version.</p>

<p>Will that stop us from playing with this module for the fun of it?</p>

<p>It won&rsquo;t.</p>

<h2>Creating a <code>PYTHONSTARTUP</code> file</h2>

<p>So we&rsquo;ve made <em>one</em> custom key combination for ourselves.
How can we setup this command automatically whenever the Python REPL starts?</p>

<p>We need a <code>PYTHONSTARTUP</code> file.</p>

<p>When Python launches, if it sees a <code>PYTHONSTARTUP</code> environment variable it will treat that environment variable as a Python file to run on startup.</p>

<p>I&rsquo;ve made a <code>/home/trey/.python_startup.py</code> file and I&rsquo;ve set this environment variable in my shell&rsquo;s configuration file (<code>~/.zshrc</code>):</p>

<pre><code class="bash">export PYTHONSTARTUP=$HOME/.python_startup.py
</code></pre>

<p>To start, we could put our single custom command in this file:</p>

<pre><code class="python">try:
    from _pyrepl.simple_interact import _get_reader
    from _pyrepl.commands import Command
except ImportError:
    pass  # Not in the new pyrepl OR _pyrepl implementation changed
else:
    class Lucas(Command):
        def do(self):
            self.reader.insert("[2, 1, 3, 4, 7, 11, 18, 29]")

    reader = _get_reader()
    reader.commands["lucas"] = Lucas
    reader.bind(r"\C-n", "lucas")
</code></pre>

<p>Note that I&rsquo;ve stuck our code in a <code>try</code>-<code>except</code> block.
Our code <em>only</em> runs if those <code>_pyrepl</code> imports succeed.</p>

<p>Note that this <em>might</em> still raise an exception when Python starts <em>if</em> the reader object&rsquo;s <code>command</code> attribute or <code>bind</code> method change in a way that breaks our code.</p>

<p>Personally, I&rsquo;d like to see those breaking changes occur print out a traceback the next time I upgrade Python.
So I&rsquo;m going to leave those last few lines <em>without</em> their own catch-all exception handler.</p>

<h2>Generalizing the code</h2>

<p>Here&rsquo;s a <code>PYTHONSTARTUP</code> file with a more generalized solution:</p>

<pre><code class="python">try:
    from _pyrepl.simple_interact import _get_reader
    from _pyrepl.commands import Command
except ImportError:
    pass
else:
    # Hack the new Python 3.13 REPL!
    cmds = {
        r"\C-n": "[2, 1, 3, 4, 7, 11, 18, 29]",
        r"\C-f": '["apples", "oranges", "bananas", "strawberries", "pears"]',
    }
    from textwrap import dedent
    reader = _get_reader()
    for n, (key, text) in enumerate(cmds.items(), start=1):
        name = f"CustomCommand{n}"
        exec(dedent(f"""
            class _cmds:
                class {name}(Command):
                    def do(self):
                        self.reader.insert({text!r})
                reader.commands[{name!r}] = {name}
                reader.bind({key!r}, {name!r})
        """))
    # Clean up all the new variables
    del _get_reader, Command, dedent, reader, cmds, text, key, name, _cmds, n
</code></pre>

<p>This version uses a dictionary to map keyboard shortcuts to the text they should insert.</p>

<p>Note that we&rsquo;re repeatedly building up a string of <code>Command</code> subclasses for each shortcut, using <code>exec</code> to execute the code for that custom <code>Command</code> subclass, and then binding the keyboard shortcut to that new command class.</p>

<p>At the end we then delete all the variables we&rsquo;ve made so our REPL will start the clean global environment we normally expect it to have:</p>

<pre><code class="pycon">Python 3.13.0 (main, Oct  8 2024, 10:37:56) [GCC 11.4.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; dir()
['__annotations__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__']
</code></pre>

<p>Is this messy?</p>

<p>Yes.</p>

<p>Is that a needless use of a dictionary that could have been a list of 2-item tuples instead?</p>

<p>Yes.</p>

<p>Does this work?</p>

<p>Yes.</p>

<h2>Doing more interesting and risky stuff</h2>

<p>Note that there are many keyboard shortcuts that may cause weird behaviors if you bind them.</p>

<p>For example, if you bind <code>Ctrl-i</code>, your binding may trigger every time you try to indent.
And if you try to bind <code>Ctrl-m</code>, your binding may be ignored because this is equivalent to hitting the <code>Enter</code> key.</p>

<p>So be sure to test your REPL carefully after each new binding you try to invent.</p>

<p>If you want to do something more interesting, you could poke around in the <code>_pyrepl</code> package to see what existing code you can use/abuse.</p>

<p>For example, here&rsquo;s a very hacky way of making a binding to <code>Ctrl-x</code> followed by <code>Ctrl-r</code> to make this import <code>subprocess</code>, type in a <code>subprocess.run</code> line, and move your cursor between the empty string within the <code>run</code> call:</p>

<pre><code class="python">    class _cmds:
        class Run(Command):
            def do(self):
                from _pyrepl.commands import backward_kill_word, left
                backward_kill_word(self.reader, self.event_name, self.event).do()
                self.reader.insert("import subprocess\n")
                code = 'subprocess.run("", shell=True)'
                self.reader.insert(code)
                for _ in range(len(code) - code.index('""') - 1):
                    left(self.reader, self.event_name, self.event).do()
    reader.commands["subprocess_run"] = _cmds.Run
    reader.bind(r"\C-x\C-r", "subprocess_run")
</code></pre>

<h2>What keyboard shortcuts are available?</h2>

<p>As you play with customizing keyboard shortcuts, you&rsquo;ll likely notice that many key combinations result in strange and undesirable behavior when overridden.</p>

<p>For example, overriding <code>Ctrl-J</code> will also override the <code>Enter</code> key&hellip; at least it does in my terminal.</p>

<p>I&rsquo;ll list the key combinations that seem unproblematic on my setup with Gnome Terminal in Ubuntu Linux.</p>

<p>Here are <code>Control</code> key shortcuts that seem to be complete unused in the Python REPL:</p>

<ul>
<li><code>Ctrl-N</code></li>
<li><code>Ctrl-O</code></li>
<li><code>Ctrl-P</code></li>
<li><code>Ctrl-Q</code></li>
<li><code>Ctrl-S</code></li>
<li><code>Ctrl-V</code></li>
</ul>


<p>Note that overriding <code>Ctrl-H</code> is often an alternative to the backspace key</p>

<p>Here are <code>Alt</code>/<code>Meta</code> key shortcuts that appear unused on my machine:</p>

<ul>
<li><code>Alt-A</code></li>
<li><code>Alt-E</code></li>
<li><code>Alt-G</code></li>
<li><code>Alt-H</code></li>
<li><code>Alt-I</code></li>
<li><code>Alt-J</code></li>
<li><code>Alt-K</code></li>
<li><code>Alt-M</code></li>
<li><code>Alt-N</code></li>
<li><code>Alt-O</code></li>
<li><code>Alt-P</code></li>
<li><code>Alt-Q</code></li>
<li><code>Alt-S</code></li>
<li><code>Alt-V</code></li>
<li><code>Alt-W</code></li>
<li><code>Alt-X</code></li>
<li><code>Alt-Z</code></li>
</ul>


<p>You can add an <code>Alt</code> shortcut by using <code>\M</code> (for &ldquo;meta&rdquo;).
So <code>r"\M-a"</code> would capture <code>Alt-A</code> just as <code>r"\C-a"</code> would capture <code>Ctrl-A</code>.</p>

<p>Here are keyboard shortcuts that <em>can</em> be customized but you might want to consider whether the current default behavior is worth losing:</p>

<ul>
<li><code>Alt-B</code>: backward word (same as <code>Ctrl-Left</code>)</li>
<li><code>Alt-C</code>: capitalize word (does nothing on my machine&hellip;)</li>
<li><code>Alt-D</code>: kill word (delete to end of word)</li>
<li><code>Alt-F</code>: forward word (same as <code>Ctrl-Right</code>)</li>
<li><code>Alt-L</code>: downcase word (does nothing on my machine&hellip;)</li>
<li><code>Alt-U</code>: upcase word (does nothing on my machine&hellip;)</li>
<li><code>Alt-Y</code>: yank pop</li>
<li><code>Ctrl-A</code>: beginning of line (like the <code>Home</code> key)</li>
<li><code>Ctrl-B</code>: left (like the <code>Left</code> key)</li>
<li><code>Ctrl-E</code>: end of line (like the <code>End</code> key)</li>
<li><code>Ctrl-F</code>: right (like the <code>Right</code> key)</li>
<li><code>Ctrl-G</code>: cancel</li>
<li><code>Ctrl-H</code>: backspace (same as the <code>Backspace</code> key)</li>
<li><code>Ctrl-K</code>: kill line (delete to end of line)</li>
<li><code>Ctrl-T</code>: transpose characters</li>
<li><code>Ctrl-U</code>: line discard (delete to beginning of line)</li>
<li><code>Ctrl-W</code>: word discard (delete to beginning of word)</li>
<li><code>Ctrl-Y</code>: yank</li>
<li><code>Alt-R</code>: restore history (within history mode)</li>
</ul>


<h2>What fun have you found in <code>_pyrepl</code>?</h2>

<p>Find something fun while playing with the <code>_pyrepl</code> package&rsquo;s inner-workings?</p>

<p>I&rsquo;d love to hear about it!
Comment below to share what you found.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django and the Python 3.13 REPL]]></title>
    <link href="https://treyhunner.com/2024/10/django-and-the-new-python-3-dot-13-repl/"/>
    <updated>2024-10-13T21:03:32-07:00</updated>
    <id>https://treyhunner.com/2024/10/django-and-the-new-python-3-dot-13-repl</id>
    <content type="html"><![CDATA[<p>Your new Django project uses Python 3.13.</p>

<p>You&rsquo;re really looking forward to using the new REPL&hellip; but <code>python manage.py shell</code> just shows the same old Python REPL.
What gives?</p>

<p>Well, Django&rsquo;s management shell uses Python&rsquo;s <a href="https://docs.python.org/3/library/code.html">code</a> module to launch a custom REPL, but the <code>code</code> module doesn&rsquo;t (<a href="https://github.com/python/cpython/issues/119512">yet</a>) use the new Python REPL.</p>

<p>So you&rsquo;re out of luck&hellip; or are you?</p>

<h2>How stable do you need your <code>shell</code> command to be?</h2>

<p>The new Python REPL&rsquo;s code lives in a <a href="https://github.com/python/cpython/tree/v3.13.0/Lib/_pyrepl">_pyrepl</a> package.
Surely there must be some way to launch the new REPL using that <code>_pyrepl</code> package!</p>

<p>First, note the <code>_</code> before that package name.
It&rsquo;s <code>_pyrepl</code>, not <code>pyrepl</code>.</p>

<p>Any solution that relies on this module may break in future Python releases.</p>

<p>So&hellip; should we give up on looking for a solution, if we can&rsquo;t get a &ldquo;stable&rdquo; one?</p>

<p>I don&rsquo;t think so.</p>

<p>My <code>shell</code> command doesn&rsquo;t usually <em>need</em> to be stable in more than one version of Python at a time.
So I&rsquo;m fine with a solution that <em>attempts</em> to use the new REPL and then falls back to the old REPL if it fails.</p>

<h2>A working solution</h2>

<p>So, let&rsquo;s look at a working solution.</p>

<p>Stick <a href="https://pym.dev/p/2zqeq/">this code</a> in a <code>management/commands/shell.py</code> file within one of your Django apps:</p>

<pre><code class="python">"""Python 3.13 REPL support using the unsupported _pyrepl module."""
from django.core.management.commands.shell import Command as BaseShellCommand


class Command(BaseShellCommand):
    shells = ["ipython", "bpython", "pyrepl", "python"]

    def pyrepl(self, options):
        from _pyrepl.main import interactive_console
        interactive_console()
</code></pre>

<h2>How it works</h2>

<p>Django&rsquo;s <code>shell</code> command has made it very simple to add support for your favorite REPL of choice.</p>

<p><a href="https://github.com/django/django/blob/5.1.2/django/core/management/commands/shell.py">The code for the <code>shell</code> command</a> loops through the <code>shells</code> list and attempts to run a method with that name on its own class.
If an <code>ImportError</code> is raised then it attempts the next command, stopping once no exception occurs.</p>

<p>Our new command will try to use IPython and bpython if they&rsquo;re installed and then it will try the new Python 3.13 REPL followed by the old Python REPL.</p>

<p>If Python 3.14 breaks our import by moving the <code>interactive_console</code> function, then an <code>ImportError</code> will be raised, causing us to fall back to the old REPL after we upgrade to Python 3.14 one day.
If instead, the <code>interactive_console</code> function&rsquo;s usage changes (maybe it will require arguments) then our <code>shell</code> command will completely break and we&rsquo;ll need to manually fix it when we upgrade to Python 3.14.</p>

<h2>What&rsquo;s so great about the new REPL?</h2>

<p>If you&rsquo;re already using IPython or BPython as your REPL and you&rsquo;re enjoying them, I would stick with them.</p>

<p>Third-party libraries move faster than Python itself and they&rsquo;re often more feature-rich.
IPython has about 20 years worth of feature development and it has features that the built-in Python REPL will likely never have.</p>

<p>If you&rsquo;re using the default Python REPL though, this new REPL is a <em>huge</em> upgrade.
I&rsquo;ve been using it as my default REPL since May and I <em>love</em> it.
See <a href="https://pym.dev/python-313-whats-new/">my screencast on Python 3.13</a> for my favorite features in the new REPL.</p>

<p><strong>P.S. for Python Morsels users</strong>: if you want to try using that <code>code</code> module, check out the (fairly advanced) <a href="https://www.pythonmorsels.com/exercises/3efdd9e172a346d08679ec39419ed822/?level=advanced">replr</a> or (even more advanced) <a href="https://www.pythonmorsels.com/exercises/5800cdcbbc5b4936b3e253dc15050480/?level=advanced">replsync</a> exercises.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Switching from virtualenvwrapper to direnv, Starship, and uv]]></title>
    <link href="https://treyhunner.com/2024/10/switching-from-virtualenvwrapper-to-direnv-starship-and-uv/"/>
    <updated>2024-10-03T14:00:00-07:00</updated>
    <id>https://treyhunner.com/2024/10/switching-from-virtualenvwrapper-to-direnv-starship-and-uv</id>
    <content type="html"><![CDATA[<p>Earlier this week I considered whether I should finally switch away from <a href="https://virtualenvwrapper.readthedocs.io">virtualenvwrapper</a> to using local <code>.venv</code> managed by <a href="https://direnv.net">direnv</a>.</p>

<p>I&rsquo;ve never seriously used direnv, but I&rsquo;ve been hearing <a href="https://micro.webology.dev/2024/03/13/on-environment-variables.html">Jeff</a> and <a href="https://hynek.me/til/python-project-local-venvs/">Hynek</a> talk about their use of direnv for a while.</p>

<p>After a few days, I&rsquo;ve finally stumbled into a setup that works great for me.
I&rsquo;d like to note the basics of this setup as well as some fancy additions that are specific to my own use case.</p>

<h2>My old virtualenvwrapper workflow</h2>

<p>First, I&rsquo;d like to note my <em>old</em> workflow that I&rsquo;m trying to roughly recreate:</p>

<ol>
<li>I type <code>mkvenv3 &lt;project_name&gt;</code> to create a new virtual environment for the current project directory and activate it</li>
<li>I type <code>workon &lt;project_name&gt;</code> when I want to workon that project: this activates the correct virtual environment <em>and</em> changes to the project directory</li>
</ol>


<p>The initial setup I thought of allows me to:</p>

<ol>
<li>Run <code>echo layout python &gt; .envrc &amp;&amp; direnv allow</code> to create a virtual environment for the current project and activate it</li>
<li>Change directories into the project directory to automatically activate the virtual environment</li>
</ol>


<p>The more complex setup I eventually settled on allows me to:</p>

<ol>
<li>Run <code>venv &lt;project_name&gt;</code> to create a virtual environment for the current project and activate it</li>
<li>Run <code>workon &lt;project_name&gt;</code> to change directories into the project (which automatically activates the virtual environment)</li>
</ol>


<h2>The initial setup</h2>

<p>First, I <a href="https://direnv.net">installed direnv</a> and added this to my <code>~/.zshrc</code> file:</p>

<pre><code class="bash">eval "$(direnv hook zsh)"
</code></pre>

<p>Then whenever I wanted to create a virtual environment for a new project I created a <code>.envrc</code> file in that directory, which looked like this:</p>

<pre><code class="bash">layout python
</code></pre>

<p>Then I ran <code>direnv allow</code> to allow, as <code>direnv</code> instructed me to, to allow the new virtual environment to be automatically created and activated.</p>

<p>That&rsquo;s pretty much it.</p>

<p>Unfortunately, I did not like this initial setup.</p>

<h2>No shell prompt?</h2>

<p>The first problem was that the virtual environment&rsquo;s prompt didn&rsquo;t show up in my shell prompt.
This is due to a <a href="https://github.com/direnv/direnv/issues/529">direnv not allowing modification of the <code>PS1</code> shell prompt</a>.
That means I&rsquo;d need to modify my shell configuration to show the correct virtual environment name myself.</p>

<p>So I added this to my <code>~/.zshrc</code> file to show the virtual environment name at the beginning of my prompt:</p>

<pre><code class="bash"># Add direnv-activated venv to prompt
show_virtual_env() {
  if [[ -n "$VIRTUAL_ENV_PROMPT" &amp;&amp; -n "$DIRENV_DIR" ]]; then
    echo "($(basename $VIRTUAL_ENV_PROMPT)) "
  fi
}
PS1='$(show_virtual_env)'$PS1
</code></pre>

<h2>Wrong virtual environment directory</h2>

<p>The next problem was that the virtual environment was placed in <code>.direnv/python3.12</code>.
I wanted each virtual environment to be in a <code>.venv</code> directory instead.</p>

<p>To do that, I made a <code>.config/direnv/direnvrc</code> file that customized the python layout:</p>

<pre><code class="bash">layout_python() {
    if [[ -d ".venv" ]]; then
        VIRTUAL_ENV="$(pwd)/.venv"
    fi

    if [[ -z $VIRTUAL_ENV || ! -d $VIRTUAL_ENV ]]; then
        log_status "No virtual environment exists. Executing \`python -m venv .venv\`."
        python -m venv .venv
        VIRTUAL_ENV="$(pwd)/.venv"
    fi

    # Activate the virtual environment
    . $VIRTUAL_ENV/bin/activate
}
</code></pre>

<h2>Loading, unloading, loading, unloading&hellip;</h2>

<p>I also didn&rsquo;t like the loading and unloading messages that showed up each time I changed directories.
I removed those by clearing the <code>DIRENV_LOG_FORMAT</code> variable in my <code>~/.zshrc</code> configuration:</p>

<pre><code class="bash">export DIRENV_LOG_FORMAT=
</code></pre>

<h2>The more advanced setup</h2>

<p>I don&rsquo;t like it when all my virtual environment prompts show up as <code>.venv</code>.
I want ever prompt to be the name of the actual project&hellip; which is usually the directory name.</p>

<p>I also <em>really</em> wanted to be able to type <code>venv</code> to create a new virtual environment, activate it, and create the <code>.envrc</code> file for my <em>automatically</em>.</p>

<p>Additionally, I thought it would be really handy if I could type <code>workon &lt;project_name&gt;</code> to change directories to a specific project.</p>

<p>I made two aliases in my <code>~/.zshrc</code> configuration for all of this:</p>

<pre><code class="bash">venv() {
    local venv_name=${1:-$(basename "$PWD")}
    local projects_file="$HOME/.projects"

    # Check if .envrc already exists
    if [ -f .envrc ]; then
        echo "Error: .envrc already exists" &gt;&amp;2
        return 1
    fi

    # Create venv
    if ! python3 -m venv --prompt "$venv_name"; then
        echo "Error: Failed to create venv" &gt;&amp;2
        return 1
    fi

    # Create .envrc
    echo "layout python" &gt; .envrc

    # Append project name and directory to projects file
    echo "${venv_name} = ${PWD}" &gt;&gt; $projects_file

    # Allow direnv to immediately activate the virtual environment
    direnv allow
}

workon() {
    local project_name="$1"
    local projects_file="$HOME/.projects"
    local project_dir

    # Check for projects config file
    if [[ ! -f "$projects_file" ]]; then
        echo "Error: $projects_file not found" &gt;&amp;2
        return 1
    fi

    # Get the project directory for the given project name
    project_dir=$(grep -E "^$project_name\s*=" "$projects_file" | sed 's/^[^=]*=\s*//')

    # Ensure a project directory was found
    if [[ -z "$project_dir" ]]; then
        echo "Error: Project '$project_name' not found in $projects_file" &gt;&amp;2
        return 1
    fi

    # Ensure the project directory exists
    if [[ ! -d "$project_dir" ]]; then
        echo "Error: Directory $project_dir does not exist" &gt;&amp;2
        return 1
    fi

    # Change directories
    cd "$project_dir"
}
</code></pre>

<p>Now I can type this to create a <code>.venv</code> virtual environment in my current directory, which has a prompt named after the current directory, activate it, and create a <code>.envrc</code> file which will automatically activate that virtual environment (thanks to that <code>~/.config/direnv/direnvrc</code> file) whenever I change into that directory:</p>

<pre><code class="bash">$ venv
</code></pre>

<p>If I wanted to customized the prompt name for the virtual environment, I could do this:</p>

<pre><code class="bash">$ venv my_project
</code></pre>

<p>When I wanted to start working on that project later, I can either change into that directory <em>or</em> if I&rsquo;m feeling lazy I can simply type:</p>

<pre><code class="bash">$ workon my_project
</code></pre>

<p>That reads from my <code>~/.projects</code> file to look up the project directory to switch to.</p>

<h2>Switching to uv</h2>

<p>I also decided to try using <a href="https://docs.astral.sh/uv/">uv</a> for all of this, since it&rsquo;s faster at creating virtual environments.
One benefit of <code>uv</code> is that it tries to select the correct Python version for the project, if it sees a version noted in a <code>pyproject.toml</code> file.</p>

<p>Another benefit of using <code>uv</code>, is that I should also be able to update the <code>venv</code> to use a specific version of Python with something like <code>--python 3.12</code>.</p>

<p>Here are the updated shell aliases for the <code>~/.zshrc</code> for <code>uv</code>:</p>

<pre><code class="bash">venv() {
    local venv_name
    local dir_name=$(basename "$PWD")

    # If there are no arguments or the last argument starts with a dash, use dir_name
    if [ $# -eq 0 ] || [[ "${!#}" == -* ]]; then
        venv_name="$dir_name"
    else
        venv_name="${!#}"
        set -- "${@:1:$#-1}"
    fi

    # Check if .envrc already exists
    if [ -f .envrc ]; then
        echo "Error: .envrc already exists" &gt;&amp;2
        return 1
    fi

    # Create venv using uv with all passed arguments
    if ! uv venv --seed --prompt "$@" "$venv_name"; then
        echo "Error: Failed to create venv" &gt;&amp;2
        return 1
    fi

    # Create .envrc
    echo "layout python" &gt; .envrc

    # Append to ~/.projects
    echo "${venv_name} = ${PWD}" &gt;&gt; ~/.projects

    # Allow direnv to immediately activate the virtual environment
    direnv allow
}
</code></pre>

<h2>Switching to starship</h2>

<p>I also decided to try out using <a href="https://starship.rs">Starship</a> to customize my shell this week.</p>

<p>I added this to my <code>~/.zshrc</code>:</p>

<pre><code class="bash">eval "$(starship init zsh)"
</code></pre>

<p>And removed this, which is no longer needed since Starship will be managing the shell for me:</p>

<pre><code class="bash"># Add direnv-activated venv to prompt
show_virtual_env() {
  if [[ -n "$VIRTUAL_ENV_PROMPT" &amp;&amp; -n "$DIRENV_DIR" ]]; then
    echo "($(basename $VIRTUAL_ENV_PROMPT)) "
  fi
}
PS1='$(show_virtual_env)'$PS1
</code></pre>

<p>I also switched my <code>python</code> layout for direnv to just set the <code>$VIRTUAL_ENV</code> variable and add the <code>$VIRTUAL_ENV/bin</code> directory to my <code>PATH</code>, since the <code>$VIRTUAL_ENV_PROMPT</code> variable isn&rsquo;t needed for Starship to pick up the prompt:</p>

<pre><code class="bash">layout_python() {
    VIRTUAL_ENV="$(pwd)/.venv"
    PATH_add "$VIRTUAL_ENV/bin"
    export VIRTUAL_ENV
}
</code></pre>

<p>I also made a <em>very</em> boring Starship configuration in <code>~/.config/starship.toml</code>:</p>

<pre><code class="toml">format = """
$python\
$directory\
$git_branch\
$git_state\
$character"""

add_newline = false

[python]
format = '([(\($virtualenv\) )]($style))'
style = "bright-black"

[directory]
style = "bright-blue"

[character]
success_symbol = "[\\$](black)"
error_symbol = "[\\$](bright-red)"
vimcmd_symbol = "[‚ùÆ](green)"

[git_branch]
format = "[$symbol$branch]($style) "
style = "bright-purple"

[git_state]
format = '\([$state( $progress_current/$progress_total)]($style)\) '
style = "purple"

[cmd_duration.disabled]
</code></pre>

<p>I setup such a boring configuration because when I&rsquo;m teaching, I don&rsquo;t want my students to be confused or distracted by a prompt that has considerably more information in it than <em>their</em> default prompt may have.</p>

<p>The biggest downside of switching to Starship has been my own earworm-oriented brain.
As I update my Starship configuration files, I&rsquo;ve repeatedly heard David Bowie singing &ldquo;I&rsquo;m a Starmaaan&rdquo;. üé∂</p>

<h2>Ground control to major TOML</h2>

<p>After all of that, I realized that I could additionally use different Starship configurations for different directories by putting a <code>STARSHIP_CONFIG</code> variable in specific layouts.
After that realization, I made my configuration even <em>more</em> vanilla and made some alternative configurations in my <code>~/.config/direnv/direnvrc</code> file:</p>

<pre><code class="bash">layout_python() {
    VIRTUAL_ENV="$(pwd)/.venv"

    PATH_add "$VIRTUAL_ENV/bin"
    export VIRTUAL_ENV

    export STARSHIP_CONFIG=/home/trey/.config/starship/python.toml
}

layout_git() {
    export STARSHIP_CONFIG=/home/trey/.config/starship/git.toml
}
</code></pre>

<p>Those other two configuration files are fancier, as I have no concern about them distracting my students since I&rsquo;ll never be within those directories while teaching.</p>

<p>You can find those files in <a href="https://github.com/treyhunner/dotfiles">my dotfiles repository</a>.</p>

<h2>The necessary tools</h2>

<p>So I replaced virtualenvwrapper with direnv, uv, and Starship.
Though direnv was is doing most of the important work here.
The use of uv and Starship were just bonuses.</p>

<p>I <em>am</em> also hoping to eventually replace my pipx use with uv and once uv supports <a href="https://github.com/astral-sh/uv/issues/6265">adding python3.x commands</a> to my <code>PATH</code>, I may replace my use of pyenv with uv as well.</p>

<p>Thanks to all who <a href="https://mastodon.social/@treyhunner/113232640710715449">participated in my Mastodon thread</a> as I fumbled through discovering this setup.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10-Week Hands-On Python Course]]></title>
    <link href="https://treyhunner.com/2024/08/python-high-five/"/>
    <updated>2024-08-20T14:20:00-07:00</updated>
    <id>https://treyhunner.com/2024/08/python-high-five</id>
    <content type="html"><![CDATA[<p>Ever wished you could take an <strong>Intro to Python training</strong> with me, but you don&rsquo;t work for a company with a generous training budget?
I&rsquo;m running a Python-learning program just for this situation.</p>

<p><a href="https://www.pythonmorsels.com/high-five/">Python High Five</a> is a 10-week Python jumpstart program that starts <strong>this September</strong>.</p>

<h2>Set aside the time to learn ‚åö</h2>

<p>One of the biggest problems for folks starting to learn Python is <strong>setting aside the time</strong>.
And even if you <em>do</em> manage to set aside the time, you&rsquo;ll often hit a roadblock where you feel <strong>confused</strong>.</p>

<p>Python High Five is a way to keep a <strong>daily learning habit</strong> <em>and</em> to <strong>get help</strong> when find yourself stuck.</p>

<p>This program is based around <strong>daily practice</strong>.
Monday through Friday you&rsquo;ll pick <strong>30 minutes</strong> from your schedule, at any time that works you.
During those 30 minutes, you&rsquo;ll watch a 5 minute video, work on the day&rsquo;s exercise, and reflect on your progress.</p>

<h2>The most effective learning is hands-on üñêÔ∏è</h2>

<p>Python High Five is all about learning through <strong>writing Python code</strong>.
Each week we&rsquo;ll dive deeper into Python, building upon what we&rsquo;ve learned so far.</p>

<p>When you find yourself stuck you can get help through an asynchronous <strong>group chat</strong> and weekly <strong>office hour</strong> sessions.
In addition to our weekly office hours together, I&rsquo;ll check the chat each day, respond to questions, and provide guidance.</p>

<h2>Proven learning techniques behind the scenes üìù</h2>

<p>The daily check-ins allow for daily <strong>accountability</strong>.
The group chat also provides both a community of peers to rely on, and <strong>guidance from an experienced Python trainer</strong> (me).</p>

<p>We&rsquo;ll also be using proven learning techniques behind the scenes:</p>

<ul>
<li><strong>Retrieval practice</strong>: you don&rsquo;t learn by putting information into your head, but by trying to take it out; for Python learning, that means writing code.</li>
<li><strong>Spaced repetition</strong>: cramming is less effective than learning spaced out over time, which is why we&rsquo;ll spend 30 minutes each weekday instead of spending a few hours every week.</li>
<li><strong>Interleaving</strong>: each day&rsquo;s exercise isn&rsquo;t predictably themed because a bit of unpredictability can be <em>really</em> improve learning outcomes.</li>
<li><strong>Elaboration</strong>: your daily check-in isn&rsquo;t <em>just</em> about reflection: it&rsquo;s also a helpful learning tool!</li>
</ul>


<p>Plus, we&rsquo;ll be working through curriculum I&rsquo;ve been developing and iterating on for many years.
I have taught these topics in many different settings to folks from <em>many</em> different backgrounds.</p>

<h2>Form a daily learning habit üîÅ</h2>

<p>Any 10-week program will be <em>just the start</em> of a Python learning habit.
You&rsquo;ll need to keep up your Python after Python High Five ends, either by promptly applying your skills to a new project or diving deeper into Python with continued daily practice.</p>

<p>That&rsquo;s why I&rsquo;m offering an <strong>80% discount</strong> for High Five attendees on one year of <a href="https://www.pythonmorsels.com">Python Morsels</a>, which is my skill-building service designed to help <strong>deepen your Python skills every week</strong>.
You can <a href="https://www.pythonmorsels.com/high-five/#morsels">see more details on that here</a>.</p>

<h2>Ready to start your Python journey? ‚õ∞Ô∏è</h2>

<p>Are you ready to start your Python journey with a solid foundation?</p>

<p><a href="https://www.pythonmorsels.com/high-five/">Read more about Python High Five</a> and decide whether this is for you.</p>

<p>Keep in mind that while the program begins on September 9, <strong>enrollment closes on August 31</strong>.
So <a href="https://www.pythonmorsels.com/high-five/#faq">check the FAQs</a> and if you have additional questions, be sure to email me soon!</p>
]]></content>
  </entry>
  
</feed>
