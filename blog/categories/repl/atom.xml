<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: repl | Trey Hunner]]></title>
  <link href="https://treyhunner.com/blog/categories/repl/atom.xml" rel="self"/>
  <link href="https://treyhunner.com/"/>
  <updated>2025-10-18T20:00:56-07:00</updated>
  <id>https://treyhunner.com/</id>
  <author>
    <name><![CDATA[Trey Hunner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Handy Python REPL Modifications]]></title>
    <link href="https://treyhunner.com/2025/10/handy-python-repl-modifications/"/>
    <updated>2025-10-08T19:59:20-07:00</updated>
    <id>https://treyhunner.com/2025/10/handy-python-repl-modifications</id>
    <content type="html"><![CDATA[<p>I find myself in the Python REPL <em>a lot</em>.</p>

<p>I open up the REPL to play with an idea, to use Python as a calculator or quick and dirty text parsing tool, to record a screencast, to come up with a code example for an article, and (most importantly for me) to teach Python.
My Python courses and workshops are based largely around writing code together to guess how something works, try it out, and repeat.</p>

<p>As I&rsquo;ve written about before, you can <a href="https://treyhunner.com/2024/10/adding-keyboard-shortcuts-to-the-python-repl/">add custom keyboard shortcuts</a> to the new Python REPL (since 3.13) and <a href="https://treyhunner.com/2025/09/customizing-your-python-repl-color-scheme/">customize the REPL syntax highlighting</a> (since 3.14).
If you spend time in the Python REPL and wish it behaved a little more <strong>like your favorite editor</strong>, these tricks can come in handy.</p>

<p>I have added <strong>custom keyboard shortcuts</strong> to my REPL and other modifications to help me <strong>more quickly write and edit code in my REPL</strong>.
I&rsquo;d like to share some of the modifications that I&rsquo;ve found helpful in my own Python REPL.</p>

<h2>Creating a PYTHONSTARTUP file</h2>

<p>If you want to run Python code every time an interactive prompt (a REPL) starts, you can make a PYTHONSTARTUP file.</p>

<p>When Python launches an interactive prompt, it checks for a <code>PYTHONSTARTUP</code> environment variable.
If it finds one, it treats it as a filename that contains Python code and it <strong>runs all the code in that file</strong>, as if you had copy-pasted the code into the REPL.</p>

<p>So all of the modifications I have made to my Python REPL rely on this <code>PYTHONSTARTUP</code> variable in my <code>~/.zshenv</code> file:</p>

<pre><code class="sh">export PYTHONSTARTUP=$HOME/.startup.py
</code></pre>

<p>If you use bash, you&rsquo;ll put that in your <code>~/.bashrc</code> file.
If you&rsquo;re on Windows <a href="https://gist.github.com/mitchmindtree/92c8e37fa80c8dddee5b94fc88d1288b">you&rsquo;ll need to set an environment variable the Windows way</a>.</p>

<p>With that variable set, I can now create a <code>~/.startup.py</code> file that has Python code in it.
That code will automatically run every time I launch a new Python REPL, whether within a virtual environment or outside of one.</p>

<h2>My REPL keyboard shortcuts</h2>

<p>The quick summary of my <em>current</em> modifications are:</p>

<ul>
<li>Pressing <strong>Home</strong> moves to the <strong>first character in the code block</strong></li>
<li>Pressing <strong>End</strong> moves to the <strong>last character in the code block</strong></li>
<li>Pressing <strong>Alt+M</strong> moves to the <strong>first character</strong> on the current line</li>
<li>Pressing <strong>Shift+Tab</strong> removes <strong>common indentation</strong> from the code block</li>
<li>Pressing <strong>Alt+Up</strong> swaps the current line with <strong>the line above it</strong></li>
<li>Pressing <strong>Alt+Down</strong> swaps the current line with <strong>the line below it</strong></li>
<li>Pressing <strong>Ctrl+N</strong> inserts <strong>a specific list of numbers</strong></li>
<li>Pressing <strong>Ctrl+F</strong> inserts <strong>a specific list of strings</strong></li>
</ul>


<p>If you&rsquo;ve read <a href="https://www.pythonmorsels.com/repl-features/">my Python REPL shortcuts</a> article, you know that we can use <strong>Ctrl+A</strong> to move to the beginning of the line and <strong>Ctrl+E</strong> to move to the end of the line.
I already use those instead of the Home and End keys, so I decided to rebind Home and End to do something different.</p>

<p>The <strong>Alt+M</strong> key combination is essentially the same as <code>Alt+M</code> in Emacs or <code>^</code> in Vim. I usually prefer to move to the beginning of the non-whitespace in a line rather than to the beginning of the <em>entire</em> line.</p>

<p>The <strong>Shift+Tab</strong> functionality is basically a fancy wrapper around <a href="https://www.pythonmorsels.com/dedent/">using <code>textwrap.dedent</code></a>: it dedents the current code block while keeping the cursor over the same character it was at before.</p>

<p>The <strong>Ctrl+N</strong> and <strong>Ctrl+F</strong> shortcuts make it easier for me to grab an example data structure to work with when teaching.</p>

<p>In addition to the above changes, I also modify my color scheme to work nicely with my Solarized Light color scheme in Vim.</p>

<h2>I created a pyrepl-hacks library for this</h2>

<p>My PYTHONSTARTUP file became so messy that I ended up creating a <a href="https://github.com/treyhunner/pyrepl-hacks">pyrepl-hacks library</a> to help me with these modifications.</p>

<p><a href="https://github.com/treyhunner/dotfiles/commits/main/startup.py">My PYTHONSTARTUP file</a> now looks pretty much like this:</p>

<pre><code class="python">import pathlib as _pathlib, sys as _sys
_sys.path.append(str(_pathlib.Path.home() / ".pyhacks"))

try:
    import pyrepl_hacks as _repl
except ImportError:
    _repl = None  # We're on Python 3.12 or below
else:
    _repl.bind("Home", "home")
    _repl.bind("End", "end")
    _repl.bind("Alt+M", "move-to-indentation")
    _repl.bind("Shift+Tab", "dedent")
    _repl.bind("Alt+Down", "move-line-down")
    _repl.bind("Alt+Up", "move-line-up")
    _repl.bind_to_insert("Ctrl+N", "[2, 1, 3, 4, 7, 11, 18, 29]")
    _repl.bind_to_insert(
        "Ctrl+F",
        '["apples", "oranges", "bananas", "strawberries", "pears"]',
    )

    try:
        # Solarized Light theme to match vim
        _repl.update_theme(
            keyword="green",
            builtin="blue",
            comment="intense blue",
            string="cyan",
            number="cyan",
            definition="blue",
            soft_keyword="bold green",
            op="intense green",
            reset="reset, intense green",
        )
    except ImportError:
        pass  # We're on Python 3.13 or below

del _repl, _pathlib, _sys  # Avoid global REPL namespace pollution
</code></pre>

<p>That&rsquo;s pretty short!</p>

<p>But wait&hellip; won&rsquo;t this fail unless pyrepl-hacks is installed in every virtual environment <em>and</em> installed globally for every Python version on my machine?</p>

<p>That&rsquo;s where that <code>sys.path.append</code> trick comes in handy&hellip;</p>

<h2>Wait&hellip; let&rsquo;s acknowledge the dragons üê≤</h2>

<p>At this point I&rsquo;d like to pause to note that all of this relies on using an implementation detail of Python that is deliberately undocumented because it <em>is not designed</em> to be used by end users.</p>

<p>The above code all relies on the <code>_pyrepl</code> module that was added in Python 3.13 (and optionally the <code>_colorize</code> module that was added in Python 3.14).</p>

<p>When I run a new future version of Python (for example Python 3.15) this solution may break.
I&rsquo;m willing to take that risk, as I know that I can always unset my shell&rsquo;s <code>PYTHONSTARTUP</code> variable or clear out my startup file.</p>

<p>So, just be aware&hellip; here be (private undocumented implementation detail) dragons.</p>

<h2>Monkey patching <code>sys.path</code> to allow importing <code>pyrepl_hacks</code></h2>

<p>I didn&rsquo;t install pyrepl-hacks <em>the usual way</em>.
Instead, I installed it in a very specific location.</p>

<p>I created a <code>~/.pyhacks</code> directory and then installed <code>pyrepl-hacks</code> <em>into</em> that directory:</p>

<pre><code class="bash">$ mkdir -p ~/.pyhacks
$ python -m pip install pyrepl-hacks --target ~/.pyhacks
</code></pre>

<p>In order for the <code>pyrepl_hacks</code> Python package to work, it needs to available within every Python REPL I might launch.
Normally that would mean that it needs to be installed in every virtual environment that Python runs within.
This trick avoids that constraint.</p>

<p>When Python tries to import a module, it iterates through the <code>sys.path</code> directory list.
Any Python packages found <em>within</em> any of the <code>sys.path</code> directories may be imported.</p>

<p>So monkey patching <code>sys.path</code> within my PYTHONSTARTUP file allows <code>pyrepl_hacks</code> to be imported in every Python interpreter I launch:</p>

<pre><code class="python">from pathlib import Path
import sys
sys.path.append(str(Path.home() / ".pyhacks"))
</code></pre>

<p>With those 3 lines (or something like them) placed in my PYTHONSTARTUP file, all interactive Python interpreters I launch will be able to import modules that are located in my <code>~/.pyhacks</code> directory.</p>

<h2>Creating your own custom REPL commands</h2>

<p>That&rsquo;s pretty neat.
But what if you want to invent your own REPL commands?</p>

<p>Well, the <code>bind</code> utility I&rsquo;ve created in the <code>pyrepl_hacks</code> module can be used as a decorator for that.</p>

<p>This will make Ctrl+X followed by Ctrl+R insert <code>import subprocess</code> followed by <code>subprocess.run("", shell=True)</code> with the cursor positioned in between the double quotes after it&rsquo;s all inserted:</p>

<pre><code class="python">import pyrepl_hacks as _repl

@_repl.bind(r"Ctrl+X Ctrl+R", with_event=True)
def subprocess_run(reader, event_name, event):
    """Ctrl+X followed by Ctrl+R will insert a subprocess.run command."""
    reader.insert("import subprocess\n")
    code = 'subprocess.run("", shell=True)'
    reader.insert(code)
    for _ in range(len(code) - code.index('""') - 1):
        _repl.commands.left(reader, event_name, event)
</code></pre>

<p>You can read more about the ins and outs of the pyrepl-hacks package <a href="https://github.com/treyhunner/pyrepl-hacks#readme">in the readme file</a>.</p>

<h2>pyrepl-hacks is just a fancy wrapper</h2>

<p>The pyrepl-hacks package is really just a fancy wrapper around Python&rsquo;s <code>_pyrepl</code> and <code>_colorize</code> modules.</p>

<p>Why did I make a whole package and then modify my <code>sys.path</code> to use it, when I could have just used <code>_pyrepl</code> directly?</p>

<p>Three reasons:</p>

<ol>
<li>To make creating new commands <em>a bit</em> easier (functions can be used instead of classes)</li>
<li>To make the key bindings look a bit nicer (I prefer <code>"Ctrl+M"</code> over <code>r"\C-M"</code>)</li>
<li>To hide my hairy hacks behind a shiny API ‚ú®</li>
</ol>


<p>Before I made pyrepl-hacks, I implemented these commands directly within my PYTHONSTARTUP file by reaching into the internals of <code>_pyrepl</code> directly.</p>

<p>My PYTHONSTARTUP file before pyrepl-hacks was <a href="https://pym.dev/p/35q9e/">over 100 lines longer</a>.</p>

<h2>Try pyrepl-hacks and leave feedback</h2>

<p>My hope is that the <a href="https://github.com/treyhunner/pyrepl-hacks">pyrepl-hacks</a> library will be obsolete one day.
Eventually the <code>_pyrepl</code> module might be renamed to <code>pyrepl</code> (or maybe just <code>repl</code>?) and it will have a well-documented friendly-ish public interface.</p>

<p>In the meantime, I plan to maintain pyrepl-hacks.
As Python 3.15 is developed, I&rsquo;ll make sure it continues to work.
And I may add more useful commands if I think of any.</p>

<p>If you hack your own REPL, I&rsquo;d love to hear what modifications you come up with.
And if you have thoughts on how to improve pyrepl-hacks, please open an issue or get in touch.</p>

<p>Also, <strong>if you use Windows</strong>, <a href="https://github.com/treyhunner/pyrepl-hacks/issues/1">please help me</a> confirm <strong>whether certain keys work on Windows</strong>. Thanks!</p>

<p>Contributions and ideas welcome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Customizing your Python REPL's color scheme (Python 3.14+)]]></title>
    <link href="https://treyhunner.com/2025/09/customizing-your-python-repl-color-scheme/"/>
    <updated>2025-09-04T14:00:00-07:00</updated>
    <id>https://treyhunner.com/2025/09/customizing-your-python-repl-color-scheme</id>
    <content type="html"><![CDATA[<p>Did you know that Python 3.14 will include <a href="https://docs.python.org/3.14/whatsnew/3.14.html#whatsnew314-pyrepl-highlighting">syntax highlighting</a> in the REPL?</p>

<p>Python 3.14 is due to be <a href="https://peps.python.org/pep-0745/">officially released</a> in about a month.
I recommended tweaking your Python setup now so you&rsquo;ll have your ideal color scheme on release day.</p>

<p><img src="/images/python3.14-repl-syntax-highlighting.png" title="Python 3.14 REPL with syntax highlighting using custom color scheme" ></p>

<p>But&hellip; what if the default syntax colors don&rsquo;t match the colors that your text editor uses?</p>

<p>Well, fortunately you can customize your color scheme!</p>

<p><strong>Warning</strong>: I am recommending using an undocumented private module (it has an <code>_</code>-prefixed name) which may change in future Python versions.
Do not use this module in production code.</p>

<h2>Installing Python 3.14</h2>

<p>Don&rsquo;t have Python 3.14 installed yet?</p>

<p>If you have <a href="https://docs.astral.sh/uv/">uv</a> installed, you can run this command to launch Python 3.14:</p>

<pre><code class="bash">$ uv run --python 3.14 python
</code></pre>

<p>That will automatically install 3.14 (if you don&rsquo;t have it yet) and run it.</p>

<h2>Setting a theme</h2>

<p>I have my terminal colors set to the Solarized Light color palette and I have Vim use a Solarized Light color scheme as well.</p>

<p>The REPL doesn&rsquo;t <em>quite</em> match my text editor by default:</p>

<p><img src="/images/python3.14-repl-default-color-scheme.png" title="Python 3.14 REPL with default syntax highlighting" ></p>

<p>The numbers, comments, strings, and keywords are all different colors than my text editor.</p>

<p>This code makes the Python REPL use <em>nearly</em> the same syntax highlighting as my text editor:</p>

<pre><code class="python">from _colorize import set_theme, default_theme, Syntax, ANSIColors

set_theme(default_theme.copy_with(
    syntax=Syntax(
        keyword=ANSIColors.GREEN,
        builtin=ANSIColors.BLUE,
        comment=ANSIColors.INTENSE_BLUE,
        string=ANSIColors.CYAN,
        number=ANSIColors.CYAN,
        definition=ANSIColors.BLUE,
        soft_keyword=ANSIColors.BOLD_GREEN,
        op=ANSIColors.INTENSE_GREEN,
        reset=ANSIColors.RESET + ANSIColors.INTENSE_GREEN,
    ),
))
</code></pre>

<p>Check it out:</p>

<p><img src="/images/python3.14-repl-syntax-highlighting.png" title="Python 3.14 REPL with syntax highlighting using custom color scheme" ></p>

<p>Neat, right?</p>

<p>But&hellip; I want this to be enabled by default!</p>

<h2>Using a <code>PYTHONSTARTUP</code> file</h2>

<p>You can use a <code>PYTHONSTARTUP</code> file to run code every time a new Python process starts.</p>

<p>If Python sees a <code>PYTHONSTARTUP</code> environment variable when it starts up, it will open that file and evaluate the code within it.</p>

<p>I have this in my <code>~/.zshrc</code> file to set the <code>PYTHONSTARTUP</code> environment variable to <code>~/.startup.py</code>:</p>

<pre><code class="bash"># Setup python-launcher to use startup file
export PYTHONSTARTUP=$HOME/.startup.py
</code></pre>

<p>In my <code>~/.startup.py</code> file, I have this code:</p>

<pre><code class="python">def _main():
    """Everything's in a function to avoid polluting the global scope."""
    try:
        from _colorize import set_theme, default_theme, Syntax, ANSIColors
    except ImportError:
        pass  # Python 3.13 and below
    else:
        # Define Solarized Light colors
        solarized_light_theme = default_theme.copy_with(
            syntax=Syntax(
                keyword=ANSIColors.GREEN,
                builtin=ANSIColors.BLUE,
                comment=ANSIColors.INTENSE_BLUE,
                string=ANSIColors.CYAN,
                number=ANSIColors.CYAN,
                definition=ANSIColors.BLUE,
                soft_keyword=ANSIColors.BOLD_GREEN,
                op=ANSIColors.INTENSE_GREEN,
                reset=ANSIColors.RESET + ANSIColors.INTENSE_GREEN,
            ),
        )
        set_theme(solarized_light_theme)

_main()  # _main avoids name collision, in case python -i is used
del _main  # Delete _main from global scope
</code></pre>

<p>Note that:</p>

<ol>
<li>I put all relevant code within a <code>_main</code> function so that the variables I set don&rsquo;t remain in the global scope of the Python REPL (they will by default)</li>
<li>I call the <code>_main</code> function and then delete the function afterward, again so the <code>_main</code> variable doesn&rsquo;t stay floating around in my REPL</li>
<li>I use <code>try</code>-<code>except</code>-<code>else</code> to ensure errors don&rsquo;t occur on Python 3.13 and below</li>
</ol>


<p>Also note that the syntax highlighting in the new REPL is <a href="https://github.com/python/cpython/issues/134953">not as fine-grained</a> as many other syntax highlighting tools.
I suspect that it may become a bit more granular over time, <strong>which may break the above code</strong>.</p>

<p>The <code>_colorize</code> module is currently an internal implementation detail and is deliberately undocumented.
Its API may change at any time, so <strong>the above code may break in Python 3.15</strong>.
If that happens, I&rsquo;ll just update my <code>PYTHONSTARTUP</code> file at that point.</p>

<h2>Packaging themes</h2>

<p>I&rsquo;ve stuck all of the above code in a <code>~/.startup.py</code> file and I set the <code>PYTHONSTARTUP</code> environment variable on my system to point to this file.</p>

<p>Instead of manually updating a startup file, is there any way to make these themes <em>installable</em>?</p>

<p>Well, if a <code>.pth</code> file is included in Python&rsquo;s <code>site-packages</code> directory, that file (which must be a single line) will be run whenever Python starts up.
In theory, a package could use such a file to import a module and then call a function that would set the color scheme for the REPL.
My <a href="https://github.com/treyhunner/dramatic">dramatic</a> package uses (<em>cough</em> abuses <em>cough</em>) <code>.pth</code> files in this way.</p>

<p>This sounds like a somewhat bad idea, but maybe not a <em>horrible</em> idea.</p>

<p>If you do this, let me know.</p>

<h2>What&rsquo;s your theme?</h2>

<p>Have you played with setting a theme in your own Python REPL?</p>

<p>What theme are you using?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding keyboard shortcuts to the Python REPL]]></title>
    <link href="https://treyhunner.com/2024/10/adding-keyboard-shortcuts-to-the-python-repl/"/>
    <updated>2024-10-28T07:15:00-07:00</updated>
    <id>https://treyhunner.com/2024/10/adding-keyboard-shortcuts-to-the-python-repl</id>
    <content type="html"><![CDATA[<p>I talked about the new Python 3.13 REPL <a href="https://treyhunner.com/2024/05/my-favorite-python-3-dot-13-feature/">a few months ago</a> and <a href="https://www.pythonmorsels.com/python-313-whats-new/">after 3.13 was released</a>.
I think it&rsquo;s <strong>awesome</strong>.</p>

<p>I&rsquo;d like to share a secret feature within the Python 3.13 REPL which I&rsquo;ve been finding useful recently: <strong>adding custom keyboard shortcuts</strong>.</p>

<p>This feature involves a <code>PYTHONSTARTUP</code> file, use of an unsupported Python module, and dynamically evaluating code.</p>

<p>In short, we may be getting ourselves into trouble.
But the result is <em>very</em> neat!</p>

<p>Thanks to ≈Åukasz Llanga for inspiring this post via his excellent <a href="https://youtu.be/dK6HGcSb60Y?si=jWPEa8BcdYGnW9l6">EuroPython keynote talk</a>.</p>

<h2>The goal: keyboard shortcuts in the REPL</h2>

<p>First, I&rsquo;d like to explain the end result.</p>

<p>Let&rsquo;s say I&rsquo;m in the Python REPL on my machine and I&rsquo;ve typed <code>numbers =</code>:</p>

<pre><code class="pycon">&gt;&gt;&gt; numbers =
</code></pre>

<p>I can now hit <code>Ctrl-N</code> to enter a list of numbers I often use while teaching (<a href="https://en.wikipedia.org/wiki/Lucas_number">Lucas numbers</a>):</p>

<pre><code class="pycon">numbers = [2, 1, 3, 4, 7, 11, 18, 29]
</code></pre>

<p>That saved me some typing!</p>

<h2>Getting a prototype working</h2>

<p>First, let&rsquo;s try out an example command.</p>

<p>Copy-paste this into your Python 3.13 REPL:</p>

<pre><code class="python">from _pyrepl.simple_interact import _get_reader
from _pyrepl.commands import Command

class Lucas(Command):

    def do(self):
        self.reader.insert("[2, 1, 3, 4, 7, 11, 18, 29]")

reader = _get_reader()
reader.commands["lucas"] = Lucas
reader.bind(r"\C-n", "lucas")
</code></pre>

<p>Now hit <code>Ctrl-N</code>.</p>

<p>If all worked as planned, you should see that list of numbers entered into the REPL.</p>

<p>Cool!
Now let&rsquo;s generalize this trick and make Python run our code whenever it starts.</p>

<p>But first&hellip; a disclaimer.</p>

<h2>Here be dragons üêâ</h2>

<p>Notice that <code>_</code> prefix in the <code>_pyrepl</code> module that we&rsquo;re importing from?
That means this module is officially unsupported.</p>

<p>The <code>_pyrepl</code> module is an implementation detail and its implementation may change at any time in future Python versions.</p>

<p>In other words: <code>_pyrepl</code> is designed to be used by <em>Python&rsquo;s standard library modules</em> and not anyone else.
That means that we should assume this code will break in a future Python version.</p>

<p>Will that stop us from playing with this module for the fun of it?</p>

<p>It won&rsquo;t.</p>

<h2>Creating a <code>PYTHONSTARTUP</code> file</h2>

<p>So we&rsquo;ve made <em>one</em> custom key combination for ourselves.
How can we setup this command automatically whenever the Python REPL starts?</p>

<p>We need a <code>PYTHONSTARTUP</code> file.</p>

<p>When Python launches, if it sees a <code>PYTHONSTARTUP</code> environment variable it will treat that environment variable as a Python file to run on startup.</p>

<p>I&rsquo;ve made a <code>/home/trey/.python_startup.py</code> file and I&rsquo;ve set this environment variable in my shell&rsquo;s configuration file (<code>~/.zshrc</code>):</p>

<pre><code class="bash">export PYTHONSTARTUP=$HOME/.python_startup.py
</code></pre>

<p>To start, we could put our single custom command in this file:</p>

<pre><code class="python">try:
    from _pyrepl.simple_interact import _get_reader
    from _pyrepl.commands import Command
except ImportError:
    pass  # Not in the new pyrepl OR _pyrepl implementation changed
else:
    class Lucas(Command):
        def do(self):
            self.reader.insert("[2, 1, 3, 4, 7, 11, 18, 29]")

    reader = _get_reader()
    reader.commands["lucas"] = Lucas
    reader.bind(r"\C-n", "lucas")
</code></pre>

<p>Note that I&rsquo;ve stuck our code in a <code>try</code>-<code>except</code> block.
Our code <em>only</em> runs if those <code>_pyrepl</code> imports succeed.</p>

<p>Note that this <em>might</em> still raise an exception when Python starts <em>if</em> the reader object&rsquo;s <code>command</code> attribute or <code>bind</code> method change in a way that breaks our code.</p>

<p>Personally, I&rsquo;d like to see those breaking changes occur print out a traceback the next time I upgrade Python.
So I&rsquo;m going to leave those last few lines <em>without</em> their own catch-all exception handler.</p>

<h2>Generalizing the code</h2>

<p>Here&rsquo;s a <code>PYTHONSTARTUP</code> file with a more generalized solution:</p>

<pre><code class="python">try:
    from _pyrepl.simple_interact import _get_reader
    from _pyrepl.commands import Command
except ImportError:
    pass
else:
    # Hack the new Python 3.13 REPL!
    cmds = {
        r"\C-n": "[2, 1, 3, 4, 7, 11, 18, 29]",
        r"\C-f": '["apples", "oranges", "bananas", "strawberries", "pears"]',
    }
    from textwrap import dedent
    reader = _get_reader()
    for n, (key, text) in enumerate(cmds.items(), start=1):
        name = f"CustomCommand{n}"
        exec(dedent(f"""
            class _cmds:
                class {name}(Command):
                    def do(self):
                        self.reader.insert({text!r})
                reader.commands[{name!r}] = {name}
                reader.bind({key!r}, {name!r})
        """))
    # Clean up all the new variables
    del _get_reader, Command, dedent, reader, cmds, text, key, name, _cmds, n
</code></pre>

<p>This version uses a dictionary to map keyboard shortcuts to the text they should insert.</p>

<p>Note that we&rsquo;re repeatedly building up a string of <code>Command</code> subclasses for each shortcut, using <code>exec</code> to execute the code for that custom <code>Command</code> subclass, and then binding the keyboard shortcut to that new command class.</p>

<p>At the end we then delete all the variables we&rsquo;ve made so our REPL will start the clean global environment we normally expect it to have:</p>

<pre><code class="pycon">Python 3.13.0 (main, Oct  8 2024, 10:37:56) [GCC 11.4.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; dir()
['__annotations__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__']
</code></pre>

<p>Is this messy?</p>

<p>Yes.</p>

<p>Is that a needless use of a dictionary that could have been a list of 2-item tuples instead?</p>

<p>Yes.</p>

<p>Does this work?</p>

<p>Yes.</p>

<h2>Doing more interesting and risky stuff</h2>

<p>Note that there are many keyboard shortcuts that may cause weird behaviors if you bind them.</p>

<p>For example, if you bind <code>Ctrl-i</code>, your binding may trigger every time you try to indent.
And if you try to bind <code>Ctrl-m</code>, your binding may be ignored because this is equivalent to hitting the <code>Enter</code> key.</p>

<p>So be sure to test your REPL carefully after each new binding you try to invent.</p>

<p>If you want to do something more interesting, you could poke around in the <code>_pyrepl</code> package to see what existing code you can use/abuse.</p>

<p>For example, here&rsquo;s a very hacky way of making a binding to <code>Ctrl-x</code> followed by <code>Ctrl-r</code> to make this import <code>subprocess</code>, type in a <code>subprocess.run</code> line, and move your cursor between the empty string within the <code>run</code> call:</p>

<pre><code class="python">    class _cmds:
        class Run(Command):
            def do(self):
                from _pyrepl.commands import backward_kill_word, left
                backward_kill_word(self.reader, self.event_name, self.event).do()
                self.reader.insert("import subprocess\n")
                code = 'subprocess.run("", shell=True)'
                self.reader.insert(code)
                for _ in range(len(code) - code.index('""') - 1):
                    left(self.reader, self.event_name, self.event).do()
    reader.commands["subprocess_run"] = _cmds.Run
    reader.bind(r"\C-x\C-r", "subprocess_run")
</code></pre>

<h2>What keyboard shortcuts are available?</h2>

<p>As you play with customizing keyboard shortcuts, you&rsquo;ll likely notice that many key combinations result in strange and undesirable behavior when overridden.</p>

<p>For example, overriding <code>Ctrl-J</code> will also override the <code>Enter</code> key&hellip; at least it does in my terminal.</p>

<p>I&rsquo;ll list the key combinations that seem unproblematic on my setup with Gnome Terminal in Ubuntu Linux.</p>

<p>Here are <code>Control</code> key shortcuts that seem to be complete unused in the Python REPL:</p>

<ul>
<li><code>Ctrl-N</code></li>
<li><code>Ctrl-O</code></li>
<li><code>Ctrl-P</code></li>
<li><code>Ctrl-Q</code></li>
<li><code>Ctrl-S</code></li>
<li><code>Ctrl-V</code></li>
</ul>


<p>Note that overriding <code>Ctrl-H</code> is often an alternative to the backspace key</p>

<p>Here are <code>Alt</code>/<code>Meta</code> key shortcuts that appear unused on my machine:</p>

<ul>
<li><code>Alt-A</code></li>
<li><code>Alt-E</code></li>
<li><code>Alt-G</code></li>
<li><code>Alt-H</code></li>
<li><code>Alt-I</code></li>
<li><code>Alt-J</code></li>
<li><code>Alt-K</code></li>
<li><code>Alt-M</code></li>
<li><code>Alt-N</code></li>
<li><code>Alt-O</code></li>
<li><code>Alt-P</code></li>
<li><code>Alt-Q</code></li>
<li><code>Alt-S</code></li>
<li><code>Alt-V</code></li>
<li><code>Alt-W</code></li>
<li><code>Alt-X</code></li>
<li><code>Alt-Z</code></li>
</ul>


<p>You can add an <code>Alt</code> shortcut by using <code>\M</code> (for &ldquo;meta&rdquo;).
So <code>r"\M-a"</code> would capture <code>Alt-A</code> just as <code>r"\C-a"</code> would capture <code>Ctrl-A</code>.</p>

<p>Here are keyboard shortcuts that <em>can</em> be customized but you might want to consider whether the current default behavior is worth losing:</p>

<ul>
<li><code>Alt-B</code>: backward word (same as <code>Ctrl-Left</code>)</li>
<li><code>Alt-C</code>: capitalize word (does nothing on my machine&hellip;)</li>
<li><code>Alt-D</code>: kill word (delete to end of word)</li>
<li><code>Alt-F</code>: forward word (same as <code>Ctrl-Right</code>)</li>
<li><code>Alt-L</code>: downcase word (does nothing on my machine&hellip;)</li>
<li><code>Alt-U</code>: upcase word (does nothing on my machine&hellip;)</li>
<li><code>Alt-Y</code>: yank pop</li>
<li><code>Ctrl-A</code>: beginning of line (like the <code>Home</code> key)</li>
<li><code>Ctrl-B</code>: left (like the <code>Left</code> key)</li>
<li><code>Ctrl-E</code>: end of line (like the <code>End</code> key)</li>
<li><code>Ctrl-F</code>: right (like the <code>Right</code> key)</li>
<li><code>Ctrl-G</code>: cancel</li>
<li><code>Ctrl-H</code>: backspace (same as the <code>Backspace</code> key)</li>
<li><code>Ctrl-K</code>: kill line (delete to end of line)</li>
<li><code>Ctrl-T</code>: transpose characters</li>
<li><code>Ctrl-U</code>: line discard (delete to beginning of line)</li>
<li><code>Ctrl-W</code>: word discard (delete to beginning of word)</li>
<li><code>Ctrl-Y</code>: yank</li>
<li><code>Alt-R</code>: restore history (within history mode)</li>
</ul>


<h2>What fun have you found in <code>_pyrepl</code>?</h2>

<p>Find something fun while playing with the <code>_pyrepl</code> package&rsquo;s inner-workings?</p>

<p>I&rsquo;d love to hear about it!
Comment below to share what you found.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django and the Python 3.13 REPL]]></title>
    <link href="https://treyhunner.com/2024/10/django-and-the-new-python-3-dot-13-repl/"/>
    <updated>2024-10-13T21:03:32-07:00</updated>
    <id>https://treyhunner.com/2024/10/django-and-the-new-python-3-dot-13-repl</id>
    <content type="html"><![CDATA[<p>Your new Django project uses Python 3.13.</p>

<p>You&rsquo;re really looking forward to using the new REPL&hellip; but <code>python manage.py shell</code> just shows the same old Python REPL.
What gives?</p>

<p>Well, Django&rsquo;s management shell uses Python&rsquo;s <a href="https://docs.python.org/3/library/code.html">code</a> module to launch a custom REPL, but the <code>code</code> module doesn&rsquo;t (<a href="https://github.com/python/cpython/issues/119512">yet</a>) use the new Python REPL.</p>

<p>So you&rsquo;re out of luck&hellip; or are you?</p>

<h2>How stable do you need your <code>shell</code> command to be?</h2>

<p>The new Python REPL&rsquo;s code lives in a <a href="https://github.com/python/cpython/tree/v3.13.0/Lib/_pyrepl">_pyrepl</a> package.
Surely there must be some way to launch the new REPL using that <code>_pyrepl</code> package!</p>

<p>First, note the <code>_</code> before that package name.
It&rsquo;s <code>_pyrepl</code>, not <code>pyrepl</code>.</p>

<p>Any solution that relies on this module may break in future Python releases.</p>

<p>So&hellip; should we give up on looking for a solution, if we can&rsquo;t get a &ldquo;stable&rdquo; one?</p>

<p>I don&rsquo;t think so.</p>

<p>My <code>shell</code> command doesn&rsquo;t usually <em>need</em> to be stable in more than one version of Python at a time.
So I&rsquo;m fine with a solution that <em>attempts</em> to use the new REPL and then falls back to the old REPL if it fails.</p>

<h2>A working solution</h2>

<p>So, let&rsquo;s look at a working solution.</p>

<p>Stick <a href="https://pym.dev/p/2zqeq/">this code</a> in a <code>management/commands/shell.py</code> file within one of your Django apps:</p>

<pre><code class="python">"""Python 3.13 REPL support using the unsupported _pyrepl module."""
from django.core.management.commands.shell import Command as BaseShellCommand


class Command(BaseShellCommand):
    shells = ["ipython", "bpython", "pyrepl", "python"]

    def pyrepl(self, options):
        from _pyrepl.main import interactive_console
        interactive_console()
</code></pre>

<h2>How it works</h2>

<p>Django&rsquo;s <code>shell</code> command has made it very simple to add support for your favorite REPL of choice.</p>

<p><a href="https://github.com/django/django/blob/5.1.2/django/core/management/commands/shell.py">The code for the <code>shell</code> command</a> loops through the <code>shells</code> list and attempts to run a method with that name on its own class.
If an <code>ImportError</code> is raised then it attempts the next command, stopping once no exception occurs.</p>

<p>Our new command will try to use IPython and bpython if they&rsquo;re installed and then it will try the new Python 3.13 REPL followed by the old Python REPL.</p>

<p>If Python 3.14 breaks our import by moving the <code>interactive_console</code> function, then an <code>ImportError</code> will be raised, causing us to fall back to the old REPL after we upgrade to Python 3.14 one day.
If instead, the <code>interactive_console</code> function&rsquo;s usage changes (maybe it will require arguments) then our <code>shell</code> command will completely break and we&rsquo;ll need to manually fix it when we upgrade to Python 3.14.</p>

<h2>What&rsquo;s so great about the new REPL?</h2>

<p>If you&rsquo;re already using IPython or BPython as your REPL and you&rsquo;re enjoying them, I would stick with them.</p>

<p>Third-party libraries move faster than Python itself and they&rsquo;re often more feature-rich.
IPython has about 20 years worth of feature development and it has features that the built-in Python REPL will likely never have.</p>

<p>If you&rsquo;re using the default Python REPL though, this new REPL is a <em>huge</em> upgrade.
I&rsquo;ve been using it as my default REPL since May and I <em>love</em> it.
See <a href="https://pym.dev/python-313-whats-new/">my screencast on Python 3.13</a> for my favorite features in the new REPL.</p>

<p><strong>P.S. for Python Morsels users</strong>: if you want to try using that <code>code</code> module, check out the (fairly advanced) <a href="https://www.pythonmorsels.com/exercises/3efdd9e172a346d08679ec39419ed822/?level=advanced">replr</a> or (even more advanced) <a href="https://www.pythonmorsels.com/exercises/5800cdcbbc5b4936b3e253dc15050480/?level=advanced">replsync</a> exercises.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The new REPL in Python 3.13]]></title>
    <link href="https://treyhunner.com/2024/05/my-favorite-python-3-dot-13-feature/"/>
    <updated>2024-05-08T13:30:00-07:00</updated>
    <id>https://treyhunner.com/2024/05/my-favorite-python-3-dot-13-feature</id>
    <content type="html"><![CDATA[<p>Python 3.13 just hit feature freeze with <a href="https://www.python.org/downloads/release/python-3130b1/">the first beta release today</a>.</p>

<p>Just before the feature freeze, a shiny new feature was added: <strong>a brand new Python REPL</strong>. ‚ú®</p>

<p>This new Python REPL is the feature I&rsquo;m most looking forward to using while teaching after 3.13.0 final is released later this year.
In terms of improving my quality of life while teaching Python, this new REPL may be my favorite feature since f-strings were added in Python 3.6.</p>

<p>I&rsquo;d like to share what&rsquo;s so great about this new REPL and what additional improvements I&rsquo;m hoping we might see in future Python releases.</p>

<p>None of these features will be ground breaking for folks who are already using <a href="https://github.com/ipython/ipython">IPython</a> day-to-day.
This new REPL really shines when you can&rsquo;t or shouldn&rsquo;t install PyPI packages (as when teaching a brand new Pythonistas in a locked-down corporate environment).</p>

<h2>Little niceties</h2>

<p>The first thing you&rsquo;ll notice when you launch the new REPL is the colored prompt.</p>

<p><img src="/images/new-repl-intro.gif"></p>

<p>You may also notice that as you type a block of code, after the first indented line, the next line will be auto-indented!
Additionally, hitting the Tab key inserts 4 spaces now, which means there&rsquo;s no more need to ever hit <code>Space Space Space Space</code> to indent ever again.</p>

<p>At this point you might be thinking, &ldquo;wait did I accidentally launch ptpython or some other alternate REPL?&rdquo;
But it gets even better!</p>

<h2>You can &ldquo;exit&rdquo; now</h2>

<p>Have you ever typed <code>exit</code> at the Python REPL?
If so, you&rsquo;ve seen a message like this:</p>

<pre><code class="pycon">&gt;&gt;&gt; exit
Use exit() or Ctrl-D (i.e. EOF) to exit
</code></pre>

<p>That feels a bit silly, doesn&rsquo;t it?
Well, typing <code>exit</code> will exit immediately.</p>

<p><img src="/images/new-repl-exit.gif"></p>

<p>Typing <code>help</code> also enters help mode now (previously you needed to call <code>help()</code> as a function).</p>

<h2>Block-level history</h2>

<p>The feature that will make the biggest different in my own usage of the Python REPL is block-level history.</p>

<p><img src="/images/new-repl-block.gif"></p>

<p>I make typos all the time while teaching.
I also often want to re-run a specific block of code with a couple small changes.</p>

<p>The old-style Python REPL stores history line-by-line.
So editing a block of code in the old REPL required hitting the up arrow many times, hitting Enter, hitting the up arrow many more times, hitting Enter, etc. until each line in a block was chosen.
At the same time you also needed to make sure to edit your changes along the way&hellip; or you&rsquo;ll end up re-running the same block with the same typo as before!</p>

<p>The ability to edit a previously typed <em>block</em> of code is huge for me.
For certain sections of my Python curriculum, I hop into <a href="https://github.com/prompt-toolkit/ptpython">ptpython</a> or <a href="https://github.com/ipython/ipython">IPython</a> specifically for this feature.
Now I&rsquo;ll be able to use the default Python REPL instead.</p>

<h2>Pasting code <em>just works</em></h2>

<p>The next big feature for me is the ability to paste code.</p>

<p>Check this out:</p>

<p><img src="/images/new-repl-paste.gif"></p>

<p>Not impressed?
Well, watch what happens when we paste that same block of code into the old Python REPL:</p>

<p><img src="/images/old-repl-paste.gif"></p>

<p>The old REPL treated pasted text the same as manually typed text.
When two consecutive newlines were encountered in the old REPL, it would end the current block of code because it assumed the Enter key had been pressed twice.</p>

<p>The new REPL supports <a href="https://en.wikipedia.org/wiki/Bracketed-paste">bracketed paste</a>, which is was invented in 2002 and has since been adopted by all modern terminal emulators.</p>

<h2>No Windows support? Curses!</h2>

<p><strong>EDIT</strong>: This whole section is now irrelevant!
During the PyCon US sprints in late May 2024, the <code>readline</code> and <code>curses</code> dependencies were removed and <a href="https://mastodon.social/@tonybaloney@fosstodon.org/112477098540793635">Windows support</a> will be included in the second beta release of Python 3.13.0! üéâ</p>

<p>Unfortunately, this new REPL <strike>doesn&rsquo;t currently work on Windows</strike>.
This new REPL relies on the <code>curses</code> and <code>readline</code> modules, neither of which are available on Windows.</p>

<p>The <a href="https://pym.dev/repl">in-browser Python REPL</a> on Python Morsels also won&rsquo;t be able to use the new REPL because readline and curses aren&rsquo;t available in the WebAssembly Python build.</p>

<h2>Beta test Python 3.13 to try out the new REPL üíñ</h2>

<p>Huge thanks to Pablo Galindo Salgado, ≈Åukasz Langa, and Lysandros Nikolaou <a href="https://docs.python.org/3.13/whatsnew/3.13.html">for implementing this new feature</a>!
And thanks to Michael Hudson-Doyle and Armin Rigo for implementing the original version of this REPL, which was <a href="https://github.com/pypy/pyrepl">heavily borrowed from PyPy&rsquo;s pyrepl project</a>.</p>

<p>The new Python REPL coming in 3.13 is a major improvement over the old REPL.</p>

<p>Want to try out this new REPL?
Download and install <a href="https://www.python.org/downloads/release/python-3130b1/">Python 3.13.0 beta 1</a>!</p>

<p>Beta testing new Python releases helps the Python core team ensure the final release of 3.13.0 is as stable and functional as possible.
If you notice a bug, <a href="https://github.com/python/cpython/issues">check the issue tracker</a> to see if it&rsquo;s been reported yet and if not report it!</p>
]]></content>
  </entry>
  
</feed>
