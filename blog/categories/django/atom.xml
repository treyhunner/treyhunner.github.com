<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: django | Trey Hunner]]></title>
  <link href="https://treyhunner.com/blog/categories/django/atom.xml" rel="self"/>
  <link href="https://treyhunner.com/"/>
  <updated>2025-04-18T07:42:55-07:00</updated>
  <id>https://treyhunner.com/</id>
  <author>
    <name><![CDATA[Trey Hunner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Django components: sometimes an include doesn't cut it]]></title>
    <link href="https://treyhunner.com/2025/03/django-components-sometimes-an-include-doesnt-cut-it/"/>
    <updated>2025-03-15T21:00:00-07:00</updated>
    <id>https://treyhunner.com/2025/03/django-components-sometimes-an-include-doesnt-cut-it</id>
    <content type="html"><![CDATA[<p>Have you ever wished that Django&rsquo;s <code>include</code> template tag could accept blocks of content?</p>

<p>I have.</p>

<p>Unfortunately, Django&rsquo;s <code>{% include %}</code> tag doesn&rsquo;t accept blocks of text.</p>

<p>Let&rsquo;s look at a few possible solutions to this problem.</p>

<h2>The Problem: Hack Include Workarounds</h2>

<p>Let&rsquo;s say we have HTML and CSS that make up a modal that is powered by Alpine.js and HTMX and we want to include this base modal template into many different templates for many different actions.</p>

<p>The problem is that the main content of our modal changes for different use cases.</p>

<p>We could try to fix this problem by breaking up our &ldquo;include&rdquo; into two parts (a top and a bottom).</p>

<p>Here&rsquo;s the top include (<code>_modal_top.html</code>):</p>

<pre><code>&lt;div
  x-data="{}"
  id="base-modal"
  ="$dispatch('close-modal')"
  x-on:keydown.escape.prevent.stop="$dispatch('close-modal')"
  x-on:close-modal.stop="$el.remove()"
  role="dialog"
  aria-modal="true"
  x-id="['modal-title']"
  :aria-labelledby="$id('modal-title')"
  class="tw-fixed tw-inset-0 tw-z-10 tw-overflow-y-auto"
  style="z-index: 2000;"
&gt;
  &lt;!-- Overlay --&gt;
  &lt;div x-transition.opacity class="tw-fixed tw-inset-0 tw-bg-black tw-bg-opacity-50"&gt;&lt;/div&gt;

  &lt;!-- Panel --&gt;
  &lt;form
    id="modal-panel"
    hx-=""
    hx-select="#modal-panel"
    hx-swap="outerHTML"
    x-transition
    x-on:click="$dispatch('close-modal')"
    class="tw-relative tw-flex tw-min-h-screen tw-items-center tw-justify-center tw-p-4"
  &gt;
    &lt;div
        x-on:click.stop
        x-trap.noscroll.inert="true"
        class="tw-relative tw-w-full tw-max-w-lg tw-overflow-y-auto tw-rounded-xl tw-bg-white tw-p-6 tw-shadow-lg"
    &gt;
      &lt;!-- Title --&gt;
      &lt;h5 h:id="$id('modal-title')"&gt;&lt;/h5&gt;
</code></pre>

<p>And here&rsquo;s the bottom include (<code>_modal_bottom.html</code>):</p>

<pre><code>    &lt;/div&gt;
  &lt;/form&gt;
&lt;/div&gt;
</code></pre>

<p>This is how we might use these modals:</p>

<pre><code>{% url "api:delete" object.pk as delete_url %}
{% include "_modal_top.html" title="Delete Object" close_event="@solution-deleted.window" htmx_method="delete" htmx_action=delete_url %}

&lt;div class="tw-mt-7 tw-text-gray-600"&gt;
  &lt;p&gt;Are you sure you want to delete &lt;strong&gt;{{ object }}&lt;/strong&gt;?&lt;/p&gt;
&lt;/div&gt;

&lt;div class="tw-mt-9 tw-flex tw-justify-end tw-space-x-2"&gt;
  &lt;button class="btn btn-danger" type="submit"&gt;Delete&lt;/button&gt;
  &lt;button class="btn btn-secondary" type="reset" x-on:click.prevent="$dispatch('close-modal')" data-dismiss="modal"&gt;Cancel&lt;/button&gt;
&lt;/div&gt;

{% include "_modal_bottom.html" %}

</code></pre>

<p>This is pretty awful.</p>

<p>What other solutions are there?</p>

<h2>One Solution: Just Copy-Paste</h2>

<p>Instead of messy with includes, we could just copy-paste the HTML we need every time we need it:</p>

<pre><code>&lt;div
  x-data="{}"
  id="base-modal"
  @solution-deleted.window="$dispatch('close-modal')"
  x-on:keydown.escape.prevent.stop="$dispatch('close-modal')"
  x-on:close-modal.stop="$el.remove()"
  role="dialog"
  aria-modal="true"
  x-id="['modal-title']"
  :aria-labelledby="$id('modal-title')"
  class="tw-fixed tw-inset-0 tw-z-10 tw-overflow-y-auto"
  style="z-index: 2000;"
&gt;
  &lt;!-- Overlay --&gt;
  &lt;div x-transition.opacity class="tw-fixed tw-inset-0 tw-bg-black tw-bg-opacity-50"&gt;&lt;/div&gt;

  &lt;!-- Panel --&gt;
  &lt;form
    id="modal-panel"
    hx-delete="{% url "api:delete" object.pk %}"
    hx-select="#modal-panel"
    hx-swap="outerHTML"
    x-transition
    x-on:click="$dispatch('close-modal')"
    class="tw-relative tw-flex tw-min-h-screen tw-items-center tw-justify-center tw-p-4"
  &gt;
    &lt;div
        x-on:click.stop
        x-trap.noscroll.inert="true"
        class="tw-relative tw-w-full tw-max-w-lg tw-overflow-y-auto tw-rounded-xl tw-bg-white tw-p-6 tw-shadow-lg"
    &gt;
      &lt;!-- Title --&gt;
      &lt;h5 h:id="$id('modal-title')"&gt;Delete Object&lt;/h5&gt;

      &lt;!-- Content --&gt;
      &lt;div class="tw-mt-7 tw-text-gray-600"&gt;
        &lt;p&gt;Are you sure you want to delete &lt;strong&gt;{{ object }}&lt;/strong&gt;?&lt;/p&gt;
      &lt;/div&gt;

      &lt;!-- Buttons --&gt;
      &lt;div class="tw-mt-9 tw-flex tw-justify-end tw-space-x-2"&gt;
        &lt;button class="btn btn-danger" type="submit"&gt;Delete&lt;/button&gt;
        &lt;button class="btn btn-secondary" type="reset" x-on:click.prevent="$dispatch('close-modal')" data-dismiss="modal"&gt;Cancel&lt;/button&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/form&gt;
&lt;/div&gt;
</code></pre>

<p>Honestly, I think this solution isn&rsquo;t a bad one.
Yes it is repetitive, but it&rsquo;s <em>so</em> much easier to understand and maintain this big block of fairly straightforward HTML.</p>

<p>The biggest downside to this approach is that enhancements made to one of the styling and features of these various copy-pasted modals will likely diverge over time if we&rsquo;re not careful to update all of them whenever we update one of them.</p>

<h2>A Better Solution: Components</h2>

<p>If I was using a component-based front-end web framework, I might be tempted to push all this logic into that front-end framework.
But I&rsquo;m not using a component-based front-end front-end web framework <em>and</em> I don&rsquo;t want to be forced to push any component-ish logic into the front-end.</p>

<p>Fortunately, in 2025, Django has <a href="https://djangopackages.org/grids/g/components/">a number of component frameworks</a>.</p>

<p>If we setup <a href="https://django-cotton.com">django-cotton</a>, we could make a <code>cotton/modal.html</code> file like this:</p>

<pre><code>&lt;div
  x-data="{}"
  id="base-modal"
  {{ close_event }}="$dispatch('close-modal')"
  x-on:keydown.escape.prevent.stop="$dispatch('close-modal')"
  x-on:close-modal.stop="$el.remove()"
  role="dialog"
  aria-modal="true"
  x-id="['modal-title']"
  :aria-labelledby="$id('modal-title')"
  class="tw-fixed tw-inset-0 tw-z-10 tw-overflow-y-auto"
  style="z-index: 2000;"
&gt;
  &lt;!-- Overlay --&gt;
  &lt;div x-transition.opacity class="tw-fixed tw-inset-0 tw-bg-black tw-bg-opacity-50"&gt;&lt;/div&gt;

  &lt;!-- Panel --&gt;
  &lt;form
    id="modal-panel"
    hx-{{ htmx_method }}="{{ htmx_action }}"
    hx-select="#modal-panel"
    hx-swap="outerHTML"
    x-transition
    x-on:click="$dispatch('close-modal')"
    class="tw-relative tw-flex tw-min-h-screen tw-items-center tw-justify-center tw-p-4"
  &gt;
    &lt;div
        x-on:click.stop
        x-trap.noscroll.inert="true"
        class="tw-relative tw-w-full tw-max-w-lg tw-overflow-y-auto tw-rounded-xl tw-bg-white tw-p-6 tw-shadow-lg"
    &gt;
      &lt;!-- Title --&gt;
      &lt;h5 h:id="$id('modal-title')"&gt;{{ title }}&lt;/h5&gt;

      &lt;!-- Content --&gt;
      &lt;div class="tw-mt-7 tw-text-gray-600"&gt;
        {{ slot }}
      &lt;/div&gt;

      &lt;!-- Buttons --&gt;
      &lt;div class="tw-mt-9 tw-flex tw-justify-end tw-space-x-2"&gt;
        {{ buttons }}
      &lt;/div&gt;

    &lt;/div&gt;
  &lt;/form&gt;
&lt;/div&gt;
</code></pre>

<p>We can then use our modal component like this:</p>

<pre><code>&lt;c-modal
  title="Delete Object"
  close_event="@solution-deleted.window"
  htmx_method="delete"
  htmx_action={% url "api:delete" object.pk %}
&gt;
  &lt;div class="tw-mt-7 tw-text-gray-600"&gt;
    &lt;p&gt;Are you sure you want to delete &lt;strong&gt;{{ object }}&lt;/strong&gt;?&lt;/p&gt;
  &lt;/div&gt;

  &lt;c-slot name="buttons"&gt;
    &lt;button class="btn btn-danger" type="submit"&gt;Delete&lt;/button&gt;
    &lt;button class="btn btn-secondary" type="reset" x-on:click.prevent="$dispatch('close-modal')" data-dismiss="modal"&gt;Cancel&lt;/button&gt;
  &lt;/c-slot&gt;
&lt;/c-modal&gt;
</code></pre>

<p>I find this a <em>lot</em> easier to read than the <code>include</code> approach and a lot easier to maintain than the copy-pasted approach.</p>

<h2>The Downsides: Too Much Magic</h2>

<p>The biggest downside I see to <a href="https://django-cotton.com">django-cotton</a> is that it&rsquo;s a bit magical.</p>

<p>If you see <code>&lt;c-some-name&gt;</code> in a template, you need to know that this includes things from <code>cotton/some_name.html</code>.</p>

<p>There are lots of <a href="https://en.wikipedia.org/wiki/Action_at_a_distance">action at a distance</a> issues that come up with Django, which can make it feel a bit magical but which are nonetheless worthwhile tradeoffs.
But this one also doesn&rsquo;t look like a Django template tag, filter, or variable.
That feels <em>very</em> magical to me.</p>

<p>I&rsquo;ve been enjoying trying out django-cotton over the past week and enjoying it.</p>

<p>Here are 2 other Django component libraries I have considered trying:</p>

<ul>
<li><a href="https://github.com/joshuadavidthomas/django-bird">django-bird</a></li>
<li><a href="https://github.com/mixxorz/slippers">slippers</a></li>
<li><a href="https://github.com/SmileyChris/django-includecontents">django-includecontents</a></li>
</ul>


<p>I doubt I will try these 3, as they require writing Python code for each new component, which I would rather avoid:</p>

<ul>
<li><a href="https://github.com/django-components/django-components">django-components</a></li>
<li><a href="https://github.com/Xzya/django-web-components">django-web-components</a></li>
<li><a href="https://github.com/rails-inspire-django/django-viewcomponent">django-viewcomponent</a></li>
</ul>


<p>All Django component libraries (except for django-cotton) disallow line breaks between passed-in attributes due to a limitation of Django&rsquo;s template tags (see below).</p>

<h2>The Future: Multi-line Django Template Tags?</h2>

<p>If Django&rsquo;s template tags could be wrapped over multiple lines, we could create a library that worked like this:</p>

<pre><code>{% url "api:delete" object.pk as delete_url %}
{% component "_modal.html"
  title="Delete Object"
  close_event="@solution-deleted.window"
  htmx_method="delete"
  htmx_action=delete_ul
%}
  &lt;div class="tw-mt-7 tw-text-gray-600"&gt;
    &lt;p&gt;Are you sure you want to delete &lt;strong&gt;{{ object }}&lt;/strong&gt;?&lt;/p&gt;
  &lt;/div&gt;

  {% slot "buttons" %}
    &lt;button class="btn btn-danger" type="submit"&gt;Delete&lt;/button&gt;
    &lt;button class="btn btn-secondary" type="reset" x-on:click.prevent="$dispatch('close-modal')" data-dismiss="modal"&gt;Cancel&lt;/button&gt;
  {% endslot %}
{% endcomponent %}
</code></pre>

<p>But that first multi-line <code>{% component %}</code> tag is a big problem.
This is invalid in Django&rsquo;s template language because tags cannot have linebreaks within them (see <a href="https://code.djangoproject.com/ticket/8652">this old ticket</a>, <a href="https://forum.djangoproject.com/t/allow-newlines-inside-tags/36040">this discussion</a>, and <a href="https://code.djangoproject.com/ticket/35899">this new ticket</a>):</p>

<pre><code>{% component "_modal.html"
  title="Delete Object"
  close_event="@solution-deleted.window"
  htmx_method="delete"
  htmx_action=delete_ul
%}
</code></pre>

<p>Until Django&rsquo;s template language allows tags to span over multiple lines, we&rsquo;re stuck with hacks like the ones that django-cotton uses.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Django and the Python 3.13 REPL]]></title>
    <link href="https://treyhunner.com/2024/10/django-and-the-new-python-3-dot-13-repl/"/>
    <updated>2024-10-13T21:03:32-07:00</updated>
    <id>https://treyhunner.com/2024/10/django-and-the-new-python-3-dot-13-repl</id>
    <content type="html"><![CDATA[<p>Your new Django project uses Python 3.13.</p>

<p>You&rsquo;re really looking forward to using the new REPL&hellip; but <code>python manage.py shell</code> just shows the same old Python REPL.
What gives?</p>

<p>Well, Django&rsquo;s management shell uses Python&rsquo;s <a href="https://docs.python.org/3/library/code.html">code</a> module to launch a custom REPL, but the <code>code</code> module doesn&rsquo;t (<a href="https://github.com/python/cpython/issues/119512">yet</a>) use the new Python REPL.</p>

<p>So you&rsquo;re out of luck&hellip; or are you?</p>

<h2>How stable do you need your <code>shell</code> command to be?</h2>

<p>The new Python REPL&rsquo;s code lives in a <a href="https://github.com/python/cpython/tree/v3.13.0/Lib/_pyrepl">_pyrepl</a> package.
Surely there must be some way to launch the new REPL using that <code>_pyrepl</code> package!</p>

<p>First, note the <code>_</code> before that package name.
It&rsquo;s <code>_pyrepl</code>, not <code>pyrepl</code>.</p>

<p>Any solution that relies on this module may break in future Python releases.</p>

<p>So&hellip; should we give up on looking for a solution, if we can&rsquo;t get a &ldquo;stable&rdquo; one?</p>

<p>I don&rsquo;t think so.</p>

<p>My <code>shell</code> command doesn&rsquo;t usually <em>need</em> to be stable in more than one version of Python at a time.
So I&rsquo;m fine with a solution that <em>attempts</em> to use the new REPL and then falls back to the old REPL if it fails.</p>

<h2>A working solution</h2>

<p>So, let&rsquo;s look at a working solution.</p>

<p>Stick <a href="https://pym.dev/p/2zqeq/">this code</a> in a <code>management/commands/shell.py</code> file within one of your Django apps:</p>

<pre><code class="python">"""Python 3.13 REPL support using the unsupported _pyrepl module."""
from django.core.management.commands.shell import Command as BaseShellCommand


class Command(BaseShellCommand):
    shells = ["ipython", "bpython", "pyrepl", "python"]

    def pyrepl(self, options):
        from _pyrepl.main import interactive_console
        interactive_console()
</code></pre>

<h2>How it works</h2>

<p>Django&rsquo;s <code>shell</code> command has made it very simple to add support for your favorite REPL of choice.</p>

<p><a href="https://github.com/django/django/blob/5.1.2/django/core/management/commands/shell.py">The code for the <code>shell</code> command</a> loops through the <code>shells</code> list and attempts to run a method with that name on its own class.
If an <code>ImportError</code> is raised then it attempts the next command, stopping once no exception occurs.</p>

<p>Our new command will try to use IPython and bpython if they&rsquo;re installed and then it will try the new Python 3.13 REPL followed by the old Python REPL.</p>

<p>If Python 3.14 breaks our import by moving the <code>interactive_console</code> function, then an <code>ImportError</code> will be raised, causing us to fall back to the old REPL after we upgrade to Python 3.14 one day.
If instead, the <code>interactive_console</code> function&rsquo;s usage changes (maybe it will require arguments) then our <code>shell</code> command will completely break and we&rsquo;ll need to manually fix it when we upgrade to Python 3.14.</p>

<h2>What&rsquo;s so great about the new REPL?</h2>

<p>If you&rsquo;re already using IPython or BPython as your REPL and you&rsquo;re enjoying them, I would stick with them.</p>

<p>Third-party libraries move faster than Python itself and they&rsquo;re often more feature-rich.
IPython has about 20 years worth of feature development and it has features that the built-in Python REPL will likely never have.</p>

<p>If you&rsquo;re using the default Python REPL though, this new REPL is a <em>huge</em> upgrade.
I&rsquo;ve been using it as my default REPL since May and I <em>love</em> it.
See <a href="https://pym.dev/python-313-whats-new/">my screencast on Python 3.13</a> for my favorite features in the new REPL.</p>

<p><strong>P.S. for Python Morsels users</strong>: if you want to try using that <code>code</code> module, check out the (fairly advanced) <a href="https://www.pythonmorsels.com/exercises/3efdd9e172a346d08679ec39419ed822/?level=advanced">replr</a> or (even more advanced) <a href="https://www.pythonmorsels.com/exercises/5800cdcbbc5b4936b3e253dc15050480/?level=advanced">replsync</a> exercises.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS classes and Django form fields]]></title>
    <link href="https://treyhunner.com/2014/09/adding-css-classes-to-django-form-fields/"/>
    <updated>2014-09-30T11:00:00-07:00</updated>
    <id>https://treyhunner.com/2014/09/adding-css-classes-to-django-form-fields</id>
    <content type="html"><![CDATA[<p>Django forms provide input validation and HTML form field generation.  They also integrate nicely with models.  However, Django itself does not allow one-off customizations of form-generated HTML.</p>

<p>In this post I will discuss a method for customizing the HTML generated by Django form fields, with the specific goal of adding custom CSS classes to Django form fields.</p>

<p>Here&rsquo;s a Django form definition:</p>

<pre><code class="python">from django import forms

class AuthenticationForm(forms.Form):
    username = forms.CharField(max_length=254)
    password = forms.CharField(widget=forms.PasswordInput)
</code></pre>

<p>Here&rsquo;s the form used in a template:</p>

<p>
    {{ form.as_p }}
</p>

<h2>The Problem</h2>

<p>We&rsquo;re using <a href="http://getbootstrap.com/">Bootstrap</a> and we want to add an <code>input-lg</code> CSS class onto our username field to make it really big.</p>

<h2>The Solution(s)</h2>

<p>There are many ways to solve this problem.  I will discuss some solutions I dislike before I discuss my preferred solution.</p>

<h3>Using a form widget attribute</h3>

<p>We could add a <code>class</code> attribute to our Django form field:</p>

<pre><code class="python">from django import forms

class AuthenticationForm(forms.Form):
    username = forms.CharField(
        max_length=254,
        widget=forms.TextInput(attrs={'class': "input-lg"}),
    )
    password = forms.CharField(widget=forms.PasswordInput)
</code></pre>

<p>I dislike this approach because it requires including presentation rules in our back-end code.  This class attribute is used exclusively by our CSS and/or JavaScript and should therefore live in Django templates, not in Python code.</p>

<h3>Using django-floppyforms</h3>

<p>If we&rsquo;re using <a href="https://django-floppyforms.readthedocs.org/">django-floppyforms</a> we could include logic in our <code>floppyforms/attrs.html</code> template to add specific classes based on a context variable (<a href="https://github.com/grundleborg/django-floppyforms-bootstrap3/blob/9ab0261eb8ae0c939e4ad01066716e445357cb95/floppyforms_bootstrap3/templates/floppyforms/attrs.html">example</a>).  Here&rsquo;s an example:</p>

<p>
    {% for name, value in attrs.items %} {{ name }}{% if value != True %}=&ldquo;{{ value }}{% if name == "class&rdquo; %} {{ extra_classes }}{% endif %}&ldquo;{% endfor %}
</p>

<p>This should work but it&rsquo;s ugly and in general I do not enjoy maintaining heavy logic in my templates.</p>

<p><aside>Aside: there is currently an <a href="https://github.com/gregmuellegger/django-floppyforms/issues/99">open issue</a> on django-floppyforms discussing how this could be added as a feature to the library.</aside></p>

<h3>Using django-widget-tweaks</h3>

<p>I prefer to solve this problem with <a href="https://pypi.python.org/pypi/django-widget-tweaks">django-widget-tweaks</a>.</p>

<p>The django-widget-tweaks library provides two solutions to this problem:</p>

<ol>
<li><code>add_class</code> template filter</li>
<li><code>render_field</code> template tag.</li>
</ol>


<h4>The add_class template filter</h4>

<p><a href="http://kmike.ru/pages/about/">Mikhail Korobov</a> originally created the <a href="https://pypi.python.org/pypi/django-widget-tweaks">django-widget-tweaks</a> library in 2011.  It started as a series of template filters for modifying form field attributes from your Django templates.</p>

<p>Here&rsquo;s an example usage of the <code>add_class</code> filter for adding a CSS class to our form field:</p>

<p>
    {% load widget_tweaks %}
    <p>
        {{ form.username|add_class:&ldquo;input-lg&rdquo; }}
        {{ form.username.errors }}
    </p>
    <p>
        {{ form.password }}
        {{ form.password.errors }}
    </p>
</p>

<p>I find this solution both easy to read and easy to maintain.</p>

<h4>The render_field template tag</h4>

<p>I discovered <a href="https://pypi.python.org/pypi/django-widget-tweaks">django-widget-tweaks</a> shortly after <a href="http://kmike.ru/pages/about/">Mikhail</a> created it.  I appreciated his solution for this problem, but I wanted a more HTML-like syntax for my form field customizations.  I created the <code>render_field</code> template tag to satisfy that desire.</p>

<p>With the <code>render_field</code> tag you can add attributes to form fields with a much more HTML-like syntax:</p>

<p>
    {% load widget_tweaks %}
    <p>
        {% render_field form.username class+=&ldquo;input-lg&rdquo; %}
        {{ form.username.errors }}
    </p>
    <p>
        {% render_field form.password %}
        {{ form.password.errors }}
    </p>
</p>

<p>As a bonus, with <code>render_field</code> we can also set a CSS class for erroneous and required form fields.  See <a href="https://pypi.python.org/pypi/django-widget-tweaks#render-field">the documentation</a> for more details.</p>

<h2>Conclusion</h2>

<p>I have not had a chance to use <a href="https://django-floppyforms.readthedocs.org/">django-floppyforms</a> yet, but I expect that <a href="https://pypi.python.org/pypi/django-widget-tweaks">django-widget-tweaks</a> and django-floppyforms would integrate well together.</p>

<p>I am on the lookout for new solutions to this problem, but django-widget-tweaks has served me well so far.  I have used it for three years now it remains one of my go-to libraries for new Django projects.</p>

<p>How do you add CSS classes do your Django form fields?  If you have another solution please leave a comment below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Supporting both Django 1.7 and South]]></title>
    <link href="https://treyhunner.com/2014/03/migrating-to-django-1-dot-7/"/>
    <updated>2014-03-27T13:05:00-07:00</updated>
    <id>https://treyhunner.com/2014/03/migrating-to-django-1-dot-7</id>
    <content type="html"><![CDATA[<p>Have an open source Django app with South migrations?  Adding support for Django 1.7 might be a little painful.  In this post I will discuss the difficulty of supporting Django 1.7 while maintaining South migrations for users of Django 1.6 and below.</p>

<p>Django 1.7 uses the <code>migrations</code> sub-package in your app for database migrations and South relies on the same package.  Unfortunately, you can&rsquo;t store both packages in the same place.  At first glance, it seems we cannot support both Django 1.7 and previous versions of Django using South.  However, as I explain below, we can support both at once.</p>

<h2>Assessing your options</h2>

<p>In order to support both Django 1.7 and Django 1.6 with South we can rename the <code>migrations</code> package and instruct users to reference the new package in their settings module.  We can do this with the <a href="https://docs.djangoproject.com/en/1.7/ref/settings/#std:setting-MIGRATION_MODULES">MIGRATION_MODULES</a> or <a href="http://south.readthedocs.org/en/latest/settings.html#south-migration-modules">SOUTH_MIGRATION_MODULES</a> settings.  There are three options:</p>

<ol>
<li>Move existing <code>migrations</code> directory to <code>south_migrations</code> and create Django 1.7 migrations in <code>migrations</code> package</li>
<li>Create new Django 1.7 migrations package in <code>django_migrations</code> directory and leave existing South migrations package</li>
<li>Move existing <code>migrations</code> directory to <code>south_migrations</code> and create Django 1.7 migrations in <code>django_migrations</code> directory</li>
</ol>


<p>The first option requires existing users either switch to Django 1.7 or update their settings module before upgrading to the new version of your app.  The second option requires all Django 1.7 users to customize their settings module to properly install your app.  The third option requires everyone (both Django 1.7 and South users) to update their settings module.</p>

<p>Out of those options I prefer the first one.  When you eventually drop support for South, you will probably want your Django 1.7 migrations to live in the <code>migrations</code> directory.  If you don&rsquo;t force that switch now, you would eventually need to break backwards-compatibility or maintain two duplicate migrations directories.</p>

<p>So our plan is to move the South migrations to <code>south_migrations</code> and create Django 1.7 migrations.  An example with the <a href="https://github.com/treyhunner/django-email-log">django-email-log</a> app:</p>

<pre><code class="bash">$ git mv email_log/migrations email_log/south_migrations
$ python manage.py makemigrations email_log
$ git add email_log/migrations
</code></pre>

<h2>Breaking South support</h2>

<p>If you move <code>migrations</code> to <code>south_migrations</code> and make a Django 1.7 <code>migrations</code> package, what happens to existing users with South?</p>

<p>Your new app upgrade will break backwards compatibility for South users and you want to make sure they <em>know</em> they need to make a change immediately after upgrading.  Users should see a loud and clear error message instructing them what they need to do.  This can be done by hijacking their use of the <strong>migrate</strong> command with South.</p>

<p>Existing users will run <strong>migrate</strong> when upgrading your app.  If they don&rsquo;t migrate immediately, they will when they notice a problem and realize they need to run <strong>migrate</strong>.  Upon migrating, we want to show a clear error message telling the user what to do.</p>

<h2>Failing loudly and with a clear error message</h2>

<p>When South looks for app migrations it will import our <code>migrations</code> package.  Our <code>migrations</code> package contains Django 1.7 migrations, which South won&rsquo;t understand.  So we want to make sure that if our <code>migrations</code> package is imported either Django 1.7 is installed or a proper error message is displayed.  Upon importing this package, we can check for the presence of the new <code>django.db.migrations</code> module and if not found we will raise an exception with a descriptive error message.</p>

<p>For example, this is the code I plan to add to the <code>email_log/migrations/__init__.py</code> file for <a href="https://github.com/treyhunner/django-email-log">django-email-log</a> to add Django 1.7 support:</p>

<pre><code class="python">"""
Django migrations for email_log app

This package does not contain South migrations.  South migrations can be found
in the ``south_migrations`` package.
"""

SOUTH_ERROR_MESSAGE = """\n
For South support, customize the SOUTH_MIGRATION_MODULES setting like so:

    SOUTH_MIGRATION_MODULES = {
        'email_log': 'email_log.south_migrations',
    }
"""

# Ensure the user is not using Django 1.6 or below with South
try:
    from django.db import migrations  # noqa
except ImportError:
    from django.core.exceptions import ImproperlyConfigured
    raise ImproperlyConfigured(SOUTH_ERROR_MESSAGE)
</code></pre>

<p>Now when we run <strong>migrate</strong> with Django 1.6 and South, we&rsquo;ll see the following exception raised:</p>

<pre><code>django.core.exceptions.ImproperlyConfigured:

For South support, customize the SOUTH_MIGRATION_MODULES setting like so:

    SOUTH_MIGRATION_MODULES = {
        'email_log': 'email_log.south_migrations',
    }
</code></pre>

<h2>Conclusion</h2>

<p>This breaks backwards compatibility, but our users should immediately understand what has broken and how to fix it.  Remember to upgrade the major number of your package version to note this backwards-incompatible change.</p>

<p>I would love to hear your thoughts about this approach in the comments below.  Let me know if you have other ideas about how to handle supporting Django 1.7 migrations and South at the same time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TDD with Django Tutorial]]></title>
    <link href="https://treyhunner.com/2013/11/tdd-with-django-workshop/"/>
    <updated>2013-11-04T00:00:00-08:00</updated>
    <id>https://treyhunner.com/2013/11/tdd-with-django-workshop</id>
    <content type="html"><![CDATA[<p>I helped host a free Test-Driven Django Web Development workshop on <time date="2013-11-02">Saturday November 2</time> with <a href="http://pythonsd.org/">San Diego Python</a>.  We created a series of tutorials demonstrating how to create a Django-powered blog while practicing test-driven development.  The <a href="http://python.org/psf/">Python Software Foundation</a> sponsored the event and the <a href="http://aicenterca.com/">Ansir Innovation Center</a> provided a venue.</p>

<p>You can find the tutorials at <a href="http://bit.ly/pysd-tdd">http://bit.ly/pysd-tdd</a> .  The tutorials are provided under a <a href="https://creativecommons.org/licenses/by-sa/3.0/">CC BY-SA license</a> so you can reuse and modify them for your own purposes.</p>

<p>Tutorial markdown files and working source code may be found on <a href="https://github.com/pythonsd/test-driven-django-development">Github</a>.  We plan to improve and extend these tutorials for a future workshop.  If you have ideas for improvements/additions or if you notice a bug, please submit an issue or open a pull request.</p>
]]></content>
  </entry>
  
</feed>
