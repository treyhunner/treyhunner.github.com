<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: django | Trey Hunner]]></title>
  <link href="https://treyhunner.com/blog/categories/django/atom.xml" rel="self"/>
  <link href="https://treyhunner.com/"/>
  <updated>2020-11-28T12:15:00-08:00</updated>
  <id>https://treyhunner.com/</id>
  <author>
    <name><![CDATA[Trey Hunner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CSS classes and Django form fields]]></title>
    <link href="https://treyhunner.com/2014/09/adding-css-classes-to-django-form-fields/"/>
    <updated>2014-09-30T11:00:00-07:00</updated>
    <id>https://treyhunner.com/2014/09/adding-css-classes-to-django-form-fields</id>
    <content type="html"><![CDATA[<p>Django forms provide input validation and HTML form field generation.  They also integrate nicely with models.  However, Django itself does not allow one-off customizations of form-generated HTML.</p>

<p>In this post I will discuss a method for customizing the HTML generated by Django form fields, with the specific goal of adding custom CSS classes to Django form fields.</p>

<p>Here&rsquo;s a Django form definition:</p>

<pre><code class="python">from django import forms

class AuthenticationForm(forms.Form):
    username = forms.CharField(max_length=254)
    password = forms.CharField(widget=forms.PasswordInput)
</code></pre>

<p>Here&rsquo;s the form used in a template:</p>

<p>
    {{ form.as_p }}
</p>

<h2>The Problem</h2>

<p>We&rsquo;re using <a href="http://getbootstrap.com/">Bootstrap</a> and we want to add an <code>input-lg</code> CSS class onto our username field to make it really big.</p>

<h2>The Solution(s)</h2>

<p>There are many ways to solve this problem.  I will discuss some solutions I dislike before I discuss my preferred solution.</p>

<h3>Using a form widget attribute</h3>

<p>We could add a <code>class</code> attribute to our Django form field:</p>

<pre><code class="python">from django import forms

class AuthenticationForm(forms.Form):
    username = forms.CharField(
        max_length=254,
        widget=forms.TextInput(attrs={'class': "input-lg"}),
    )
    password = forms.CharField(widget=forms.PasswordInput)
</code></pre>

<p>I dislike this approach because it requires including presentation rules in our back-end code.  This class attribute is used exclusively by our CSS and/or JavaScript and should therefore live in Django templates, not in Python code.</p>

<h3>Using django-floppyforms</h3>

<p>If we&rsquo;re using <a href="https://django-floppyforms.readthedocs.org/">django-floppyforms</a> we could include logic in our <code>floppyforms/attrs.html</code> template to add specific classes based on a context variable (<a href="https://github.com/grundleborg/django-floppyforms-bootstrap3/blob/9ab0261eb8ae0c939e4ad01066716e445357cb95/floppyforms_bootstrap3/templates/floppyforms/attrs.html">example</a>).  Here&rsquo;s an example:</p>

<p>
    {% for name, value in attrs.items %} {{ name }}{% if value != True %}=&ldquo;{{ value }}{% if name == "class&rdquo; %} {{ extra_classes }}{% endif %}&ldquo;{% endfor %}
</p>

<p>This should work but it&rsquo;s ugly and in general I do not enjoy maintaining heavy logic in my templates.</p>

<p><aside>Aside: there is currently an <a href="https://github.com/gregmuellegger/django-floppyforms/issues/99">open issue</a> on django-floppyforms discussing how this could be added as a feature to the library.</aside></p>

<h3>Using django-widget-tweaks</h3>

<p>I prefer to solve this problem with <a href="https://pypi.python.org/pypi/django-widget-tweaks">django-widget-tweaks</a>.</p>

<p>The django-widget-tweaks library provides two solutions to this problem:</p>

<ol>
<li><code>add_class</code> template filter</li>
<li><code>render_field</code> template tag.</li>
</ol>


<h4>The add_class template filter</h4>

<p><a href="http://kmike.ru/pages/about/">Mikhail Korobov</a> originally created the <a href="https://pypi.python.org/pypi/django-widget-tweaks">django-widget-tweaks</a> library in 2011.  It started as a series of template filters for modifying form field attributes from your Django templates.</p>

<p>Here&rsquo;s an example usage of the <code>add_class</code> filter for adding a CSS class to our form field:</p>

<p>
    {% load widget_tweaks %}
    <p>
        {{ form.username|add_class:&ldquo;input-lg&rdquo; }}
        {{ form.username.errors }}
    </p>
    <p>
        {{ form.password }}
        {{ form.password.errors }}
    </p>
</p>

<p>I find this solution both easy to read and easy to maintain.</p>

<h4>The render_field template tag</h4>

<p>I discovered <a href="https://pypi.python.org/pypi/django-widget-tweaks">django-widget-tweaks</a> shortly after <a href="http://kmike.ru/pages/about/">Mikhail</a> created it.  I appreciated his solution for this problem, but I wanted a more HTML-like syntax for my form field customizations.  I created the <code>render_field</code> template tag to satisfy that desire.</p>

<p>With the <code>render_field</code> tag you can add attributes to form fields with a much more HTML-like syntax:</p>

<p>
    {% load widget_tweaks %}
    <p>
        {% render_field form.username class+=&ldquo;input-lg&rdquo; %}
        {{ form.username.errors }}
    </p>
    <p>
        {% render_field form.password %}
        {{ form.password.errors }}
    </p>
</p>

<p>As a bonus, with <code>render_field</code> we can also set a CSS class for erroneous and required form fields.  See <a href="https://pypi.python.org/pypi/django-widget-tweaks#render-field">the documentation</a> for more details.</p>

<h2>Conclusion</h2>

<p>I have not had a chance to use <a href="https://django-floppyforms.readthedocs.org/">django-floppyforms</a> yet, but I expect that <a href="https://pypi.python.org/pypi/django-widget-tweaks">django-widget-tweaks</a> and django-floppyforms would integrate well together.</p>

<p>I am on the lookout for new solutions to this problem, but django-widget-tweaks has served me well so far.  I have used it for three years now it remains one of my go-to libraries for new Django projects.</p>

<p>How do you add CSS classes do your Django form fields?  If you have another solution please leave a comment below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Supporting both Django 1.7 and South]]></title>
    <link href="https://treyhunner.com/2014/03/migrating-to-django-1-dot-7/"/>
    <updated>2014-03-27T13:05:00-07:00</updated>
    <id>https://treyhunner.com/2014/03/migrating-to-django-1-dot-7</id>
    <content type="html"><![CDATA[<p>Have an open source Django app with South migrations?  Adding support for Django 1.7 might be a little painful.  In this post I will discuss the difficulty of supporting Django 1.7 while maintaining South migrations for users of Django 1.6 and below.</p>

<p>Django 1.7 uses the <code>migrations</code> sub-package in your app for database migrations and South relies on the same package.  Unfortunately, you can&rsquo;t store both packages in the same place.  At first glance, it seems we cannot support both Django 1.7 and previous versions of Django using South.  However, as I explain below, we can support both at once.</p>

<h2>Assessing your options</h2>

<p>In order to support both Django 1.7 and Django 1.6 with South we can rename the <code>migrations</code> package and instruct users to reference the new package in their settings module.  We can do this with the <a href="https://docs.djangoproject.com/en/1.7/ref/settings/#std:setting-MIGRATION_MODULES">MIGRATION_MODULES</a> or <a href="http://south.readthedocs.org/en/latest/settings.html#south-migration-modules">SOUTH_MIGRATION_MODULES</a> settings.  There are three options:</p>

<ol>
<li>Move existing <code>migrations</code> directory to <code>south_migrations</code> and create Django 1.7 migrations in <code>migrations</code> package</li>
<li>Create new Django 1.7 migrations package in <code>django_migrations</code> directory and leave existing South migrations package</li>
<li>Move existing <code>migrations</code> directory to <code>south_migrations</code> and create Django 1.7 migrations in <code>django_migrations</code> directory</li>
</ol>


<p>The first option requires existing users either switch to Django 1.7 or update their settings module before upgrading to the new version of your app.  The second option requires all Django 1.7 users to customize their settings module to properly install your app.  The third option requires everyone (both Django 1.7 and South users) to update their settings module.</p>

<p>Out of those options I prefer the first one.  When you eventually drop support for South, you will probably want your Django 1.7 migrations to live in the <code>migrations</code> directory.  If you don&rsquo;t force that switch now, you would eventually need to break backwards-compatibility or maintain two duplicate migrations directories.</p>

<p>So our plan is to move the South migrations to <code>south_migrations</code> and create Django 1.7 migrations.  An example with the <a href="https://github.com/treyhunner/django-email-log">django-email-log</a> app:</p>

<pre><code class="bash">$ git mv email_log/migrations email_log/south_migrations
$ python manage.py makemigrations email_log
$ git add email_log/migrations
</code></pre>

<h2>Breaking South support</h2>

<p>If you move <code>migrations</code> to <code>south_migrations</code> and make a Django 1.7 <code>migrations</code> package, what happens to existing users with South?</p>

<p>Your new app upgrade will break backwards compatibility for South users and you want to make sure they <em>know</em> they need to make a change immediately after upgrading.  Users should see a loud and clear error message instructing them what they need to do.  This can be done by hijacking their use of the <strong>migrate</strong> command with South.</p>

<p>Existing users will run <strong>migrate</strong> when upgrading your app.  If they don&rsquo;t migrate immediately, they will when they notice a problem and realize they need to run <strong>migrate</strong>.  Upon migrating, we want to show a clear error message telling the user what to do.</p>

<h2>Failing loudly and with a clear error message</h2>

<p>When South looks for app migrations it will import our <code>migrations</code> package.  Our <code>migrations</code> package contains Django 1.7 migrations, which South won&rsquo;t understand.  So we want to make sure that if our <code>migrations</code> package is imported either Django 1.7 is installed or a proper error message is displayed.  Upon importing this package, we can check for the presence of the new <code>django.db.migrations</code> module and if not found we will raise an exception with a descriptive error message.</p>

<p>For example, this is the code I plan to add to the <code>email_log/migrations/__init__.py</code> file for <a href="https://github.com/treyhunner/django-email-log">django-email-log</a> to add Django 1.7 support:</p>

<pre><code class="python">"""
Django migrations for email_log app

This package does not contain South migrations.  South migrations can be found
in the ``south_migrations`` package.
"""

SOUTH_ERROR_MESSAGE = """\n
For South support, customize the SOUTH_MIGRATION_MODULES setting like so:

    SOUTH_MIGRATION_MODULES = {
        'email_log': 'email_log.south_migrations',
    }
"""

# Ensure the user is not using Django 1.6 or below with South
try:
    from django.db import migrations  # noqa
except ImportError:
    from django.core.exceptions import ImproperlyConfigured
    raise ImproperlyConfigured(SOUTH_ERROR_MESSAGE)
</code></pre>

<p>Now when we run <strong>migrate</strong> with Django 1.6 and South, we&rsquo;ll see the following exception raised:</p>

<pre><code>django.core.exceptions.ImproperlyConfigured:

For South support, customize the SOUTH_MIGRATION_MODULES setting like so:

    SOUTH_MIGRATION_MODULES = {
        'email_log': 'email_log.south_migrations',
    }
</code></pre>

<h2>Conclusion</h2>

<p>This breaks backwards compatibility, but our users should immediately understand what has broken and how to fix it.  Remember to upgrade the major number of your package version to note this backwards-incompatible change.</p>

<p>I would love to hear your thoughts about this approach in the comments below.  Let me know if you have other ideas about how to handle supporting Django 1.7 migrations and South at the same time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TDD with Django Tutorial]]></title>
    <link href="https://treyhunner.com/2013/11/tdd-with-django-workshop/"/>
    <updated>2013-11-04T00:00:00-08:00</updated>
    <id>https://treyhunner.com/2013/11/tdd-with-django-workshop</id>
    <content type="html"><![CDATA[<p>I helped host a free Test-Driven Django Web Development workshop on <time date="2013-11-02">Saturday November 2</time> with <a href="http://pythonsd.org/">San Diego Python</a>.  We created a series of tutorials demonstrating how to create a Django-powered blog while practicing test-driven development.  The <a href="http://python.org/psf/">Python Software Foundation</a> sponsored the event and the <a href="http://aicenterca.com/">Ansir Innovation Center</a> provided a venue.</p>

<p>You can find the tutorials at <a href="http://bit.ly/pysd-tdd">http://bit.ly/pysd-tdd</a> .  The tutorials are provided under a <a href="https://creativecommons.org/licenses/by-sa/3.0/">CC BY-SA license</a> so you can reuse and modify them for your own purposes.</p>

<p>Tutorial markdown files and working source code may be found on <a href="https://github.com/pythonsd/test-driven-django-development">Github</a>.  We plan to improve and extend these tutorials for a future workshop.  If you have ideas for improvements/additions or if you notice a bug, please submit an issue or open a pull request.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visual Integration Tests for Django]]></title>
    <link href="https://treyhunner.com/2013/10/visual-integration-tests-for-django/"/>
    <updated>2013-10-03T15:19:00-07:00</updated>
    <id>https://treyhunner.com/2013/10/visual-integration-tests-for-django</id>
    <content type="html"><![CDATA[<p>I recently added a new type of test to my testing arsenal: visual tests.  Visual tests ensure the CSS, markup, and JavaScript produce a webpage that looks right.</p>

<h2>Visual testing frameworks</h2>

<p>Visual testing tools compare screenshots to ensure tested webpages look pixel perfect.  Capturing webpage screenshots requires a full-featured web browser to render CSS and execute JavaScript.  All three of the visual testing tools I found rely on Selenium or PhantomJS for rendering.</p>

<h3>PhantomCSS</h3>

<p><a href="https://github.com/Huddle/PhantomCSS">PhantomCSS</a> uses PhantomJS for screenshot differencing.  PhantomCSS won&rsquo;t integrate directly with the Django live server or your Python test suite, so if you want to run a visual integration test, you&rsquo;d need to manually start and stop the test server between tests.  I might eventually try out PhantomCSS for CSS unit tests, but I wanted to visually test my full website so I needed integration with the Django live server.</p>

<h3>Django-casper</h3>

<p><a href="https://github.com/dobarkod/django-casper">Django-casper</a> uses Django live server tests to execute CasperJS test files (which use PhantomJS) to compare screenshots.  Each test requires an additional Python test which references a JavaScript file that executes the navigation and screenshotting code.  I found this approach messy and difficult to setup.</p>

<h3>Needle</h3>

<p>The <a href="https://github.com/bfirsh/needle">needle</a> Python library uses Selenium to navigate your website and screenshot rendered pages.  Unfortunately needle has poor test coverage, a seemingly failing test suite, and no change log.  Despite these shortcomings, I went with needle for my visual integration tests because it got the job done.</p>

<h2>Django and Needle</h2>

<p>I used the following mixin to integrate the Django live server with needle.  I used PhantomJS, but Firefox or another Selenium web driver should work as well.</p>

<pre><code class="python">from django.test import LiveServerTestCase
from needle.cases import NeedleTestCase
from selenium.webdriver import PhantomJS


class DjangoNeedleTestCase(NeedleTestCase, LiveServerTestCase):

    """Needle test case for use with Django live server"""

    driver = PhantomJS

    @classmethod
    def get_web_driver(cls):
        return type('NeedleWebDriver', (NeedleWebDriverMixin, cls.driver), {})()
</code></pre>

<p>Unfortunately the above code only works with the version of needle on Github.  The PyPI version does not yet include the <code>NeedleWebDriverMixin</code> (which I contributed recently for Django support).  I have created <a href="https://github.com/bfirsh/needle/issues/13">an issue</a> suggesting a new PyPI release be made to resolve this problem.</p>

<h2>Room for improvement</h2>

<p>Currently I only run my visual tests manually.  Visual tests are very brittle and occasionally they just break without any changes.  If I manage to stabilize my visual tests so that they pass consistently on different platforms, I may run them during continuous integration.</p>

<p>Do you have another solution for visual integration testing?  Let me know in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Log all outgoing emails in Django]]></title>
    <link href="https://treyhunner.com/2013/05/django-email-log/"/>
    <updated>2013-05-20T00:00:00-07:00</updated>
    <id>https://treyhunner.com/2013/05/django-email-log</id>
    <content type="html"><![CDATA[<p>Ever needed to determine whether an email was sent from a Django project?  I
made a Django application that does exactly that: <a href="https://github.com/treyhunner/django-email-log">django-email-log</a>.</p>

<p>I got the idea from <a href="http://stackoverflow.com/a/7553759/98187">a StackOverflow answer</a> and I decided to make a real
application out of it.  All emails are stored in a single model which can
easily be viewed, searched, sorted, and filtered from the admin site.</p>

<p>I used test-driven development when making the app and I baked in Python 3
support from the beginning.  I found the process of TDD for a standalone
Python package fairly easy and enjoyable.</p>
]]></content>
  </entry>
  
</feed>
