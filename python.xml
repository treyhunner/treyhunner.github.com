<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Trey Hunner]]> - Python</title>
  <link href="https://treyhunner.com/atom.xml" rel="self"/>
  <link href="https://treyhunner.com/"/>
  <updated>2021-09-17T13:25:26-07:00</updated>
  <id>https://treyhunner.com/</id>
  <author>
    <name><![CDATA[Trey Hunner]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python Cyber Monday Sales 2020]]></title>
    <link href="https://treyhunner.com/2020/11/python-cyber-monday-sales/"/>
    <updated>2020-11-27T13:20:00-08:00</updated>
    <id>https://treyhunner.com/2020/11/python-cyber-monday-sales</id>
    <content type="html"><![CDATA[<p>This post is a compilation of different Cyber Monday deals I&rsquo;ve found related to Python and Python learning.</p>

<h3>Python Morsels weekly screencasts</h3>

<p>Let&rsquo;s get the self-promotion out of the way first.</p>

<p>I <a href="https://treyhunner.com/2020/11/short-python-screencasts-for-$50-slash-year/">announced a couple days ago</a> that you can now get <strong>one year of Python screencasts</strong> as well as mini-blog posts for <strong>$50/year</strong> (with at least one new screencast each week).
This also includes one Python exercise each month.
I haven&rsquo;t set a concrete end date to this &ldquo;sale&rdquo; (it&rsquo;s actually more of a newly announced service that will be increasing in price in early 2021).</p>

<p>You can <a href="https://treyhunner.com/2020/11/short-python-screencasts-for-$50-slash-year/">find my article on the Python Morsels screencasts sale here</a>.</p>

<h3>Talk Python course bundle</h3>

<p>You can get every Talk Python course that&rsquo;s been made so far <a href="https://training.talkpython.fm/black-friday-2020">for just $250</a>.
There&rsquo;s 28 courses currently and the bundle also includes courses published through October 2021.</p>

<h3>PyBites sales</h3>

<p>PyBites is offering PyBites Premium+ Access for 2 months for $24 and Introductory Bites Course for $15 (both effectively 70% off) during their <a href="https://pybit.es/blackfriday">Black Friday and Cyber Monday sale</a>.</p>

<h3>Reuven Lerner&rsquo;s Python courses and exercises</h3>

<p>Reuven Lerner is offering <a href="https://store.lerner.co.il/?coupon=BF2020">40% off all his products</a> (Python courses, Weekly Python Exercises, and product bundles) through Monday.</p>

<h3>Matt Harrison&rsquo;s Modern Python workshop</h3>

<p>Matt Harrison&rsquo;s <a href="https://mattharrison.podia.com/modern-python-a-hands-on-approach-to-idiomatic-python-projects">Modern Python workshop</a> is $500 (50%) off through Monday with coupon code EARLYBIRD and and <a href="https://mattharrison.podia.com/courses">his other courses</a> (including Python data science and pandas courses) are 40% off through Monday with code BLACKFRIDAY.</p>

<h3>Speed Up Your Django book</h3>

<p>Adam Johnson&rsquo;s <a href="https://adamj.eu/tech/2020/11/28/speed-up-your-django-tests-cyber-monday-deal/">Speed Up Your Django book</a> is 50% off through Monday.
Python Morsels is a Django-powered site and I could use this book, so I&rsquo;ll be buying a copy for myself as well.</p>

<h3>Mike Driscoll&rsquo;s Python books</h3>

<p>Mike Driscoll is <a href="https://www.blog.pythonlibrary.org/2020/11/25/black-friday-cyber-monday-comes-early-in-2020/">offering a sale on all his Python books</a> (each is $15 or less during the sale).</p>

<h3>Brian Okken&rsquo;s Pytest book (Pragmatic Bookshelf)</h3>

<p>Pragmatic Bookshelf is offering 40% off all books with the code turkeysale2020, including <a href="https://pragprog.com/titles/bopytest/python-testing-with-pytest/">Brian Okken&rsquo;s Pytest book</a> which is just under $15 with the coupon.</p>

<h3>No Starch Press Python books</h3>

<p>No Starch Press is also running <a href="https://nostarch.com/catalog/python">a 33% off sale</a> on their Python books (with books by Al Sweigart, Eric Matthes, and many others), though the sale ends before Monday.</p>

<h3>Real Python subscription</h3>

<p>Real Python is offering an annual subscription for <a href="https://realpython.com/account/join/?c=blackfriday2020">$200/year</a> and 20% of that goes to the Python Software Foundation.</p>

<h3>Pluralsight subscription</h3>

<p>We&rsquo;re now moving into &ldquo;I&rsquo;m really not actually sure what you&rsquo;re getting&rdquo; sales.
Pluralsight is running a Black Friday sale this year: <a href="https://www.pluralsight.com/offer/2020/bf-cm-40-off">$180/year for a subscription</a>.
I&rsquo;m not sure whether this is one year for $180 but the subscription renews at the regular price of $300/year or whether it&rsquo;s $180/year indefinitely (the fact that they don&rsquo;t specify is a bit concerning).</p>

<h3>100 Days of Code Python and other Udemy courses</h3>

<p>There&rsquo;s a <a href="https://www.udemy.com/course/100-days-of-code/?couponCode=DCF8D1FDCAA3CE660C34">100 Days of Code Python course</a> course on sale for just $13 on Udemy through mid next week.
I haven&rsquo;t heard anything about it but it looks like it includes <em>a lot</em>.</p>

<p>There are also various other Udemy Python courses on sale, like <a href="https://www.udemy.com/course/automate/">Automate The Boring Stuff</a>, though many of these sales end within the next 24 hours (through Black Friday only).</p>

<h3>Lots of courses, books, screencasts, exercises, live workshops on sale</h3>

<p>Don&rsquo;t go too wild on sales.</p>

<p>I know that I wouldn&rsquo;t want anyone subscribing to Python Morsels unless they think they&rsquo;ll actually commit at least an hour over the next year to watch screencasts.
I imagine many other Python educators feel similar about purchases that go to waste.</p>

<p>Look through the sales above and think about what you could use.
What works well with the way you learn and what would you actually make a habit to use after you&rsquo;ve purchased it?</p>

<p>If you have a question about the <a href="https://treyhunner.com/2020/11/short-python-screencasts-for-$50-slash-year/">Python Morsels screencasts/exercises</a>, email me.
If you have questions about other sales, email the folks running those sales (make sure to do it now in case they take a day or two to get back to you).</p>

<p>Also if you&rsquo;ve found other Python sales I&rsquo;ve missed above, please comment or <a href='m&#97;&#105;l&#116;o&#58;he&#108;p&#64;&#112;%7&#57;th%6Fnmo&#114;s%6&#53;ls&#46;&#99;&#111;m'>email me</a> to let me know about them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Short weekly Python screencasts for $50/year]]></title>
    <link href="https://treyhunner.com/2020/11/short-python-screencasts-for-$50-slash-year/"/>
    <updated>2020-11-25T09:00:00-08:00</updated>
    <id>https://treyhunner.com/2020/11/short-python-screencasts-for-$50-slash-year</id>
    <content type="html"><![CDATA[<p>I&rsquo;m offering a service to help <strong>life-long Python learners</strong> manufacture ah-ha moments.</p>

<p>A few years ago at my local Python meetup I was discussing how function arguments work (they&rsquo;re <a href="https://jeffknupp.com/blog/2012/11/13/is-python-callbyvalue-or-callbyreference-neither/">call-by-assignment</a> a.k.a. <a href="https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing">call by object</a>).
A friend spoke up to clarify: &ldquo;but it doesn&rsquo;t work that way for numbers and strings, right?&rdquo;
I said &ldquo;I&rsquo;m pretty sure it works like this for everything&rdquo;.</p>

<p>After some quiet Googling, my friend declared &ldquo;I&rsquo;ve been using Python for over a decade and I never knew it worked this way&rdquo;.
They&rsquo;d suddenly realized <em>their mental model of the Python world</em> differed from Python&rsquo;s model of itself.
They&rsquo;d experienced an &ldquo;ah-ha moment&rdquo;.</p>

<p>I&rsquo;m going to publish <strong>at least one short Python screencast every week</strong> to help <em>manufacture</em> <strong>Python ah-ha moments</strong>.
These will be single-topic screencasts that <strong>won&rsquo;t waste your time</strong>.</p>

<p>So, if you&rsquo;re a life-long learner who uses Python and doesn&rsquo;t have a wealth of time for learning, read on.</p>

<h3>What is this?</h3>

<p>With this subscription you&rsquo;ll receive access to a growing archive of Python screencasts (<strong>at least one new screencast each week</strong>).
If you enjoy my <a href="https://treyhunner.com/blog/categories/python/">articles</a> or my <a href="https://treyhunner.com/talks">talks and tutorials</a>, you&rsquo;ll probably enjoy the format I use in my screencasts.</p>

<p><strong>Don&rsquo;t like video?</strong> That&rsquo;s okay!
Each screencast is captioned and includes <strong>a mini-blog post</strong> which is nearly <strong>a text-based equivalent</strong> to the video.</p>

<h3>What are the screencasts like?</h3>

<p>Each screencast will be <strong>concise</strong> and short, under 6 minutes.
Examples include <a href="https://www.pythonmorsels.com/topics/variables-are-pointers/">variables are pointers</a> (2 mins) and <a href="https://www.pythonmorsels.com/topics/2-types-change/">the 2 types of &ldquo;change&rdquo;</a> (3 mins), plus <a href="https://www.pythonmorsels.com/screencasts/">others here</a>.</p>

<p><a href="https://www.pythonmorsels.com/screencasts/"><img src="https://treyhunner.com/images/screencasts.png"></a></p>

<p><strong>What topics will the screencasts be on?</strong>
Functions, classes, scope, operator overloading, decorators, exception handling, and more.
Screencasts will focus on Python core, not third-party libraries (no Pandas, Numpy, or Django).
Topics will range from beginner to advanced.</p>

<p><strong>Will the screencasts be freely shareable?</strong>
Some screencasts will be limited to subscribers and some will be available to non-subscribers, with a yet-to-be-decided breakdown between the two.</p>

<h3>You&rsquo;ll also get get occasional Python exercises</h3>

<p>This weekly screencast subscription is part of <a href="https://www.pythonmorsels.com/">Python Morsels</a>, an exercise subscription service I run.
In addition to weekly screencasts, you&rsquo;ll also get <strong>one Python exercise each month</strong>.</p>

<p>If you&rsquo;ve taken <a href="https://treyhunner.com/talks/#tutorials">my PyCon tutorials</a> or attended <a href="https://truthful.technology/">my trainings</a>, you know exercises are the best part of my curriculum.
I spend a lot of time making new exercises because we learn by attempting to retrieve information from our heads (through practice), not by putting information <em>into</em> our heads.</p>

<p>Python Morsels exercises are both interesting and <strong>complex but not complicated</strong>.
You don&rsquo;t need to work through the monthly exercises, but I do recommend it.</p>

<h3>This subscription is $50/year for a limited time</h3>

<p>I&rsquo;m offering this service for a comparatively low price of $50/year because I don&rsquo;t have a large archive of screencasts yet.
I have plans to increase the price in 2021, but as an early user <strong>your price will always be $50/year</strong>.</p>

<p>If you&rsquo;re not sure whether this is for you, <a href="https://www.pythonmorsels.com/accounts/signup/?plan=9">sign up to try it out for free</a>.</p>

<h3>Why pay for this when there&rsquo;s a lot of great free Python videos out there?</h3>

<p>Why am I charging money for this?</p>

<p>There&rsquo;s really one reason: <strong>you&rsquo;re trading money for time</strong>.
This is a tradeoff I&rsquo;ve grown an appreciation for (one which would baffle a younger version of myself).</p>

<p>This time-money tradeoff comes in a few forms:</p>

<ol>
<li>You will never see any ads on Python Morsels: you&rsquo;re not the product, the screencasts are</li>
<li>No filler content or rambling (no ad revenue means no need for long videos)</li>
<li>I have unique expertise and perspective: teaching Python is my business and I&rsquo;m good at it</li>
</ol>


<p>Watch some of <a href="https://www.pythonmorsels.com/screencasts/">the current screencasts</a> before signing up.
If my teaching style isn&rsquo;t for you, that&rsquo;s okay!
But if my teaching style <em>is</em> for you, I think you&rsquo;ll find <strong>the next year&rsquo;s worth of screencasts</strong> will be worthwhile! 😁</p>

<h3>Student discounts? Team subscriptions? Other questions?</h3>

<p>My standard <a href="https://www.pythonmorsels.com/discounts/">discount policy</a> is income-tiered: if you make less than $60,000 USD annually, you&rsquo;re eligible.
I also offer situation-specific discounts, so please <strong>ask for a discount if you need one</strong>.</p>

<p>If you&rsquo;re paying through your employer, note that there are <strong>team subscriptions</strong> too.
Just <a href="https://form.jotform.com/201278113533043">fill out this form</a> to get started setting up a subscription for your team.</p>

<h3>Ready to try it out?</h3>

<p>Are you ready to subscribe to a growing collection of short and concise Python screencasts?
<a href="https://www.pythonmorsels.com/accounts/signup/?plan=9">Let&rsquo;s get learning</a>!</p>

<p><a href="https://www.pythonmorsels.com/accounts/signup/?plan=9" class="subscribe-btn form-big bright">Sign up for weekly Python screencasts now</a></p>

<p>Do you have another question that I haven&rsquo;t answered here?
Check out the <a href="https://pythonmorsels.helpscoutdocs.com/article/23-lite-plan">Lite plan FAQ</a> or <a href="m&#97;&#105;l&#116;o&#58;he&#108;p&#64;&#112;%7&#57;th%6Fnmo&#114;s%6&#53;ls&#46;&#99;&#111;m">email your question to he&#108;p&#64;pyt&#104;o&#110;morsel&#115;&#46;&#99;o&#109;</a>.</p>

<p>Happy learning!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Passing a function as an argument to another function in Python]]></title>
    <link href="https://treyhunner.com/2020/01/passing-functions-as-arguments/"/>
    <updated>2020-01-14T08:00:00-08:00</updated>
    <id>https://treyhunner.com/2020/01/passing-functions-as-arguments</id>
    <content type="html"><![CDATA[<p>One of the more hair-raising facts we learn in my introductory Python trainings is that <strong>you can pass functions into other functions</strong>.
You can pass functions around because in Python, <strong>functions are objects</strong>.</p>

<p>You likely don&rsquo;t need to know about this in your first week of using Python, but as you dive deeper into Python you&rsquo;ll find that it can be quite convenient to understand how to pass a function into another function.</p>

<p>This is part 1 of what I expect to be a series on the various properties of &ldquo;function objects&rdquo;.
This article focuses on what a new Python programmer should know and appreciate about <strong>the object-nature of Python&rsquo;s functions</strong>.</p>

<ul data-toc=".entry-content"></ul>


<h2>Functions can be referenced</h2>

<p>If you try to use a function without putting parentheses after it Python won&rsquo;t complain but it also won&rsquo;t do anything useful:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">greet</span><span class="p">():</span>
</span><span class='line'><span class="gp">... </span>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Hello world!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">greet</span>
</span><span class='line'><span class="go">&lt;function greet at 0x7ff246c6d9d0&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This applies to methods as well (<a href="https://docs.python.org/3/glossary.html#term-method">methods</a> are functions which live on objects):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span><span class="o">.</span><span class="n">pop</span>
</span><span class='line'><span class="go">&lt;built-in method pop of list object at 0x7ff246c76a80&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Python is allowing us to <em>refer</em> to these <em>function objects</em>, the same way we might refer to a string, a number, or a <code>range</code> object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="s">&quot;hello&quot;</span>
</span><span class='line'><span class="go">&#39;hello&#39;</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="mf">2.5</span>
</span><span class='line'><span class="go">2.5</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="go">range(0, 10)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since we can refer to functions like any other object, we can point a variable to a function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">29</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">gimme</span> <span class="o">=</span> <span class="n">numbers</span><span class="o">.</span><span class="n">pop</span>
</span></code></pre></td></tr></table></div></figure>


<p>That <code>gimme</code> variable now points to the <code>pop</code> method on our <code>numbers</code> list.
So if we call <code>gimme</code>, it&rsquo;ll do the same thing that calling <code>numbers.pop</code> would have done:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">gimme</span><span class="p">()</span>
</span><span class='line'><span class="go">29</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span>
</span><span class='line'><span class="go">[2, 1, 3, 4, 7, 11, 18]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">gimme</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="go">2</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span>
</span><span class='line'><span class="go">[1, 3, 4, 7, 11, 18]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">gimme</span><span class="p">()</span>
</span><span class='line'><span class="go">18</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that we <strong>didn&rsquo;t make a new function</strong>.
We&rsquo;ve just pointed the <code>gimme</code> variable name to the <code>numbers.pop</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">gimme</span>
</span><span class='line'><span class="go">&lt;built-in method pop of list object at 0x7ff246c76bc0&gt;</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span><span class="o">.</span><span class="n">pop</span>
</span><span class='line'><span class="go">&lt;built-in method pop of list object at 0x7ff246c76bc0&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can even store functions inside data structures and then reference them later:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">square</span><span class="p">(</span><span class="n">n</span><span class="p">):</span> <span class="k">return</span> <span class="n">n</span><span class="o">**</span><span class="mi">2</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">cube</span><span class="p">(</span><span class="n">n</span><span class="p">):</span> <span class="k">return</span> <span class="n">n</span><span class="o">**</span><span class="mi">3</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">operations</span> <span class="o">=</span> <span class="p">[</span><span class="n">square</span><span class="p">,</span> <span class="n">cube</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">29</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">numbers</span><span class="p">):</span>
</span><span class='line'><span class="gp">... </span>    <span class="n">action</span> <span class="o">=</span> <span class="n">operations</span><span class="p">[</span><span class="n">i</span> <span class="o">%</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="gp">... </span>    <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s">&quot;{action.__name__}({n}):&quot;</span><span class="p">,</span> <span class="n">action</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="go">square(2): 4</span>
</span><span class='line'><span class="go">cube(1): 1</span>
</span><span class='line'><span class="go">square(3): 9</span>
</span><span class='line'><span class="go">cube(4): 64</span>
</span><span class='line'><span class="go">square(7): 49</span>
</span><span class='line'><span class="go">cube(11): 1331</span>
</span><span class='line'><span class="go">square(18): 324</span>
</span><span class='line'><span class="go">cube(29): 24389</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s not very common to take a function and give it another name or to store it inside a data structure, but Python allows us to do these things because <strong>functions can be passed around, just like any other object</strong>.</p>

<h2>Functions can be passed into other functions</h2>

<p>Functions, like any other object, can be passed as an argument to another function.</p>

<p>For example we could define a function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;world&quot;</span><span class="p">):</span>
</span><span class='line'><span class="gp">... </span>    <span class="sd">&quot;&quot;&quot;Greet a person (or the whole world by default).&quot;&quot;&quot;</span>
</span><span class='line'><span class="gp">... </span>    <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s">&quot;Hello {name}!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">greet</span><span class="p">(</span><span class="s">&quot;Trey&quot;</span><span class="p">)</span>
</span><span class='line'><span class="go">Hello Trey!</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then pass it into the built-in <code>help</code> function to see what it does:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">help</span><span class="p">(</span><span class="n">greet</span><span class="p">)</span>
</span><span class='line'><span class="go">Help on function greet in module __main__:</span>
</span><span class='line'>
</span><span class='line'><span class="go">greet(name=&#39;world&#39;)</span>
</span><span class='line'><span class="go">    Greet a person (or the whole world by default).</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we can pass the function into itself (yes this is weird), which converts it to a string here:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">greet</span><span class="p">(</span><span class="n">greet</span><span class="p">)</span>
</span><span class='line'><span class="go">Hello &lt;function greet at 0x7f93416be8b0&gt;!</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are actually quite a few functions built-in to Python that are specifically meant to accept other functions as arguments.</p>

<p>The built-in <code>filter</code> function accepts two things as an argument: a <code>function</code> and an <code>iterable</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">help</span><span class="p">(</span><span class="nb">filter</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="go"> |  filter(function or None, iterable) --&gt; filter object</span>
</span><span class='line'><span class="go"> |</span>
</span><span class='line'><span class="go"> |  Return an iterator yielding those items of iterable for which function(item)</span>
</span><span class='line'><span class="go"> |  is true. If function is None, return the items that are true.</span>
</span></code></pre></td></tr></table></div></figure>


<p>The given iterable (list, tuple, string, etc.) is looped over and the given function is called on each item in that iterable: whenever the function returns <code>True</code> (or another truthy value) the item is included in the <code>filter</code> output.</p>

<p>So if we pass <code>filter</code> an <code>is_odd</code> function (which returns <code>True</code> when given an odd number) and a list of numbers, we&rsquo;ll get back all of the numbers we gave it which are odd.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">29</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">is_odd</span><span class="p">(</span><span class="n">n</span><span class="p">):</span> <span class="k">return</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">filter</span><span class="p">(</span><span class="n">is_odd</span><span class="p">,</span> <span class="n">numbers</span><span class="p">)</span>
</span><span class='line'><span class="go">&lt;filter object at 0x7ff246c8dc40&gt;</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="nb">filter</span><span class="p">(</span><span class="n">is_odd</span><span class="p">,</span> <span class="n">numbers</span><span class="p">))</span>
</span><span class='line'><span class="go">[1, 3, 7, 11, 29]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The object returned from <code>filter</code> is <a href="https://treyhunner.com/2018/06/how-to-make-an-iterator-in-python/">a lazy iterator</a> so we needed to convert it to a <code>list</code> to actually see its output.</p>

<p>Since functions can be passed into functions, that also means that functions can accept another function as an argument.
The <code>filter</code> function assumes its first argument is a function.
You can think of the <code>filter</code> function as pretty much the same as this function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">filter</span><span class="p">(</span><span class="n">predicate</span><span class="p">,</span> <span class="n">iterable</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>        <span class="n">item</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">iterable</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">predicate</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This function expects the <code>predicate</code> argument to be a function (technically it could be any <a href="https://treyhunner.com/2019/04/is-it-a-class-or-a-function-its-a-callable/">callable</a>).
When we call that function (with <code>predicate(item)</code>), we pass a single argument to it and then check the truthiness of its return value.</p>

<h2>Lambda functions are an example of this</h2>

<p>A lambda expression is a special syntax in Python for creating an <a href="https://en.wikipedia.org/wiki/Anonymous_function">anonymous function</a>.
When you evaluate a <strong>lambda expression</strong> the object you get back is called a <strong>lambda function</strong>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">is_odd</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">n</span><span class="p">:</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">is_odd</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="go">True</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">is_odd</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="go">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lambda functions are pretty much just like regular Python functions, with a few caveats.</p>

<p>Unlike other functions, lambda functions don&rsquo;t have a name (their name shows up as <code>&lt;lambda&gt;</code>).
They also can&rsquo;t have docstrings and they can only contain a single Python expression.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">add</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">add</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="go">5</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">add</span>
</span><span class='line'><span class="go">&lt;function &lt;lambda&gt; at 0x7ff244852f70&gt;</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">add</span><span class="o">.</span><span class="n">__doc__</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can think of a lambda expression as a shortcut for making a function which will evaluate a single Python expression and return the result of that expression.</p>

<p>So defining a lambda expression doesn&rsquo;t actually evaluate that expression: it returns a function that can evaluate that expression later.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">greet</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">name</span><span class="o">=</span><span class="s">&quot;world&quot;</span><span class="p">:</span> <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s">&quot;Hello {name}&quot;</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">greet</span><span class="p">(</span><span class="s">&quot;Trey&quot;</span><span class="p">)</span>
</span><span class='line'><span class="go">Hello Trey</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">greet</span><span class="p">()</span>
</span><span class='line'><span class="go">Hello world</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;d like to note that all three of the above examples of <code>lambda</code> are poor examples.
If you want a variable name to point to a function object that you can use later, you should use <code>def</code> to define a function: that&rsquo;s the <em>usual</em> way to define a function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">is_odd</span><span class="p">(</span><span class="n">n</span><span class="p">):</span> <span class="k">return</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span> <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;world&quot;</span><span class="p">):</span> <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s">&quot;Hello {name}&quot;</span><span class="p">)</span>
</span><span class='line'><span class="gp">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lambda expressions are for when we&rsquo;d like to define a function and <strong>pass it into another function immediately</strong>.</p>

<p>For example here we&rsquo;re using <code>filter</code> to get even numbers, but we&rsquo;re using a lambda expression so we don&rsquo;t have to define an <code>is_even</code> function before we use it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span>
</span><span class='line'><span class="go">[2, 1, 3, 4, 7, 11, 18, 29]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">n</span><span class="p">:</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">,</span> <span class="n">numbers</span><span class="p">))</span>
</span><span class='line'><span class="go">[2, 4, 18]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is <em>the most appropriate</em> use of lambda expressions: passing a function into another function while defining that passed function all on one line of code.</p>

<p>As I&rsquo;ve written about in <a href="https://treyhunner.com/2018/09/stop-writing-lambda-expressions/">Overusing lambda expressions</a>, I&rsquo;m not a fan of Python&rsquo;s lambda expression syntax.
Whether or not you like this syntax, you should know that this syntax is just a shortcut for creating a function.</p>

<p>Whenever you see <code>lambda</code> expressions, keep in mind that:</p>

<ol>
<li>A lambda expression is a special syntax for creating a function and passing it to another function all on one line of code</li>
<li>Lambda functions are just like all other function objects: neither is more special than the other and both can be passed around</li>
</ol>


<p>All functions in Python can be passed as an argument to another function (that just happens to be the <em>sole</em> purpose of lambda functions).</p>

<h2>A common example: key functions</h2>

<p>Besides the built-in <code>filter</code> function, where will you ever see a function passed into another function?
Probably the most common place you&rsquo;ll see this in Python itself is with a <strong>key function</strong>.</p>

<p>It&rsquo;s a common convention for functions which accept an iterable-to-be-sorted/ordered to also accept a <a href="https://treyhunner.com/2018/04/keyword-arguments-in-python/">named argument</a> called <code>key</code>.
This <code>key</code> argument should be a function <a href="https://treyhunner.com/2019/04/is-it-a-class-or-a-function-its-a-callable/">or another callable</a>.</p>

<p>The <a href="https://treyhunner.com/2019/05/python-builtins-worth-learning/#sorted">sorted</a>, <a href="https://treyhunner.com/2019/05/python-builtins-worth-learning/#min_and_max">min</a>, and <a href="https://treyhunner.com/2019/05/python-builtins-worth-learning/#min_and_max">max</a> functions all follow this convention of accepting a <code>key</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;kumquat&#39;</span><span class="p">,</span> <span class="s">&#39;Cherimoya&#39;</span><span class="p">,</span> <span class="s">&#39;Loquat&#39;</span><span class="p">,</span> <span class="s">&#39;longan&#39;</span><span class="p">,</span> <span class="s">&#39;jujube&#39;</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">normalize_case</span><span class="p">(</span><span class="n">s</span><span class="p">):</span> <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="n">casefold</span><span class="p">()</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">sorted</span><span class="p">(</span><span class="n">fruits</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">normalize_case</span><span class="p">)</span>
</span><span class='line'><span class="go">[&#39;Cherimoya&#39;, &#39;jujube&#39;, &#39;kumquat&#39;, &#39;longan&#39;, &#39;Loquat&#39;]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">min</span><span class="p">(</span><span class="n">fruits</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">normalize_case</span><span class="p">)</span>
</span><span class='line'><span class="go">&#39;Cherimoya&#39;</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">max</span><span class="p">(</span><span class="n">fruits</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">normalize_case</span><span class="p">)</span>
</span><span class='line'><span class="go">&#39;Loquat&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That <a href="https://docs.python.org/3/glossary.html#term-key-function">key function</a> is called for each value in the given iterable and the return value is used to order/sort each of the iterable items.
You can think of this key function as computing <strong>a comparison key</strong> for each item in the iterable.</p>

<p>In the above example our comparison key returns a lowercased string, so each string is compared by its lowercased version (which results in a case-insensitive ordering).</p>

<p>We used a <code>normalize_case</code> function to do this, but the same thing could be done using <code>str.casefold</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;kumquat&#39;</span><span class="p">,</span> <span class="s">&#39;Cherimoya&#39;</span><span class="p">,</span> <span class="s">&#39;Loquat&#39;</span><span class="p">,</span> <span class="s">&#39;longan&#39;</span><span class="p">,</span> <span class="s">&#39;jujube&#39;</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">sorted</span><span class="p">(</span><span class="n">fruits</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="nb">str</span><span class="o">.</span><span class="n">casefold</span><span class="p">)</span>
</span><span class='line'><span class="go">[&#39;Cherimoya&#39;, &#39;jujube&#39;, &#39;kumquat&#39;, &#39;longan&#39;, &#39;Loquat&#39;]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note</strong>: That <code>str.casefold</code> trick is a bit odd if you aren&rsquo;t familiar with how classes work.
Classes store the <em>unbound methods</em> that will accept an instance of that class when called.
We normally type <code>my_string.casefold()</code> but <code>str.casefold(my_string)</code> is what Python translates that to.
That&rsquo;s a story for another time.</p>

<p>Here we&rsquo;re finding the string with the most letters in it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">max</span><span class="p">(</span><span class="n">fruits</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="nb">len</span><span class="p">)</span>
</span><span class='line'><span class="go">&#39;Cherimoya&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If there are multiple maximums or minimums, the earliest one <em>wins</em> (that&rsquo;s how <code>min</code>/<code>max</code> work):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;kumquat&#39;</span><span class="p">,</span> <span class="s">&#39;Cherimoya&#39;</span><span class="p">,</span> <span class="s">&#39;Loquat&#39;</span><span class="p">,</span> <span class="s">&#39;longan&#39;</span><span class="p">,</span> <span class="s">&#39;jujube&#39;</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">min</span><span class="p">(</span><span class="n">fruits</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="nb">len</span><span class="p">)</span>
</span><span class='line'><span class="go">&#39;Loquat&#39;</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">sorted</span><span class="p">(</span><span class="n">fruits</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="nb">len</span><span class="p">)</span>
</span><span class='line'><span class="go">[&#39;Loquat&#39;, &#39;longan&#39;, &#39;jujube&#39;, &#39;kumquat&#39;, &#39;Cherimoya&#39;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s a function which will return a 2-item tuple containing the length of a given string and the case-normalized version of that string:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">length_and_alphabetical</span><span class="p">(</span><span class="n">string</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Return sort key: length first, then case-normalized string.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">string</span><span class="p">),</span> <span class="n">string</span><span class="o">.</span><span class="n">casefold</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>We could pass this <code>length_and_alphabetical</code> function as the <code>key</code> argument to <code>sorted</code> to sort our strings by their length first and then by their case-normalized representation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;kumquat&#39;</span><span class="p">,</span> <span class="s">&#39;Cherimoya&#39;</span><span class="p">,</span> <span class="s">&#39;Loquat&#39;</span><span class="p">,</span> <span class="s">&#39;longan&#39;</span><span class="p">,</span> <span class="s">&#39;jujube&#39;</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">fruits_by_length</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">fruits</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">length_and_alphabetical</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">fruits_by_length</span>
</span><span class='line'><span class="go">[&#39;jujube&#39;, &#39;longan&#39;, &#39;Loquat&#39;, &#39;kumquat&#39;, &#39;Cherimoya&#39;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This relies on the fact that <a href="https://treyhunner.com/2019/03/python-deep-comparisons-and-code-readability/">Python&rsquo;s ordering operators do deep comparisons</a>.</p>

<h2>Other examples of passing a function as an argument</h2>

<p>The <code>key</code> argument accepted by <code>sorted</code>, <code>min</code>, and <code>max</code> is just one common example of passing functions into functions.</p>

<p>Two more function-accepting Python built-ins are <code>map</code> and <code>filter</code>.</p>

<p>We&rsquo;ve already seen that <code>filter</code> will <em>filter</em> our list based on a given function&rsquo;s return value.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span>
</span><span class='line'><span class="go">[2, 1, 3, 4, 7, 11, 18, 29]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">is_odd</span><span class="p">(</span><span class="n">n</span><span class="p">):</span> <span class="k">return</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="nb">filter</span><span class="p">(</span><span class="n">is_odd</span><span class="p">,</span> <span class="n">numbers</span><span class="p">))</span>
</span><span class='line'><span class="go">[1, 3, 7, 11, 29]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>map</code> function will call the given function on each item in the given iterable and use the result of that function call as the new item:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="n">is_odd</span><span class="p">,</span> <span class="n">numbers</span><span class="p">))</span>
</span><span class='line'><span class="go">[False, True, True, False, True, True, False, True]</span>
</span></code></pre></td></tr></table></div></figure>


<p>For example here we&rsquo;re converting numbers to strings and squaring numbers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="n">numbers</span><span class="p">))</span>
</span><span class='line'><span class="go">[&#39;2&#39;, &#39;1&#39;, &#39;3&#39;, &#39;4&#39;, &#39;7&#39;, &#39;11&#39;, &#39;18&#39;, &#39;29&#39;]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">n</span><span class="p">:</span> <span class="n">n</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="n">numbers</span><span class="p">))</span>
</span><span class='line'><span class="go">[4, 1, 9, 16, 49, 121, 324, 841]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note</strong>: as I noted in my article on overusing lambda, I personally prefer to <a href="https://treyhunner.com/2018/09/stop-writing-lambda-expressions/#Overuse:_lambda_with_map_and_filter">use generator expressions instead of the <code>map</code> and <code>filter</code> functions</a>.</p>

<p>Similar to <code>map</code>, and <code>filter</code>, there&rsquo;s also <a href="https://docs.python.org/3/library/itertools.html#itertools.takewhile">takewhile</a> and <a href="https://docs.python.org/3/library/itertools.html#itertools.dropwhile">dropwhile</a> from the <code>itertools</code> module.
The first one is like <code>filter</code> except it stops once it finds a value for which the <em>predicate function</em> is false.
The second one does the opposite: it only includes values after the predicate function has become false.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">takewhile</span><span class="p">,</span> <span class="n">dropwhile</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">colors</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;red&#39;</span><span class="p">,</span> <span class="s">&#39;green&#39;</span><span class="p">,</span> <span class="s">&#39;orange&#39;</span><span class="p">,</span> <span class="s">&#39;purple&#39;</span><span class="p">,</span> <span class="s">&#39;pink&#39;</span><span class="p">,</span> <span class="s">&#39;blue&#39;</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">short_length</span><span class="p">(</span><span class="n">word</span><span class="p">):</span> <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">6</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">takewhile</span><span class="p">(</span><span class="n">short_length</span><span class="p">,</span> <span class="n">colors</span><span class="p">))</span>
</span><span class='line'><span class="go">[&#39;red&#39;, &#39;green&#39;]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">dropwhile</span><span class="p">(</span><span class="n">short_length</span><span class="p">,</span> <span class="n">colors</span><span class="p">))</span>
</span><span class='line'><span class="go">[&#39;orange&#39;, &#39;purple&#39;, &#39;pink&#39;, &#39;blue&#39;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>And there&rsquo;s <a href="https://docs.python.org/3/library/functools.html#functools.reduce">functools.reduce</a> and <a href="https://docs.python.org/3/library/itertools.html#itertools.accumulate">itertools.accumulate</a>, which both call a 2-argument function to accumulate values as they loop:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="nb">reduce</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">accumulate</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">product</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span> <span class="k">return</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">reduce</span><span class="p">(</span><span class="n">product</span><span class="p">,</span> <span class="n">numbers</span><span class="p">)</span>
</span><span class='line'><span class="go">168</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">accumulate</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">product</span><span class="p">))</span>
</span><span class='line'><span class="go">[2, 2, 6, 24, 168]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict">defaultdict</a> class in the <code>collections</code> module is another example.
The <code>defaultdict</code> class creates dictionary-like objects which will never raise a <code>KeyError</code> when a missing key is accessed, but will instead add a new value to the dictionary automatically.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">counts</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">counts</span><span class="p">[</span><span class="s">&#39;jujubes&#39;</span><span class="p">]</span>
</span><span class='line'><span class="go">0</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">counts</span>
</span><span class='line'><span class="go">defaultdict(&lt;class &#39;int&#39;&gt;, {&#39;jujubes&#39;: 0})</span>
</span></code></pre></td></tr></table></div></figure>


<p>This <code>defaultdict</code> class accepts a <a href="https://treyhunner.com/2019/04/is-it-a-class-or-a-function-its-a-callable/">callable</a> (function or class) that will be called to create a default value whenever a missing key is accessed.</p>

<p>The above code worked because <code>int</code> returns <code>0</code> when called with no arguments:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">int</span><span class="p">()</span>
</span><span class='line'><span class="go">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here the default value is <code>list</code>, which returns a new list when called with no arguments.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">things_by_color</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">things_by_color</span><span class="p">[</span><span class="s">&#39;purple&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;socks&#39;</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">things_by_color</span><span class="p">[</span><span class="s">&#39;purple&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;shoes&#39;</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">things_by_color</span>
</span><span class='line'><span class="go">defaultdict(&lt;class &#39;list&#39;&gt;, {&#39;purple&#39;: [&#39;socks&#39;, &#39;shoes&#39;]})</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <a href="https://docs.python.org/3/library/functools.html#functools.partial">partial</a> function in the <code>functools</code> module is another example.
<code>partial</code> accepts a function and any number of arguments and returns a new function (technically it returns a <a href="https://treyhunner.com/2019/04/is-it-a-class-or-a-function-its-a-callable/#Callable_objects">callable object</a>).</p>

<p>Here&rsquo;s an example of <code>partial</code> used to &ldquo;bind&rdquo; the <code>sep</code> keyword argument to the <code>print</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">print_each</span> <span class="o">=</span> <span class="n">partial</span><span class="p">(</span><span class="k">print</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>print_each</code> function returned now does the same thing as if <code>print</code> was called with <code>sep='\n'</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="go">1 2 3</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="go">1</span>
</span><span class='line'><span class="go">2</span>
</span><span class='line'><span class="go">3</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">print_each</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="go">1</span>
</span><span class='line'><span class="go">2</span>
</span><span class='line'><span class="go">3</span>
</span></code></pre></td></tr></table></div></figure>


<p>You&rsquo;ll also find functions-that-accept-functions in third-party libraries, like <a href="https://docs.djangoproject.com/en/3.0/ref/models/fields/#default">in Django</a>, and <a href="https://numpy.org/doc/1.17/reference/generated/numpy.fromfunction.html">in numpy</a>.
Anytime you see a class or a function with documentation stating that one of its arguments should be a <strong>callable</strong> or a <strong>callable object</strong>, that means &ldquo;you could pass in a function here&rdquo;.</p>

<h2>A topic I&rsquo;m skipping over: nested functions</h2>

<p>Python also supports nested functions (functions defined inside of other functions).
Nested functions power Python&rsquo;s <a href="https://docs.python.org/3/glossary.html#term-decorator">decorator</a> syntax.</p>

<p>I&rsquo;m not going to discuss nested functions in this article because nested functions warrant exploration of <a href="https://en.wikipedia.org/wiki/Non-local_variable">non-local variables</a>, <a href="https://en.wikipedia.org/wiki/Closure_(computer_programming)">closures</a>, and other weird corners of Python that you don&rsquo;t need to know when you&rsquo;re first getting started with treating functions as objects.</p>

<p>I plan to write a follow-up article on this topic and link to it here later.
In the meantime, if you&rsquo;re interested in nested functions in Python, a search for <a href="https://duckduckgo.com/?q=higher-order+functions+in+Python">higher order functions in Python</a> may be helpful.</p>

<h2>Treating functions as objects is normal</h2>

<p>Python has <a href="https://en.wikipedia.org/wiki/First-class_function">first-class functions</a>, which means:</p>

<ol>
<li>You can assign functions to variables</li>
<li>You can store functions in lists, dictionaries, or other data structures</li>
<li>You can pass functions into other functions</li>
<li>You can write functions that return functions</li>
</ol>


<p>It might seem odd to treat functions as objects, but it&rsquo;s not that unusual in Python.
By my count, about 15% of the Python built-ins are meant to accept functions as arguments (<code>min</code>, <code>max</code>, <code>sorted</code>, <code>map</code>, <code>filter</code>, <code>iter</code>, <code>property</code>, <code>classmethod</code>, <code>staticmethod</code>, <code>callable</code>).</p>

<p>The most important uses of Python&rsquo;s first-class functions are:</p>

<ol>
<li>Passing a <code>key</code> function to the built-in <code>sorted</code>, <code>min</code>, and <code>max</code> functions</li>
<li>Passing functions into looping helpers like <code>filter</code> and <code>itertools.dropwhile</code></li>
<li>Passing a &ldquo;default-value generating factory function&rdquo; to classes like <code>defaultdict</code></li>
<li>&ldquo;Partially-evaluating&rdquo; functions by passing them into <code>functools.partial</code></li>
</ol>


<p>This topics goes <em>much deeper</em> than what I&rsquo;ve discussed here, but until you find yourself writing decorator functions, you probably don&rsquo;t need to explore this topic any further.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cyber Monday Python Sales 2019]]></title>
    <link href="https://treyhunner.com/2019/12/cyber-monday-python-sales/"/>
    <updated>2019-12-02T02:00:00-08:00</updated>
    <id>https://treyhunner.com/2019/12/cyber-monday-python-sales</id>
    <content type="html"><![CDATA[<p>I&rsquo;m running <a href="https://treyhunner.com/2019/11/black-friday-sale-gift-python-morsels-to-a-friend/">a sale</a> that ends in 24 hours, but I&rsquo;m not the only one.
This post is a compilation of the different Cyber Monday deals I&rsquo;ve found related to Python and Python learning.</p>

<h3>Python Morsels, weekly skill-building for professional Pythonistas</h3>

<p><a href="https://www.pythonmorsels.com/">Python Morsels</a> is my weekly Python skill-building service.</p>

<p>I&rsquo;m offering something sort of like a &ldquo;buy one get one free&rdquo; sale this year.</p>

<p>You can pay $200 to get 2 redemption codes, each worth 12 months of Python Morsels.</p>

<p>You can use one code for yourself and give one to a friend.
Or you could be extra generous and give them both away to two friends.
Either way, 2 people are each getting one year&rsquo;s worth of weekly Python training.</p>

<p>You can find <a href="https://treyhunner.com/2019/11/black-friday-sale-gift-python-morsels-to-a-friend/">more details on this sale here</a>.</p>

<h3>Data School&rsquo;s Machine Learning course</h3>

<p>Kevin Markham of Data School is selling his &ldquo;Machine Learning with Text in Python&rdquo; course for $195 (it&rsquo;s usually $295).
You can find more details on this sale <a href="https://www.dataschool.io/black-friday/">on the Data School Black Friday post</a>.</p>

<h3>Talk Python Course Bundle</h3>

<p>Michael Kennedy is selling a bundle that includes <a href="https://training.talkpython.fm/black-friday-2019">every Talk Python course for $250</a>.</p>

<p>There are 20 courses included in this bundle.
If you&rsquo;re into Python and you don&rsquo;t already own most of these courses, this bundle could be a really good deal for you.</p>

<h3>Reuven Lerner&rsquo;s Python courses</h3>

<p>Reuven Lerner is offering a <a href="https://lerner.co.il/2019/11/28/my-black-friday-sale-is-live-take-50-off-any-course-in-python-or-data-science/">50% off sale on his courses</a>.
Reuven has courses on Python, Git, and regular expressions.</p>

<p>This sale also includes Reuven&rsquo;s <a href="https://store.lerner.co.il/wpe?coupon=BF2019">Weekly Python Exercise</a>, which is similar to <a href="https://www.pythonmorsels.com/">Python Morsels</a>, but has its own flavor.
You could sign up for both if you want double the weekly learning.</p>

<h3>Real Python courses</h3>

<p>Real Python is also offering <a href="https://realpython.com/account/join/?c=blackfriday2019">$40 off their annual memberships</a>.
Real Python has many tutorials and courses as well.</p>

<h3>PyBites Code Challenges</h3>

<p>Bob and Julian of PyBites are offering their a <a href="https://gumroad.com/l/Xhxeo/teachingpython">40% discount off their Newbie Bites</a> on their PyBites Code Challenges platform.</p>

<p>If you&rsquo;re new to Python and programming, check out their newbie bites.</p>

<h3>Automate the Boring Stuff Course (for free!)</h3>

<p>Al Sweigart is offering <a href="https://www.udemy.com/course/automate/?couponCode=DEC2019FREE">free lifetime access to his Automate the Boring Stuff with Python course</a> on Udemy until Wednesday.
It&rsquo;s hard to beat free!</p>

<h3>Other Cyber Monday deals?</h3>

<p>If you have questions about the <a href="https://treyhunner.com/2019/11/black-friday-sale-gift-python-morsels-to-a-friend/">Python Morsels sale</a>, <a href='m&#97;&#105;l&#116;o&#58;he&#108;p&#64;&#112;%7&#57;th%6Fnmo&#114;s%6&#53;ls&#46;&#99;&#111;m'>email me</a>.</p>

<p>The Python Morsels sale and likely all the other sales above will end in the next 24 hours, probably sooner depending on when you&rsquo;re reading this.</p>

<p>So go check them out!</p>

<p>Did I miss a deal that you know about?
Link to it in the comments!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Black Friday Sale: Gift Python Morsels to a Friend]]></title>
    <link href="https://treyhunner.com/2019/11/black-friday-sale-gift-python-morsels-to-a-friend/"/>
    <updated>2019-11-29T15:00:00-08:00</updated>
    <id>https://treyhunner.com/2019/11/black-friday-sale-gift-python-morsels-to-a-friend</id>
    <content type="html"><![CDATA[<p>From today until the end of Monday December 2nd, I&rsquo;m <a href="http://trey.io/sale2019">selling bundles</a> of two 52-week Python Morsels redemption codes.</p>

<p>You can buy 12 months of Python Morsels for yourself and <strong>gift 12 months of Python Morsels to a friend for free</strong>!</p>

<p>Or, if you&rsquo;re extra generous, you can buy two redemption codes (for the price of one) and gift them both to <em>two friends</em>.</p>

<h3>What is Python Morsels?🐍🍪</h3>

<p><a href="https://pythonmorsels.com">Python Morsels</a> is a weekly Python skill-building service for professional Python developers.
Subscribers receive one Python exercise every week in the Python skill level of their choosing (novice, intermediate, advanced).</p>

<p>Each exercise is designed to help you <strong>think the way Python thinks</strong>, so you can write your code less like a C/Java/Perl developer would and more like a fluent Pythonista would.
  Each programming language has its own unique ways of looking at the world: Python Morsels will help you embrace Python&rsquo;s.</p>

<p>One year&rsquo;s worth of Python Morsels will help even experienced Python developers <strong>deepen their Python skills</strong> and <strong>find new insights about Python</strong> to incorporate into their day-to-day work.</p>

<h3>How does this work? 🤔</h3>

<p>Normally a 12 month Python Morsels subscription costs $200.
For $200, I&rsquo;m instead selling two redemption codes, each of which can be used for 12 months (52 weeks) of Python Morsels exercises.</p>

<p>With this sale, you&rsquo;ll get two 12-month redemption codes for the price of one.
So you&rsquo;ll get 1 year of Python Morsels for 2 friends for just $200.</p>

<p>These codes can be used at any time and users of these codes will always maintain access to the 52 exercises received over the 12 month period. You can use one of these codes to extend your current subscription, but new users can also use this redemption code without signing up for an ongoing subscription.</p>

<p>Only one of these codes can be used per account (though you can purchase as many as you&rsquo;d like to gift to others).</p>

<h3>What will I (and my friends) get with Python Morsels? 🎁</h3>

<p>With Python Morsels you&rsquo;ll get:</p>

<ul>
<li><strong>An email every Monday</strong> which includes a detailed problem to solve using Python</li>
<li>Multiple bonuses for almost every problem (most have 3 bonuses, almost all have 2) so you can <strong>re-adjust your difficulty level on a weekly basis</strong></li>
<li>Hints for each problem which you can use when you get stuck</li>
<li>An online progress tracking tool to keep track of which exercises you&rsquo;ve solved and how many bonuses you solved for each exercise</li>
<li><strong>Automated tests</strong> (to ensure correctness) which you can run locally and which also run automatically when you submit your solutions</li>
<li>An email every Wednesday with a <strong>detailed walkthrough of various solutions (usually 5-10)</strong> for each problem, including walkthroughs of each bonus and a discussion of why some solutions may be better than others</li>
<li>A skill level selection tool (novice, intermediate, advanced) which you can adjust based on your Python experience</li>
<li>A web interface you can come back to even after your 12 months are over</li>
</ul>


<h3>Okay, I&rsquo;m interested. Now what? ✨</h3>

<p>First of all, don&rsquo;t wait. This buy-one-get-one-free sale ends Monday!</p>

<p>You can sign up and purchase 2 redemption codes by visiting <a href="http://trey.io/sale2019">http://trey.io/sale2019</a></p>

<p>Note that you need to create a Python Morsels account to purchase the redemption codes.
You don&rsquo;t need to have an on-going subscription, you just need an account.</p>

<p>If you have any questions about this sale, please don&rsquo;t hesitate to <a href='m&#97;&#105;l&#116;o&#58;he&#108;p&#64;&#112;%7&#57;th%6Fnmo&#114;s%6&#53;ls&#46;&#99;&#111;m'>email me</a>.</p>

<p><a href="http://trey.io/sale2019">Go get your Python Morsels redemption codes</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Loop Better: a deeper look at iteration in Python]]></title>
    <link href="https://treyhunner.com/2019/06/loop-better-a-deeper-look-at-iteration-in-python/"/>
    <updated>2019-06-18T09:15:00-07:00</updated>
    <id>https://treyhunner.com/2019/06/loop-better-a-deeper-look-at-iteration-in-python</id>
    <content type="html"><![CDATA[<p>Python&rsquo;s <code>for</code> loops don&rsquo;t work the way <code>for</code> loops do in other languages.  In this article we&rsquo;re going to dive into Python&rsquo;s <code>for</code> loops to take a look at how they work under the hood and why they work the way they do.</p>

<ol data-toc=".entry-content" data-toc-headings="h2"></ol>


<p><strong>Note</strong>: This article is based on my <a href="https://youtu.be/JYuE8ZiDPl4">Loop Better talk</a>.
It was originally published <a href="https://opensource.com/article/18/3/loop-better-deeper-look-iteration-python">on opensource.com</a>.</p>

<h2>Looping Gotchas</h2>

<p>We&rsquo;re going to start off our journey by taking a look at some &ldquo;gotchas&rdquo;.  After we&rsquo;ve learned how looping works in Python, we&rsquo;ll take another look at these gotchas and explain what&rsquo;s going on.</p>

<h3>Gotcha 1: Looping Twice</h3>

<p>Let&rsquo;s say we have a list of numbers and a generator that will give us the squares of those numbers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">squares</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can pass our generator object to the <code>tuple</code> constructor to make a tuple out of it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">tuple</span><span class="p">(</span><span class="n">squares</span><span class="p">)</span>
</span><span class='line'><span class="go">(1, 4, 9, 25, 49)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we then take the same generator object and pass it to the <code>sum</code> function we might expect that we&rsquo;d get the sum of these numbers, which would be 88.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">sum</span><span class="p">(</span><span class="n">squares</span><span class="p">)</span>
</span><span class='line'><span class="go">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead we get <code>0</code>.</p>

<h3>Gotcha 2: Containment Checking</h3>

<p>Let&rsquo;s take the same list of numbers and the same generator object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">squares</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we ask whether <code>9</code> is in our <code>squares</code> generator, Python will tell us that 9 <em>is</em> in <code>squares</code>.  But if we ask the <em>same question again</em>, Python will tell us that 9 <em>is not</em> in <code>squares</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="mi">9</span> <span class="ow">in</span> <span class="n">squares</span>
</span><span class='line'><span class="go">True</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="mi">9</span> <span class="ow">in</span> <span class="n">squares</span>
</span><span class='line'><span class="go">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>We asked the same question twice and Python gave us two different answers.</p>

<h3>Gotcha 3: Unpacking</h3>

<p>This dictionary has two key-value pairs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">counts</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;apples&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s">&#39;oranges&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s unpack this dictionary using multiple assignment:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">counts</span>
</span></code></pre></td></tr></table></div></figure>


<p>You might expect that when unpacking this dictionary, we&rsquo;ll get key-value pairs or maybe that we&rsquo;ll get an error.</p>

<p>But unpacking dictionaries doesn&rsquo;t raise errors and it doesn&rsquo;t return key-value pairs.  When you unpack dictionaries you get keys:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">x</span>
</span><span class='line'><span class="go">&#39;apples&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ll come back to these gotchas after we&rsquo;ve learned a bit about the logic that powers these Python snippets.</p>

<h2>Review: Python&rsquo;s for loop</h2>

<p>Python doesn&rsquo;t have traditional <code>for</code> loops.  To explain what I mean, let&rsquo;s take a look at a <code>for</code> loop in another programming language.</p>

<p>This is a traditional C-style <code>for</code> loop written in JavaScript:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">let</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">];</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">numbers</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">print</span><span class="p">(</span><span class="nx">numbers</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>JavaScript, C, C++, Java, PHP, and a whole bunch of other programming languages all have this kind of <code>for</code> loop.  <strong>But Python doesn&rsquo;t</strong>.</p>

<p>Python <strong>does not</strong> have traditional C-style <code>for</code> loops.  We do have something that we <em>call</em> a <code>for</code> loop in Python, but it works like a <a href="https://en.wikipedia.org/wiki/Foreach">foreach loop</a>.</p>

<p>This is Python&rsquo;s flavor of <code>for</code> loop:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span>
</span><span class='line'><span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unlike traditional C-style <code>for</code> loops, Python&rsquo;s <code>for</code> loops don&rsquo;t have index variables.  There&rsquo;s no index initializing, bounds checking, or index incrementing.  Python&rsquo;s <code>for</code> loops do <em>all the work</em> of looping over our <code>numbers</code> list for us.</p>

<p>So while we do have <code>for</code> loops in Python, we do not have have traditional C-style <code>for</code> loops.  The thing that <em>we</em> call a <code>for</code> loop works very differently.</p>

<h2>Definitions: Iterables and Sequences</h2>

<p>Now that we&rsquo;ve addressed the index-free <code>for</code> loop in our Python room, let&rsquo;s get some definitions out of the way now.</p>

<p>An <strong>iterable</strong> is anything you can loop over with a <code>for</code> loop in Python.
Iterables can be looped over and anything that can be looped over is an iterable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">some_iterable</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sequences are a very common type of iterable.
Lists, tuples, and strings are all sequences.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">coordinates</span> <span class="o">=</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">words</span> <span class="o">=</span> <span class="s">&quot;hello there&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sequences are iterables which have a specific set of features.
They can be indexed starting from <code>0</code> and ending at one less than the length of the sequence, they have a length, and they can be sliced.
Lists, tuples, strings and <em>all other</em> sequences work this way.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="go">1</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">coordinates</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="go">7</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">words</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="go">&#39;o&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lots of things in Python are iterables, but not all iterables are sequences.  Sets, dictionaries, files, and generators are all iterables but none of these things are sequences.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">my_set</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">my_dict</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;k1&#39;</span><span class="p">:</span> <span class="s">&#39;v1&#39;</span><span class="p">,</span> <span class="s">&#39;k2&#39;</span><span class="p">:</span> <span class="s">&#39;v2&#39;</span><span class="p">}</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">my_file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;some_file.txt&#39;</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">squares</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">my_set</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So anything that can be looped over with a <code>for</code> loop is an iterable and sequences are one type of iterable but Python has many other kinds of iterables as well.</p>

<h2>Python&rsquo;s for loops don&rsquo;t use indexes</h2>

<p>You might think that under the hood, Python&rsquo;s <code>for</code> loops use indexes to loop.
Here we&rsquo;re manually looping over an iterable using a <code>while</code> loop and indexes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span>
</span><span class='line'><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">numbers</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">numbers</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works for lists, but it won&rsquo;t work for everything.  This way of looping <strong>only works for sequences</strong>.</p>

<p>If we try to manually loop over a set using indexes, we&rsquo;ll get an error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">fruits</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;lemon&#39;</span><span class="p">,</span> <span class="s">&#39;apple&#39;</span><span class="p">,</span> <span class="s">&#39;orange&#39;</span><span class="p">,</span> <span class="s">&#39;watermelon&#39;</span><span class="p">}</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">fruits</span><span class="p">):</span>
</span><span class='line'><span class="gp">... </span>    <span class="k">print</span><span class="p">(</span><span class="n">fruits</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'><span class="gp">... </span>    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="gt">Traceback (most recent call last):</span>
</span><span class='line'><span class="err">File &quot;&lt;stdin&gt;&quot;, line 2, in &lt;module&gt;</span>
</span><span class='line'><span class="go">TypeError: &#39;set&#39; object does not support indexing</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sets are not sequences so they don&rsquo;t support indexing.</p>

<p>We <em>cannot</em> manually loop over every iterable in Python by using indexes.
This simply won&rsquo;t work for iterables that aren&rsquo;t sequences.</p>

<h2>Iterators power for loops</h2>

<p>So we&rsquo;ve seen that Python&rsquo;s <code>for</code> loops must not be using indexes under the hood.
Instead, Python&rsquo;s <code>for</code> loops use <strong>iterators</strong>.</p>

<p>Iterators are the things that power iterables.
You can get an iterator from <em>any</em> iterable.
And you can use an iterator to manually loop over the iterable it came from.</p>

<p>Let&rsquo;s take a look at how that works.</p>

<p>Here are three iterables: a set, a tuple, and a string.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">}</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">coordinates</span> <span class="o">=</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">words</span> <span class="o">=</span> <span class="s">&quot;hello there&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can ask each of these iterables for an <em>iterator</em> using Python&rsquo;s built-in <code>iter</code> function.
Passing an iterable to the <code>iter</code> function will always give us back an iterator, no matter what type of iterable we&rsquo;re working with.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">iter</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span>
</span><span class='line'><span class="go">&lt;set_iterator object at 0x7f2b9271c860&gt;</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">iter</span><span class="p">(</span><span class="n">coordinates</span><span class="p">)</span>
</span><span class='line'><span class="go">&lt;tuple_iterator object at 0x7f2b9271ce80&gt;</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">iter</span><span class="p">(</span><span class="n">words</span><span class="p">)</span>
</span><span class='line'><span class="go">&lt;str_iterator object at 0x7f2b9271c860&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once we have an iterator, the one thing we can do with it is get its next item by passing it to the built-in <code>next</code> function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">my_iterator</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">next</span><span class="p">(</span><span class="n">my_iterator</span><span class="p">)</span>
</span><span class='line'><span class="go">1</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">next</span><span class="p">(</span><span class="n">my_iterator</span><span class="p">)</span>
</span><span class='line'><span class="go">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>Iterators are stateful, meaning once you&rsquo;ve consumed an item from them it&rsquo;s gone.</p>

<p>If you ask for the <code>next</code> item from an iterator and there are no more items, you&rsquo;ll get a <code>StopIteration</code> exception:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">next</span><span class="p">(</span><span class="n">iterator</span><span class="p">)</span>
</span><span class='line'><span class="go">3</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">next</span><span class="p">(</span><span class="n">iterator</span><span class="p">)</span>
</span><span class='line'><span class="gt">Traceback (most recent call last):</span>
</span><span class='line'>  File <span class="nb">&quot;&lt;stdin&gt;&quot;</span>, line <span class="m">1</span>, in <span class="n">&lt;module&gt;</span>
</span><span class='line'><span class="gr">StopIteration</span>
</span></code></pre></td></tr></table></div></figure>


<p>So you can get an iterator from every iterable.
And the only thing that you can do with iterators is ask them for their next item using the <code>next</code> function.
And if you pass them to <code>next</code> but they don&rsquo;t have a next item, a <code>StopIteration</code> exception will be raised.</p>

<p><img src="https://treyhunner.com/images/hello-kitty-pez.jpg" width="512" height="384" title="&#34;Hello Kitty PEZ dispenser&#34;" alt="&#34;Hello Kitty PEZ dispenser&#34;"></p>

<p><a href="https://www.flickr.com/photos/30223382@N06/4151828376">Hello Kitty PEZ dispenser photo</a> by Deborah Austin / <a href="https://creativecommons.org/licenses/by/2.0/">CC BY</a></p>

<p>You can think of iterators as like Hello Kitty PEZ dispensers that cannot be reloaded.
You can take PEZ out, but once a PEZ is removed it can&rsquo;t be put back and once the dispenser is empty, it&rsquo;s useless.</p>

<h2>Looping without a for loop</h2>

<p>Now that we&rsquo;ve learned about iterators and the <code>iter</code> and <code>next</code> functions, we&rsquo;re going to try manually looping over an iterable without using a <code>for</code> loop.</p>

<p>We&rsquo;ll do so by attempting to turn this <code>for</code> loop into a <code>while</code> loop:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">funky_for_loop</span><span class="p">(</span><span class="n">iterable</span><span class="p">,</span> <span class="n">action_to_do</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">iterable</span><span class="p">:</span>
</span><span class='line'>        <span class="n">action_to_do</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>To do this we&rsquo;ll:</p>

<ol>
<li>Get an iterator from the given iterable</li>
<li>Repeatedly get the next item from the iterator</li>
<li>Execute the body of the <code>for</code> loop if we successfully got the next item</li>
<li>Stop our loop if we got a <code>StopIteration</code> exception while getting the next item</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">funky_for_loop</span><span class="p">(</span><span class="n">iterable</span><span class="p">,</span> <span class="n">action_to_do</span><span class="p">):</span>
</span><span class='line'>    <span class="n">iterator</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">iterable</span><span class="p">)</span>
</span><span class='line'>    <span class="n">done_looping</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>    <span class="k">while</span> <span class="ow">not</span> <span class="n">done_looping</span><span class="p">:</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="n">item</span> <span class="o">=</span> <span class="nb">next</span><span class="p">(</span><span class="n">iterator</span><span class="p">)</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">StopIteration</span><span class="p">:</span>
</span><span class='line'>            <span class="n">done_looping</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">action_to_do</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ve just re-invented a <code>for</code> loop by using a <code>while</code> loop and iterators.</p>

<p>The above code pretty much defines the way looping works under the hood in Python.  If you understand the way the built-in <code>iter</code> and <code>next</code> functions work for looping over things, you understand how Python&rsquo;s <code>for</code> loops work.</p>

<p>In fact you&rsquo;ll understand a little bit more than just how <code>for</code> loops work in Python.  All forms of looping over iterables work this way.</p>

<p><strong>The iterator protocol</strong> is a fancy way of saying &ldquo;how looping over iterables works in Python&rdquo;.
It&rsquo;s essentially the definition of the way the <code>iter</code> and <code>next</code> functions work in Python.
All forms of iteration in Python are powered by the iterator protocol.</p>

<p>The iterator protocol is used by <code>for</code> loops (as we&rsquo;ve already seen):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Multiple assignment also uses the iterator protocol:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span> <span class="o">=</span> <span class="n">coordinates</span>
</span></code></pre></td></tr></table></div></figure>


<p>Star expressions use the iterator protocol:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="o">*</span><span class="n">rest</span> <span class="o">=</span> <span class="n">numbers</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="o">*</span><span class="n">numbers</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And many built-in functions rely on the iterator protocol:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">unique_numbers</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Anything in Python that works with an <em>iterable</em> probably uses the iterator protocol in some way.
Any time you&rsquo;re looping over an iterable in Python, you&rsquo;re relying on the iterator protocol.</p>

<h2>Generators are iterators</h2>

<p>So you might be thinking: iterators seem cool, but they also just seem like an implementation detail and we might not need to <em>care</em> about them as users of Python.</p>

<p>I have news for you: it&rsquo;s very common to work directly with iterators in Python.</p>

<p>The <code>squares</code> object here is a generator:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">squares</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And generators are iterators, meaning you can call <code>next</code> on a generator to get its next item:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">next</span><span class="p">(</span><span class="n">squares</span><span class="p">)</span>
</span><span class='line'><span class="go">1</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">next</span><span class="p">(</span><span class="n">squares</span><span class="p">)</span>
</span><span class='line'><span class="go">4</span>
</span></code></pre></td></tr></table></div></figure>


<p>But if you&rsquo;ve ever used a generator before, you probably know that you can also loop over generators:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">squares</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">squares</span><span class="p">:</span>
</span><span class='line'><span class="gp">... </span>    <span class="k">print</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="go">1</span>
</span><span class='line'><span class="go">4</span>
</span><span class='line'><span class="go">9</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you can loop over something in Python, it&rsquo;s an <strong>iterable</strong>.</p>

<p>So <strong>generators are iterators</strong>, but generators are also iterables.  What&rsquo;s going on here?</p>

<h2>I lied to you</h2>

<p>So when I explained how iterators worked earlier, I skipped over an important detail about them.</p>

<p><strong>Iterators are iterables</strong>.</p>

<p>I&rsquo;ll say that again: every iterator in Python is also an iterable, which means you can loop over iterators.</p>

<p>Because iterators are also iterables, you can get an iterator from an iterator using the built-in <code>iter</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">iterator1</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">iterator2</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">iterator1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Remember that iterables give us iterators when we call <code>iter</code> on them.</p>

<p>When we call <code>iter</code> on an iterator it will always give us itself back:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">iterator1</span> <span class="ow">is</span> <span class="n">iterator2</span>
</span><span class='line'><span class="go">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>Iterators are iterables and all iterators are their own iterators.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">is_iterator</span><span class="p">(</span><span class="n">iterable</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">iter</span><span class="p">(</span><span class="n">iterable</span><span class="p">)</span> <span class="ow">is</span> <span class="n">iterable</span>
</span></code></pre></td></tr></table></div></figure>


<p>Confused yet?</p>

<p>Let&rsquo;s recap these terms.</p>

<p>An iter<strong>able</strong> is something you&rsquo;re able to iterate over.
An iter<strong>ator</strong> is the agent that actually does the iterating over an iterable.</p>

<p>Additionally, in Python iterators are also iterables and they act as <em>their own</em> iterators.</p>

<p>So iterators are iterables, but they don&rsquo;t have the variety of features that some iterables have.</p>

<p>Iterators have no length and they can&rsquo;t be indexed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">iterator</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">len</span><span class="p">(</span><span class="n">iterator</span><span class="p">)</span>
</span><span class='line'><span class="go">TypeError: object of type &#39;list_iterator&#39; has no len()</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">iterator</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="go">TypeError: &#39;list_iterator&#39; object is not subscriptable</span>
</span></code></pre></td></tr></table></div></figure>


<p>From our perspective as Python programmers, the only useful things you can do with an iterator are pass it to the built-in <code>next</code> function or loop over it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">next</span><span class="p">(</span><span class="n">iterator</span><span class="p">)</span>
</span><span class='line'><span class="go">1</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">iterator</span><span class="p">)</span>
</span><span class='line'><span class="go">[2, 3, 5, 7]</span>
</span></code></pre></td></tr></table></div></figure>


<p>And if we loop over an iterator a second time, we&rsquo;ll get nothing back:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">iterator</span><span class="p">)</span>
</span><span class='line'><span class="go">[]</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can think of iterators are <strong>lazy iterables</strong> that are <strong>single-use</strong>, meaning they can be looped over one time only.</p>

<table>
<thead>
<tr>
<th> Object    </th>
<th> Iterable?        </th>
<th> Iterator?        </th>
</tr>
</thead>
<tbody>
<tr>
<td> Iterable  </td>
<td> &#x2714;&#xfe0f; </td>
<td>         &#x2753; </td>
</tr>
<tr>
<td> Iterator  </td>
<td> &#x2714;&#xfe0f; </td>
<td> &#x2714;&#xfe0f; </td>
</tr>
<tr>
<td> Generator </td>
<td> &#x2714;&#xfe0f; </td>
<td> &#x2714;&#xfe0f; </td>
</tr>
<tr>
<td> List      </td>
<td> &#x2714;&#xfe0f; </td>
<td>         &#x274c; </td>
</tr>
</tbody>
</table>


<p>As you can see in the truth table above, iterables are not always iterators but iterators are always iterables:</p>

<h2>The iterator protocol, in full</h2>

<p>Let&rsquo;s define how iterators work from Python&rsquo;s perspective.</p>

<p>Iterables can be passed to the <code>iter</code> function to get an iterator for them.</p>

<p>Iterators:</p>

<ol>
<li>Can be passed to the <code>next</code> function which will give their next item or raise a <code>StopIteration</code> exception if there are no more items</li>
<li>Can be passed to the <code>iter</code> function and will return themselves back</li>
</ol>


<p>The inverse of these statements also hold true:</p>

<ol>
<li>Anything that can be passed to <code>iter</code> without a <code>TypeError</code> is an iterable</li>
<li>Anything that can be passed to <code>next</code> without a <code>TypeError</code> is an iterator</li>
<li>Anything that returns itself when passed to <code>iter</code> is an iterator</li>
</ol>


<p>That&rsquo;s the iterator protocol in Python.</p>

<h2>Iterators enable laziness</h2>

<p>Iterators allow us to both work with and create <strong>lazy iterables</strong> that don&rsquo;t do any work until we ask them for their next item.
Because we can create lazy iterables, we can make infinitely long iterables.
And we can create iterables that are conservative with system resources, that can save us memory and can save us CPU time.</p>

<h2>Iterators are everywhere</h2>

<p>You&rsquo;ve already seen lots of iterators in Python.
I&rsquo;ve already mentioned that generators are iterators.
Many of Python&rsquo;s built-in classes are iterators also.
For example Python&rsquo;s <code>enumerate</code> and <code>reversed</code> objects are iterators.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">letters</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">,</span> <span class="s">&#39;c&#39;</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">e</span> <span class="o">=</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">letters</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">e</span>
</span><span class='line'><span class="go">&lt;enumerate object at 0x7f112b0e6510&gt;</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">next</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span><span class='line'><span class="go">(0, &#39;a&#39;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Python 3, <code>zip</code>, <code>map</code>, and <code>filter</code> objects are iterators too.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">letters</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">,</span> <span class="s">&#39;c&#39;</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">z</span> <span class="o">=</span> <span class="nb">zip</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">letters</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">z</span>
</span><span class='line'><span class="go">&lt;zip object at 0x7f112cc6ce48&gt;</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">next</span><span class="p">(</span><span class="n">z</span><span class="p">)</span>
</span><span class='line'><span class="go">(1, &#39;a&#39;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And file objects in Python are iterators also.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">next</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="s">&#39;hello.txt&#39;</span><span class="p">))</span>
</span><span class='line'><span class="go">&#39;hello world\n&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are lots of iterators bult-in to Python, in the standard library, and in third-party Python libraries.
These iterators all act like lazy iterables by delaying work until the moment you ask them for their next item.</p>

<h2>Creating your own iterator</h2>

<p>It&rsquo;s useful to know that you&rsquo;re already using iterators, but I&rsquo;d like you to also know that you can create your own iterators and your own lazy iterables.</p>

<p>This class makes an iterator that accepts an iterable of numbers and provides squares of each of the numbers as it&rsquo;s looped over.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">square_all</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">numbers</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">numbers</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__next__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">next</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">numbers</span><span class="p">)</span> <span class="o">**</span> <span class="mi">2</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span>
</span></code></pre></td></tr></table></div></figure>


<p>But no work will be done until we start looping over an instance of this class.</p>

<p>Here we have an infinitely long iterable <code>count</code> and you can see that <code>square_all</code> accepts <code>count</code> without fully looping over this infinitely long iterable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">count</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="n">count</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">squares</span> <span class="o">=</span> <span class="n">square_all</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">next</span><span class="p">(</span><span class="n">squares</span><span class="p">)</span>
</span><span class='line'><span class="go">25</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">next</span><span class="p">(</span><span class="n">squares</span><span class="p">)</span>
</span><span class='line'><span class="go">36</span>
</span></code></pre></td></tr></table></div></figure>


<p>This iterator class works, but we don&rsquo;t usually make iterators this way.
Usually when we want to make a custom iterator, we make a generator function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">square_all</span><span class="p">(</span><span class="n">numbers</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">:</span>
</span><span class='line'>        <span class="k">yield</span> <span class="n">n</span><span class="o">**</span><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>This generator function is equivalent to the class we made above and it works essentially the same way.</p>

<p>That <code>yield</code> statement probablys seem magical, but it is very powerful: <code>yield</code> allows us to put our generator function on pause between calls from the <code>next</code> function.
The <code>yield</code> statement is the thing that separates generator functions from regular functions.</p>

<p>Another way we could implement this same iterator is with a generator expression.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">square_all</span><span class="p">(</span><span class="n">numbers</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">n</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This does the same thing as our generator function but it uses a syntax that looks <a href="http://treyhunner.com/2015/12/python-list-comprehensions-now-in-color/">like a list comprehension</a>.
If you need to make a lazy iterable in your code, think of iterators and consider making a generator function or a generator expression.</p>

<h2>How iterators can improve your code</h2>

<p>Once you&rsquo;ve embraced the idea of using lazy iterables in your code, you&rsquo;ll find that there are lots of possibilities for discovering or creating helper functions that assist you in looping over iterables and processing data.</p>

<h3>Laziness and summing</h3>

<p>This is a <code>for</code> loop that sums up all billable hours in a Django queryset:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">hours_worked</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">events</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="n">is_billable</span><span class="p">():</span>
</span><span class='line'>        <span class="n">hours_worked</span> <span class="o">+=</span> <span class="n">event</span><span class="o">.</span><span class="n">duration</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is code that does the same thing using a generator expression for lazy evaluation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">billable_times</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="n">event</span><span class="o">.</span><span class="n">duration</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">events</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="n">is_billable</span><span class="p">()</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">hours_worked</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">billable_times</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that the shape of our code has changed dramatically.</p>

<p>Turning our billable times into a lazy iterable has allowed us to name something (<code>billable_times</code>) that was previously unnamed.
This has also allowed us to use the <code>sum</code> function.  We couldn&rsquo;t have used <code>sum</code> before because we didn&rsquo;t even have an iterable to pass to it.
Iterators allow you to fundamentally change the way you structure your code.</p>

<h3>Laziness and breaking out of loops</h3>

<p>This code prints out the first ten lines of a log file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">log_file</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">10</span><span class="p">:</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code does the same thing, but we&rsquo;re using the <code>itertools.islice</code> function to lazily grab the first 10 lines of our file as we loop:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">islice</span>
</span><span class='line'>
</span><span class='line'><span class="n">first_ten_lines</span> <span class="o">=</span> <span class="n">islice</span><span class="p">(</span><span class="n">log_file</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">first_ten_lines</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>first_ten_lines</code> variable we&rsquo;ve made is an iterator.
Again using an iterator allowed us to give a name to something (first ten lines) that was previously unnamed.
Naming things can make our code more descriptive and more readable.</p>

<p>As a bonus we also removed the need for a <code>break</code> statement in our loop because the <code>islice</code> utility handles the breaking for us.</p>

<p>You can find many more iteration helper functions in <a href="https://docs.python.org/3/library/itertools.html">itertools</a> in the standard library as well as in third-party libraries such as <a href="https://boltons.readthedocs.io">boltons</a> and <a href="https://more-itertools.readthedocs.io">more-itertools</a>.</p>

<h3>Creating your own iteration helpers</h3>

<p>You can find helper functions for looping in the standard library and in third-party libraries, but you can also make your own!</p>

<p>This code makes a list of the differences between consecutive values in a sequence.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">current</span> <span class="o">=</span> <span class="n">readings</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="k">for</span> <span class="n">next_item</span> <span class="ow">in</span> <span class="n">readings</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>
</span><span class='line'>    <span class="n">differences</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">next_item</span> <span class="o">-</span> <span class="n">current</span><span class="p">)</span>
</span><span class='line'>    <span class="n">current</span> <span class="o">=</span> <span class="n">next_item</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that this code has an extra variable that we need to assign each time we loop.
Also note that this code only works with things we can slice, like sequences.  If <code>readings</code> were a generator, a zip object, or any other type of iterator this code would fail.</p>

<p>Let&rsquo;s write a helper function to fix our code.</p>

<p>This is a generator function that gives us the current item and the item following it for every item in a given iterable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">with_next</span><span class="p">(</span><span class="n">iterable</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Yield (current, next_item) tuples for each item in iterable.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">iterator</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">iterable</span><span class="p">)</span>
</span><span class='line'>    <span class="n">current</span> <span class="o">=</span> <span class="nb">next</span><span class="p">(</span><span class="n">iterator</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">next_item</span> <span class="ow">in</span> <span class="n">iterator</span><span class="p">:</span>
</span><span class='line'>        <span class="k">yield</span> <span class="n">current</span><span class="p">,</span> <span class="n">next_item</span>
</span><span class='line'>        <span class="n">current</span> <span class="o">=</span> <span class="n">next_item</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;re manually getting an iterator from our iterable, calling <code>next</code> on it to grab the first item, and then looping over our iterator to get all subsequent items, keeping track of our last item along the way.
This function works not just with sequences, but with any type of iterable</p>

<p>This is the same code but we&rsquo;re using our helper function instead of manually keeping track of <code>next_item</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">differences</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">current</span><span class="p">,</span> <span class="n">next_item</span> <span class="ow">in</span> <span class="n">with_next</span><span class="p">(</span><span class="n">readings</span><span class="p">):</span>
</span><span class='line'>    <span class="n">differences</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">next_item</span> <span class="o">-</span> <span class="n">current</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that this code doesn&rsquo;t have awkward assignments to <code>next_item</code> hanging around our loop.
The <code>with_next</code> generator function handles the work of keeping track of <code>next_item</code> for us.</p>

<p>Also note that this code has been compacted enough that we could even <a href="http://treyhunner.com/2015/12/python-list-comprehensions-now-in-color/">copy-paste our way into a list comprehension</a> if we wanted to.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">differences</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">(</span><span class="n">next_item</span> <span class="o">-</span> <span class="n">current</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">current</span><span class="p">,</span> <span class="n">next_item</span> <span class="ow">in</span> <span class="n">with_next</span><span class="p">(</span><span class="n">readings</span><span class="p">)</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Looping Gotchas: Revisited</h2>

<p>At this point we&rsquo;re ready to jump back to those odd examples we saw earlier and try to figure out what was going on.</p>

<h3>Gotcha 1: Exhausting an Iterator</h3>

<p>Here we have a generator object, <code>squares</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">squares</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we pass this generator to the <code>tuple</code> constructor, we&rsquo;ll get a tuple of its items back:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">squares</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">tuple</span><span class="p">(</span><span class="n">squares</span><span class="p">)</span>
</span><span class='line'><span class="go">(1, 4, 9, 25, 49)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we then try to compute the <code>sum</code> of the numbers in this generator, we&rsquo;ll get <code>0</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">sum</span><span class="p">(</span><span class="n">squares</span><span class="p">)</span>
</span><span class='line'><span class="go">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>This generator is now empty: we&rsquo;ve exhausted it.
If we try to make a tuple out of it again, we&rsquo;ll get an empty tuple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">tuple</span><span class="p">(</span><span class="n">squares</span><span class="p">)</span>
</span><span class='line'><span class="go">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Generators are iterators.
And iterators are single-use iterables.
They&rsquo;re like Hello Kitty PEZ dispensers that cannot be reloaded.</p>

<h3>Gotcha 2: Partially-Consuming an Iterator</h3>

<p>Again we have a generator object, <code>squares</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">squares</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we ask whether <code>9</code> is in this <code>squares</code> generator, we&rsquo;ll get <code>True</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="mi">9</span> <span class="ow">in</span> <span class="n">squares</span>
</span><span class='line'><span class="go">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>But if we ask the same question again, we&rsquo;ll get <code>False</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="mi">9</span> <span class="ow">in</span> <span class="n">squares</span>
</span><span class='line'><span class="go">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we ask whether <code>9</code> is in this generator, Python has to loop over this generator to find <code>9</code>.
If we kept looping over it after checking for <code>9</code>, we&rsquo;ll only get the last two numbers because we&rsquo;ve already consumed the numbers before this point:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">squares</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="mi">9</span> <span class="ow">in</span> <span class="n">squares</span>
</span><span class='line'><span class="go">True</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">squares</span><span class="p">)</span>
</span><span class='line'><span class="go">[25, 49]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Asking whether something is <em>contained</em> in an iterator will partially consume the iterator.
There is no way to know whether something is in an iterator without starting to loop over it.</p>

<h3>Gotcha 3: Unpacking is iteration</h3>

<p>When you <em>loop</em> over dictionaries you get keys:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">counts</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;apples&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s">&#39;oranges&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">counts</span><span class="p">:</span>
</span><span class='line'><span class="gp">... </span>    <span class="k">print</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="go">apples</span>
</span><span class='line'><span class="go">oranges</span>
</span></code></pre></td></tr></table></div></figure>


<p>You also get keys when you unpack a dictionary:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">counts</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">x</span><span class="p">,</span> <span class="n">y</span>
</span><span class='line'><span class="go">(&#39;apples&#39;, &#39;oranges&#39;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looping relies on the iterator protocol.
Iterable unpacking also relies on the iterator protocol.
Unpacking a dictionary is really the same as looping over the dictionary.
Both use the iterator protocol, so you get the same result in both cases.</p>

<h2>Recap and related resources</h2>

<p>Sequences are iterables, but not all iterables are sequences.
When someone says the word &ldquo;iterable&rdquo; you can only assume they mean &ldquo;something that you can iterate over&rdquo;.  Don&rsquo;t assume iterables can be looped over twice, asked for their length, or indexed.</p>

<p>Iterators are the most rudimentary form of iterables in Python.
If you&rsquo;d like to make a lazy iterable in your code think of iterators and consider making a generator function or a generator expression.</p>

<p>And finally, remember that every type of iteration in Python relies on the iterator protocol so understanding the iterator protocol is the key to understanding quite a bit about looping in Python in general.</p>

<p>Here are some related articles and videos I recommend:</p>

<ul>
<li><a href="https://nedbatchelder.com/text/iter.html">Loop Like a Native</a>, Ned Batchelder&rsquo;s PyCon 2013 talk</li>
<li><a href="https://www.youtube.com/watch?v=V2PkkMS2Ack">Loop Better</a>, the talk this article is based on</li>
<li><a href="http://treyhunner.com/2016/12/python-iterator-protocol-how-for-loops-work/">The Iterator Protocol: How For Loops Work</a>, a short article I wrote on the iterator protocol</li>
<li><a href="https://www.youtube.com/watch?v=5_cJIcgM7rw">Comprehensible Comprehensions</a>, my talk on comprehensions and generator expressions</li>
<li><a href="http://treyhunner.com/2018/02/python-range-is-not-an-iterator/">Python: range is not an iterator</a>, my article on range and iterators</li>
<li><a href="https://www.youtube.com/watch?v=u8g9scXeAcI">Looping Like a Pro in Python</a>, DB&rsquo;s PyCon 2017 talk</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python built-ins worth learning]]></title>
    <link href="https://treyhunner.com/2019/05/python-builtins-worth-learning/"/>
    <updated>2019-05-21T08:40:00-07:00</updated>
    <id>https://treyhunner.com/2019/05/python-builtins-worth-learning</id>
    <content type="html"><![CDATA[<p>In every Intro to Python class I teach, there&rsquo;s always at least one &ldquo;how can we be expected to know all this&rdquo; question.</p>

<p>It&rsquo;s usually along the lines of either:</p>

<ol>
<li>Python has so many functions in it, what&rsquo;s the best way to remember all these?</li>
<li>What&rsquo;s the best way to learn the functions we&rsquo;ll need day-to-day like <code>enumerate</code> and <code>range</code>?</li>
<li>How do you know about all the ways to solve problems in Python?  Do you memorize them?</li>
</ol>


<p>There are dozens of built-in functions and classes, hundreds of tools bundled in Python&rsquo;s <a href="https://docs.python.org/3/library/index.html">standard library</a>, and thousands of third-party libraries on PyPI.
There&rsquo;s no way anyone could ever memorize all of these things.</p>

<p>I recommend triaging your knowledge:</p>

<ol>
<li>Things I should memorize such that I know them well</li>
<li>Things I should know <em>about</em> so I can look them up more effectively later</li>
<li>Things I shouldn&rsquo;t bother with at all until/unless I need them one day</li>
</ol>


<p>We&rsquo;re going to look through the <a href="https://docs.python.org/3/library/functions.html">Built-in Functions page</a> in the Python documentation with this approach in mind.</p>

<p>This will be a very long article, so I&rsquo;ve linked to 5 sub-sections and 20 specific built-in functions in the next section so you can jump ahead if you&rsquo;re pressed for time or looking for one built-in in particular.</p>

<div style="display: none;"><ol data-toc=".entry-content" data-toc-headings="h2,h3,h4"></ol></div>


<h2>Which built-ins should you know about?</h2>

<p>I estimate <strong>most Python developers will only ever need about 30 built-in functions</strong>, but which 30 depends on what you&rsquo;re actually doing with Python.</p>

<p>We&rsquo;re going to take a look at all 69 of Python&rsquo;s built-in functions, in a birds eye view sort of way.</p>

<p>I&rsquo;ll attempt to categorize these built-ins into five categories:</p>

<ol>
<li><strong><a href="#10_Commonly_known_built-in_functions">Commonly known</a></strong>: most newer Pythonistas get exposure to these built-ins pretty quickly out of necessity</li>
<li><strong><a href="#Built-ins_overlooked_by_new_Pythonistas">Overlooked by beginners</a></strong>: these functions are useful to know about, but they&rsquo;re easy to overlook when you&rsquo;re newer to Python</li>
<li><strong><a href="#Learn_it_later">Learn it later</a></strong>: these built-ins are generally useful to know about, but you&rsquo;ll find them when/if you need them</li>
<li><strong><a href="#Maybe_learn_it_eventually">Maybe learn it eventually</a></strong>: these can come in handy, but only in specific circumstances</li>
<li><strong><a href="#You_likely_don%E2%80%99t_need_these">You likely don&rsquo;t need these</a></strong>: you&rsquo;re unlikely to need these unless you&rsquo;re doing something fairly specialized</li>
</ol>


<p>The built-in functions in categories 1 and 2 are the <strong>essential built-ins</strong> that nearly all Python programmers should eventually learn about.
The built-ins in categories 3 and 4 are the <strong>specialized built-ins</strong>, which are often very useful but your need for them will vary based on your use for Python.
And category 5 are <strong>arcane built-ins</strong>, which might be very handy when you need them but which many Python programmers are likely to never need.</p>

<p><strong>Note for pedantic Pythonistas</strong>: I will be referring to all of these built-ins as <strong>functions</strong>, even though 27 of them <strong>aren&rsquo;t actually functions</strong> (as discussed in my <a href="https://treyhunner.com/2019/04/is-it-a-class-or-a-function-its-a-callable/#The_distinction_between_functions_and_classes_often_doesn%E2%80%99t_matter">functions and callables article</a>).</p>

<p>The commonly known built-in functions (which you likely already know about):</p>

<ol>
<li><a href="#print">print</a></li>
<li><a href="#len">len</a></li>
<li><a href="#str">str</a></li>
<li><a href="#int">int</a></li>
<li><a href="#float">float</a></li>
<li><a href="#list">list</a></li>
<li><a href="#tuple">tuple</a></li>
<li><a href="#dict">dict</a></li>
<li><a href="#set">set</a></li>
<li><a href="#range">range</a></li>
</ol>


<p>The built-in functions which are often overlooked by newer Python programmers:</p>

<ol>
<li><a href="#sum">sum</a></li>
<li><a href="#enumerate">enumerate</a></li>
<li><a href="#zip">zip</a></li>
<li><a href="#bool">bool</a></li>
<li><a href="#reversed">reversed</a></li>
<li><a href="#sorted">sorted</a></li>
<li><a href="#min_and_max">min</a></li>
<li><a href="#min_and_max">max</a></li>
<li><a href="#any_and_all">any</a></li>
<li><a href="#any_and_all">all</a></li>
</ol>


<p>There are also <a href="#The_5_debugging_functions">5 commonly overlooked built-ins</a> which I recommend knowing about solely because they make debugging easier: <code>dir</code>, <code>vars</code>, <code>breakpoint</code>, <code>type</code>, <code>help</code>.</p>

<p>In addition to the 25 built-in functions above, we&rsquo;ll also briefly see the other 44 built-ins in the <a href="#Learn_it_later">learn it later</a> <a href="#Maybe_learn_it_eventually">maybe learn it eventually</a> and <a href="#You_likely_don%E2%80%99t_need_these">you likely don&rsquo;t need these</a> sections.</p>

<h2>10 Commonly known built-in functions</h2>

<p>If you&rsquo;ve been writing Python code, these built-ins are likely familiar already.</p>

<h3>print</h3>

<p>You already know the <code>print</code> function.
Implementing <a href="https://en.wikipedia.org/wiki/Hello_world_program">hello world</a> requires <code>print</code>.</p>

<p>You may not know about the various <a href="https://treyhunner.com/2018/04/keyword-arguments-in-python/">keyword arguments</a> accepted by <code>print</code> though:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">words</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;Welcome&quot;</span><span class="p">,</span> <span class="s">&quot;to&quot;</span><span class="p">,</span> <span class="s">&quot;Python&quot;</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">words</span><span class="p">)</span>
</span><span class='line'><span class="go">[&#39;Welcome&#39;, &#39;to&#39;, &#39;Python&#39;]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="o">*</span><span class="n">words</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s">&quot;!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="go">Welcome to Python!</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="o">*</span><span class="n">words</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="go">Welcome</span>
</span><span class='line'><span class="go">to</span>
</span><span class='line'><span class="go">Python</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can look up <code>print</code> on your own.</p>

<h3>len</h3>

<p>In Python, we don&rsquo;t write things like <code>my_list.length()</code> or <code>my_string.length</code>;
instead we strangely (for new Pythonistas at least) say <code>len(my_list)</code> and <code>len(my_string)</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">words</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;Welcome&quot;</span><span class="p">,</span> <span class="s">&quot;to&quot;</span><span class="p">,</span> <span class="s">&quot;Python&quot;</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">len</span><span class="p">(</span><span class="n">words</span><span class="p">)</span>
</span><span class='line'><span class="go">3</span>
</span></code></pre></td></tr></table></div></figure>


<p>Regardless of whether you like this operator-like <code>len</code> function, you&rsquo;re stuck with it so you&rsquo;ll need to get used to it.</p>

<h3>str</h3>

<p>Unlike many other programming languages, you cannot concatenate strings and numbers in Python.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">version</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="s">&quot;Python &quot;</span> <span class="o">+</span> <span class="n">version</span>
</span><span class='line'><span class="gt">Traceback (most recent call last):</span>
</span><span class='line'>  File <span class="nb">&quot;&lt;stdin&gt;&quot;</span>, line <span class="m">1</span>, in <span class="n">&lt;module&gt;</span>
</span><span class='line'><span class="gr">TypeError</span>: <span class="n">can only concatenate str (not &quot;int&quot;) to str</span>
</span></code></pre></td></tr></table></div></figure>


<p>Python refuses to coerce that <code>3</code> integer to a string, so we need to manually do it ourselves, using the built-in <code>str</code> function (class technically, but as I said, I&rsquo;ll be calling these all functions):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">version</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="s">&quot;Python &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">version</span><span class="p">)</span>
</span><span class='line'><span class="go">&#39;Python 3&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>int</h3>

<p>Do you have user input and need to convert it to a number?
You need the <code>int</code> function!</p>

<p>The <code>int</code> function can convert strings to integers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">program_name</span> <span class="o">=</span> <span class="s">&quot;Python 3&quot;</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">version_number</span> <span class="o">=</span> <span class="n">program_name</span><span class="o">.</span><span class="n">split</span><span class="p">()[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">int</span><span class="p">(</span><span class="n">version_number</span><span class="p">)</span>
</span><span class='line'><span class="go">3</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also use <code>int</code> to truncate a floating point number to an integer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">sqrt</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">sqrt</span><span class="p">(</span><span class="mi">28</span><span class="p">)</span>
</span><span class='line'><span class="go">5.291502622129181</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">int</span><span class="p">(</span><span class="n">sqrt</span><span class="p">(</span><span class="mi">28</span><span class="p">))</span>
</span><span class='line'><span class="go">5</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that if you need to truncate while dividing, the <code>//</code> operator is likely more appropriate (though this works differently with negative numbers): <code>int(3 / 2) == 3 // 2</code>.</p>

<h3>float</h3>

<p>Is the string you&rsquo;re converting to a number not actually an integer?
Then you&rsquo;ll want to use <code>float</code> instead of <code>int</code> for this conversion.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">program_name</span> <span class="o">=</span> <span class="s">&quot;Python 3&quot;</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">version_number</span> <span class="o">=</span> <span class="n">program_name</span><span class="o">.</span><span class="n">split</span><span class="p">()[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">float</span><span class="p">(</span><span class="n">version_number</span><span class="p">)</span>
</span><span class='line'><span class="go">3.0</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">pi_digits</span> <span class="o">=</span> <span class="s">&#39;3.141592653589793238462643383279502884197169399375&#39;</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">len</span><span class="p">(</span><span class="n">pi_digits</span><span class="p">)</span>
</span><span class='line'><span class="go">50</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">float</span><span class="p">(</span><span class="n">pi_digits</span><span class="p">)</span>
</span><span class='line'><span class="go">3.141592653589793</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also use <code>float</code> to convert integers to floating point numbers.</p>

<p>In Python 2, we used to use <code>float</code> to convert integers to floating point numbers to force float division instead of integer division.
&ldquo;Integer division&rdquo; isn&rsquo;t a thing anymore in Python 3 (unless you&rsquo;re specifically using the <code>//</code> operator), so we don&rsquo;t need <code>float</code> for that purpose anymore.
So if you ever see <code>float(x) / y</code> in your Python 3 code, you can change that to just <code>x / y</code>.</p>

<h3>list</h3>

<p>Want to make a list out of some other iterable?</p>

<p>The <code>list</code> function does that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">squares</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">squares</span>
</span><span class='line'><span class="go">&lt;generator object &lt;genexpr&gt; at 0x7fd52dbd5930&gt;</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">list_of_squares</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">squares</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">list_of_squares</span>
</span><span class='line'><span class="go">[4, 1, 9, 25, 64]</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you know you&rsquo;re working with a list, you could use the <code>copy</code> method to make a new copy of a list:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">copy_of_squares</span> <span class="o">=</span> <span class="n">list_of_squares</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>But if you don&rsquo;t know what the iterable you&rsquo;re working with is, the <code>list</code> function is the more general way to loop over an iterable and copy it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">copy_of_squares</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">list_of_squares</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You could also use a list comprehension for this, <a href="https://treyhunner.com/2019/03/abusing-and-overusing-list-comprehensions-in-python/#Using_comprehensions_when_a_more_specific_tool_exists">but I wouldn&rsquo;t recommend it</a>.</p>

<p>Note that when you want to make an empty list, using the <em>list literal syntax</em> (those <code>[]</code> brackets) is recommended:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">my_list</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>  <span class="c"># Don&#39;t do this</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">my_list</span> <span class="o">=</span> <span class="p">[]</span>  <span class="c"># Do this instead</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using <code>[]</code> is considered more idiomatic since those square brackets (<code>[]</code>) actually <em>look</em> like a Python list.</p>

<h3>tuple</h3>

<p>The <code>tuple</code> function is pretty much just like the <code>list</code> function, except it makes tuples instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">tuple</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span>
</span><span class='line'><span class="go">(2, 1, 3, 4, 7)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you need a tuple instead of a list, because you&rsquo;re trying to make a <a href="https://lerner.co.il/2015/04/03/is-it-hashable-fun-and-games-with-hashing-in-python/">hashable</a> collection for use in a dictionary key for example, you&rsquo;ll want to reach for <code>tuple</code> over <code>list</code>.</p>

<h3>dict</h3>

<p>The <code>dict</code> function makes a new dictionary.</p>

<p>Similar to like <code>list</code> and <code>tuple</code>, the <code>dict</code> function is equivalent to looping over an iterable of key-value pairs and making a dictionary from them.</p>

<p>Given a list of two-item tuples:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">color_counts</span> <span class="o">=</span> <span class="p">[(</span><span class="s">&#39;red&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;green&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;blue&#39;</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;purple&#39;</span><span class="p">,</span> <span class="mi">5</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">colors</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">color</span><span class="p">,</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">color_counts</span><span class="p">:</span>
</span><span class='line'><span class="gp">... </span>    <span class="n">colors</span><span class="p">[</span><span class="n">color</span><span class="p">]</span> <span class="o">=</span> <span class="n">n</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">colors</span>
</span><span class='line'><span class="go">{&#39;red&#39;: 2, &#39;green&#39;: 1, &#39;blue&#39; 3, &#39;purple&#39;: 5}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Can instead be done with the <code>dict</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">colors</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">color_counts</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">colors</span>
</span><span class='line'><span class="go">{&#39;red&#39;: 2, &#39;green&#39;: 1, &#39;blue&#39; 3, &#39;purple&#39;: 5}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>dict</code> function accepts two types of arguments:</p>

<ol>
<li><strong>another dictionary</strong> (<a href="https://docs.python.org/3/glossary.html#term-mapping">mapping</a> is the generic term), in which case that dictionary will be copied</li>
<li><strong>a list of key-value tuples</strong> (more correctly, an iterable of two-item iterables), in which case a new dictionary will be constructed from these</li>
</ol>


<p>So this works as well:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">colors</span>
</span><span class='line'><span class="go">{&#39;red&#39;: 2, &#39;green&#39;: 1, &#39;blue&#39; 3, &#39;purple&#39;: 5}</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">new_dictionary</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">colors</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">new_dictionary</span>
</span><span class='line'><span class="go">{&#39;red&#39;: 2, &#39;green&#39;: 1, &#39;blue&#39; 3, &#39;purple&#39;: 5}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>dict</code> function can also accept keyword arguments to make a dictionary with string-based keys:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">person</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#39;Trey Hunner&#39;</span><span class="p">,</span> <span class="n">profession</span><span class="o">=</span><span class="s">&#39;Python Trainer&#39;</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">person</span>
</span><span class='line'><span class="go">{&#39;name&#39;: &#39;Trey Hunner&#39;, &#39;profession&#39;: &#39;Python Trainer&#39;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But I very much prefer to use a dictionary literal instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">person</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;name&#39;</span><span class="p">:</span> <span class="s">&#39;Trey Hunner&#39;</span><span class="p">,</span> <span class="s">&#39;profession&#39;</span><span class="p">:</span> <span class="s">&#39;Python Trainer&#39;</span><span class="p">}</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">person</span>
</span><span class='line'><span class="go">{&#39;name&#39;: &#39;Trey Hunner&#39;, &#39;profession&#39;: &#39;Python Trainer&#39;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The dictionary literal syntax is more flexible and <a href="https://doughellmann.com/blog/2012/11/12/the-performance-impact-of-using-dict-instead-of-in-cpython-2-7-2/">a bit faster</a> but most importantly I find that it more clearly conveys the fact that we are creating a dictionary.</p>

<p>Like with <code>list</code> and <code>tuple</code>, an empty dictionary should be made using the literal syntax as well:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">my_list</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>  <span class="c"># Don&#39;t do this</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">my_list</span> <span class="o">=</span> <span class="p">{}</span>  <span class="c"># Do this instead</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using <code>{}</code> is slightly more CPU efficient, but more importantly it&rsquo;s more idiomatic: it&rsquo;s common to see curly braces (<code>{}</code>) used for making dictionaries but <code>dict</code> is seen much less frequently.</p>

<h3>set</h3>

<p>The <code>set</code> function makes a new set.
It takes an iterable of <a href="https://lerner.co.il/2015/04/03/is-it-hashable-fun-and-games-with-hashing-in-python/">hashable</a> values (strings, numbers, or other immutable types) and returns a <code>set</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">set</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span>
</span><span class='line'><span class="go">{1, 2, 3, 5, 8}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s no way to make an empty set with the <code>{}</code> set literal syntax (plain <code>{}</code> makes a dictionary), so the <code>set</code> function is the only way to make an empty set:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span>
</span><span class='line'><span class="go">set()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Actually that&rsquo;s a lie because we have this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="p">{</span><span class="o">*</span><span class="p">()}</span>  <span class="c"># This makes an empty set</span>
</span><span class='line'><span class="go">set()</span>
</span></code></pre></td></tr></table></div></figure>


<p>But that syntax is confusing (it relies on <a href="https://treyhunner.com/2018/10/asterisks-in-python-what-they-are-and-how-to-use-them/#Asterisks_in_list_literals">a lesser-used feature of the <code>*</code> operator</a>), so I don&rsquo;t recommend it.</p>

<h3>range</h3>

<p>The <code>range</code> function gives us a <code>range</code> object, which represents a range of numbers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="n">_000</span><span class="p">)</span>
</span><span class='line'><span class="go">range(0, 10000)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="n">_000_000_000</span><span class="p">,</span> <span class="mi">1</span><span class="n">_000_000_000</span><span class="p">)</span>
</span><span class='line'><span class="go">range(-1000000000, 1000000000)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The resulting range of numbers includes the start number but excludes the stop number (<code>range(0, 10)</code> does not include <code>10</code>).</p>

<p>The <code>range</code> function is useful when you&rsquo;d like to loop over numbers.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">10</span><span class="p">):</span>
</span><span class='line'><span class="gp">... </span>    <span class="k">print</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="go">0</span>
</span><span class='line'><span class="go">10</span>
</span><span class='line'><span class="go">20</span>
</span><span class='line'><span class="go">30</span>
</span><span class='line'><span class="go">40</span>
</span></code></pre></td></tr></table></div></figure>


<p>A common use case is to do an operation <code>n</code> times (that&rsquo;s a <a href="https://treyhunner.com/2015/12/python-list-comprehensions-now-in-color/">list comprehension</a> by the way):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">first_five</span> <span class="o">=</span> <span class="p">[</span><span class="n">get_things</span><span class="p">()</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Python 2&rsquo;s <code>range</code> function returned a list, which means the expressions above would make very very large lists.
Python 3&rsquo;s <code>range</code> works like Python 2&rsquo;s <code>xrange</code> (though they&rsquo;re <a href="https://treyhunner.com/2018/02/python-3-s-range-better-than-python-2-s-xrange/">a bit different</a>) in that numbers are <strong>computed lazily</strong> as we loop over these <code>range</code> objects.</p>

<h2>Built-ins overlooked by new Pythonistas</h2>

<p>If you&rsquo;ve been programming Python for a bit or if you just taken an introduction to Python class, you probably already knew about the built-in functions above.</p>

<p>I&rsquo;d now like to show off 15 built-in functions that are very handy to know about, but are more frequently overlooked by new Pythonistas.</p>

<p>The first 10 of these functions you&rsquo;ll find floating around in Python code, but the last 5 you&rsquo;ll most often use while debugging.</p>

<h3>bool</h3>

<p>The <code>bool</code> function checks the <strong>truthiness</strong> of a Python object.</p>

<p>For numbers, truthiness is a question of non-zeroness:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">bool</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="go">True</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">bool</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="go">True</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">bool</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="go">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>For collections, truthiness is usually a question of non-emptiness (whether the collection has a length greater than <code>0</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">bool</span><span class="p">(</span><span class="s">&#39;hello&#39;</span><span class="p">)</span>
</span><span class='line'><span class="go">True</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">bool</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="go">False</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">bool</span><span class="p">([</span><span class="s">&#39;a&#39;</span><span class="p">])</span>
</span><span class='line'><span class="go">True</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">bool</span><span class="p">([])</span>
</span><span class='line'><span class="go">False</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">bool</span><span class="p">({})</span>
</span><span class='line'><span class="go">False</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">bool</span><span class="p">({</span><span class="mi">1</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">:</span> <span class="mi">9</span><span class="p">})</span>
</span><span class='line'><span class="go">True</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">bool</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
</span><span class='line'><span class="go">True</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">bool</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
</span><span class='line'><span class="go">False</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">bool</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
</span><span class='line'><span class="go">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>Truthiness (called <a href="https://docs.python.org/3/library/stdtypes.html#truth">truth value testing</a> in the docs) is kind of a big deal in Python.</p>

<p>Instead of asking questions about the length of a container, many Pythonistas ask questions about truthiness instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Instead of doing this</span>
</span><span class='line'><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;The numbers list is empty&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Many of us do this</span>
</span><span class='line'><span class="k">if</span> <span class="ow">not</span> <span class="n">numbers</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;The numbers list is empty&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You likely won&rsquo;t see <code>bool</code> used often, but on the occasion that you need to coerce a value to a boolean to ask about its truthiness, you&rsquo;ll want to know about <code>bool</code>.</p>

<h3>enumerate</h3>

<p>Whenever you need to count upward, one number at a time, while looping over an iterable at the same time, the <code>enumerate</code> function will come in handy.</p>

<p>That might seem like a very niche task, but it comes up quite often.</p>

<p>For example we might want to keep track of the line number in a file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;hello.txt&#39;</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s">&#39;rt&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">my_file</span><span class="p">:</span>
</span><span class='line'><span class="o">...</span>     <span class="k">for</span> <span class="n">n</span><span class="p">,</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">my_file</span><span class="p">,</span> <span class="n">start</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>         <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s">&quot;{n:03}&quot;</span><span class="p">,</span> <span class="n">line</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="mo">001</span> <span class="n">This</span> <span class="ow">is</span> <span class="n">the</span> <span class="n">first</span> <span class="n">line</span> <span class="n">of</span> <span class="n">the</span> <span class="nb">file</span>
</span><span class='line'><span class="mo">002</span> <span class="n">This</span> <span class="ow">is</span> <span class="n">the</span> <span class="n">second</span> <span class="n">line</span>
</span><span class='line'><span class="mo">003</span> <span class="n">This</span> <span class="ow">is</span> <span class="n">the</span> <span class="n">last</span> <span class="n">line</span> <span class="n">of</span> <span class="n">the</span> <span class="nb">file</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>enumerate</code> function is also very commonly used to keep track of the <em>index</em> of items in a sequence.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">palindromic</span><span class="p">(</span><span class="n">sequence</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Return True if the sequence is the same thing in reverse.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">item</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">sequence</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">item</span> <span class="o">!=</span> <span class="n">sequence</span><span class="p">[</span><span class="o">-</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)]:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that you may see newer Pythonistas use <code>range(len(sequence))</code> in Python.
If you ever see code with <code>range(len(...))</code>, you&rsquo;ll almost always want to use <code>enumerate</code> instead.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">palindromic</span><span class="p">(</span><span class="n">sequence</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Return True if the sequence is the same thing in reverse.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">sequence</span><span class="p">)):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">sequence</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">sequence</span><span class="p">[</span><span class="o">-</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)]:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>If <code>enumerate</code> is news to you (or if you often use <code>range(len(...))</code>), see my article on <a href="https://treyhunner.com/2016/04/how-to-loop-with-indexes-in-python/">looping with indexes in Python</a>.</p>

<h3>zip</h3>

<p>The <code>zip</code> function is even more specialized than <code>enumerate</code>.</p>

<p>The <code>zip</code> function is used for looping over multiple iterables at the same time.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">one_iterable</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">another_iterable</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;P&#39;</span><span class="p">,</span> <span class="s">&#39;y&#39;</span><span class="p">,</span> <span class="s">&#39;t&#39;</span><span class="p">,</span> <span class="s">&#39;h&#39;</span><span class="p">,</span> <span class="s">&#39;o&#39;</span><span class="p">,</span> <span class="s">&#39;n&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">n</span><span class="p">,</span> <span class="n">letter</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">one_iterable</span><span class="p">,</span> <span class="n">another_iterable</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>     <span class="k">print</span><span class="p">(</span><span class="n">letter</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="n">P</span> <span class="mi">2</span>
</span><span class='line'><span class="n">y</span> <span class="mi">1</span>
</span><span class='line'><span class="n">t</span> <span class="mi">3</span>
</span><span class='line'><span class="n">h</span> <span class="mi">4</span>
</span><span class='line'><span class="n">o</span> <span class="mi">7</span>
</span><span class='line'><span class="n">n</span> <span class="mi">11</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you ever have to loop over two lists (or any other iterables) at the same time, <code>zip</code> is preferred over <code>enumerate</code>.
The <code>enumerate</code> function is handy when you need indexes while looping, but <code>zip</code> is great when we care specifically about looping over two iterables at once.</p>

<p>If you&rsquo;re new to <code>zip</code>, I also talk about it in my <a href="https://treyhunner.com/2016/04/how-to-loop-with-indexes-in-python/#What_if_we_need_to_loop_over_multiple_things?">looping with indexes</a> article.</p>

<p>Both <code>enumerate</code> and <code>zip</code> return iterators to us.
Iterators are the lazy iterables that <a href="https://treyhunner.com/2016/12/python-iterator-protocol-how-for-loops-work/">power <code>for</code> loops</a>.
I have <a href="https://youtu.be/JYuE8ZiDPl4">a whole talk on iterators</a> as well as a somewhat advanced article on <a href="https://treyhunner.com/2018/06/how-to-make-an-iterator-in-python/">how to make your own iterators</a>.</p>

<p>By the way, if you need to use <code>zip</code> on iterables of different lengths, you may want to look up <a href="https://docs.python.org/3/library/itertools.html#itertools.zip_longest">itertools.zip_longest</a> in the Python standard library.</p>

<h3>reversed</h3>

<p>The <code>reversed</code> function, like <code>enumerate</code> and <code>zip</code>, returns an <a href="https://treyhunner.com/2016/12/python-iterator-protocol-how-for-loops-work/">iterator</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">reversed</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span>
</span><span class='line'><span class="go">&lt;list_reverseiterator object at 0x7f3d4452f8d0&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only thing we can do with this iterator is loop over it (but only once):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">reversed_numbers</span> <span class="o">=</span> <span class="nb">reversed</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">reversed_numbers</span><span class="p">)</span>
</span><span class='line'><span class="go">[7, 4, 3, 1, 2]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">reversed_numbers</span><span class="p">)</span>
</span><span class='line'><span class="go">[]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Like <code>enumerate</code> and <code>zip</code>, <code>reversed</code> is a sort of <strong>looping helper function</strong>.
You&rsquo;ll pretty much see <code>reversed</code> used exclusively in the <code>for</code> part of a <code>for</code> loop:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">reversed</span><span class="p">(</span><span class="n">numbers</span><span class="p">):</span>
</span><span class='line'><span class="gp">... </span>    <span class="k">print</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="go">7</span>
</span><span class='line'><span class="go">4</span>
</span><span class='line'><span class="go">3</span>
</span><span class='line'><span class="go">1</span>
</span><span class='line'><span class="go">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are some other ways to reverse Python lists besides the <code>reversed</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Slicing syntax</span>
</span><span class='line'><span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># In-place reverse method</span>
</span><span class='line'><span class="n">numbers</span><span class="o">.</span><span class="n">reverse</span><span class="p">()</span>
</span><span class='line'><span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>But the <code>reversed</code> function is <strong>usually the best way to reverse any iterable</strong> in Python.</p>

<p>Unlike the list <code>reverse</code> method (e.g. <code>numbers.reverse()</code>), <code>reversed</code> doesn&rsquo;t mutate the list (it returns an iterator of the reversed items instead).</p>

<p>Unlike the <code>numbers[::-1]</code> slice syntax, <code>reversed(numbers)</code> doesn&rsquo;t build up a whole new list: the lazy iterator it returns retrieves the next item in reverse as we loop.
Also <code>reversed(numbers)</code> is a lot more readable than <code>numbers[::-1]</code> (which just looks weird if you&rsquo;ve never seen that particular use of slicing before).</p>

<p>If we combine the non-copying nature of the <code>reversed</code> and <code>zip</code> functions, we can rewrite the <code>palindromic</code> function (from <a href="#enumerate">enumerate</a> above) without taking any extra memory (no copying of lists is done here):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">palindromic</span><span class="p">(</span><span class="n">sequence</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Return True if the sequence is the same thing in reverse.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">sequence</span><span class="p">,</span> <span class="nb">reversed</span><span class="p">(</span><span class="n">sequence</span><span class="p">)):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">n</span> <span class="o">!=</span> <span class="n">m</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<h3>sum</h3>

<p>The <code>sum</code> function takes an iterable of numbers and returns the sum of those numbers.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">sum</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">])</span>
</span><span class='line'><span class="go">17</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s not much more to it than that.</p>

<p>Python has lots of helper functions that <strong>do the looping for you</strong>, partly because they pair nicely with generator expressions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">18</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">sum</span><span class="p">(</span><span class="n">n</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">)</span>
</span><span class='line'><span class="go">524</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re curious about generator expressions, I discuss them in my <a href="https://youtu.be/5_cJIcgM7rw">Comprehensible Comprehensions</a> talk (and my <a href="https://pycon2018.trey.io">3 hour tutorial on comprehensions and generator expressions</a>).</p>

<h3>min and max</h3>

<p>The <code>min</code> and <code>max</code> functions do what you&rsquo;d expect: they give you the minimum and maximum items in an iterable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">18</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">min</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span>
</span><span class='line'><span class="go">1</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">max</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span>
</span><span class='line'><span class="go">18</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>min</code> and <code>max</code> functions compare the items given to them by using the <code>&lt;</code> operator.
So all values need to be orderable and comparable to each other (fortunately <a href="https://treyhunner.com/2019/03/python-deep-comparisons-and-code-readability/">many objects are orderable in Python</a>).</p>

<p>The <code>min</code> and <code>max</code> functions also accept <a href="https://treyhunner.com/2019/03/python-deep-comparisons-and-code-readability/#Sorting_by_multiple_attributes_at_once">a <code>key</code> function</a> to allow customizing what &ldquo;minimum&rdquo; and &ldquo;maximum&rdquo; really mean for specific objects.</p>

<h3>sorted</h3>

<p>The <code>sorted</code> function takes any iterable and returns a new list of all the values in that iterable in sorted order.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">words</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;python&quot;</span><span class="p">,</span> <span class="s">&quot;is&quot;</span><span class="p">,</span> <span class="s">&quot;lovely&quot;</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">sorted</span><span class="p">(</span><span class="n">words</span><span class="p">)</span>
</span><span class='line'><span class="go">[&#39;is&#39;, &#39;lovely&#39;, &#39;python&#39;]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">sorted</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'><span class="go">[13, 8, 5, 3, 2, 1, 1]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>sorted</code> function, like <code>min</code> and <code>max</code>, compares the items given to it by using the <code>&lt;</code> operator, so all values given to it need so to be orderable.</p>

<p>The <code>sorted</code> function also allows customization of its sorting via <a href="https://treyhunner.com/2019/03/python-deep-comparisons-and-code-readability/#Sorting_by_multiple_attributes_at_once">a <code>key</code> function</a> (just like <code>min</code> and <code>max</code>).</p>

<p>By the way, if you&rsquo;re curious about <code>sorted</code> versus the <code>list.sort</code> method, Florian Dahlitz wrote <a href="https://blog.usejournal.com/list-sort-vs-sorted-list-aab92c00e17">an article comparing the two</a>.</p>

<h3>any and all</h3>

<p>The <code>any</code> and <code>all</code> functions can be paired with a generator expression to determine whether <em>any</em> or <em>all</em> items in an iterable <strong>match a given condition</strong>.</p>

<p>Our <code>palindromic</code> function from earlier checked whether <em>all</em> items were equal to their corresponding item in the reversed sequence (is the first value equal to the last, second to the second from last, etc.).</p>

<p>We could rewrite <code>palindromic</code> using <code>all</code> like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">palindromic</span><span class="p">(</span><span class="n">sequence</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Return True if the sequence is the same thing in reverse.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">all</span><span class="p">(</span>
</span><span class='line'>        <span class="n">n</span> <span class="o">==</span> <span class="n">m</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">sequence</span><span class="p">,</span> <span class="nb">reversed</span><span class="p">(</span><span class="n">sequence</span><span class="p">))</span>
</span><span class='line'>    <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Negating the condition and the return value from <code>all</code> would allow us to use <code>any</code> equivalently (though this is more confusing in this example):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">palindromic</span><span class="p">(</span><span class="n">sequence</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Return True if the sequence is the same thing in reverse.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="ow">not</span> <span class="nb">any</span><span class="p">(</span>
</span><span class='line'>        <span class="n">n</span> <span class="o">!=</span> <span class="n">m</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">sequence</span><span class="p">,</span> <span class="nb">reversed</span><span class="p">(</span><span class="n">sequence</span><span class="p">))</span>
</span><span class='line'>    <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the <code>any</code> and <code>all</code> functions are new to you, you may want to read my article on them: <a href="https://treyhunner.com/2016/11/check-whether-all-items-match-a-condition-in-python/">Checking Whether All Items Match a Condition in Python</a>.</p>

<h3>The 5 debugging functions</h3>

<p>The following 5 functions will be useful for debugging and troubleshooting code.</p>

<h4>breakpoint</h4>

<p>Need to pause the execution of your code and drop into a Python command prompt?
You need <code>breakpoint</code>!</p>

<p>Calling the <code>breakpoint</code> function will drop you into <a href="https://pymotw.com/3/pdb/">pdb</a>, the Python debugger.
There are many tutorials and talks out there on PDB: here&rsquo;s <a href="https://pyvideo.org/pybay-2017/introduction-to-pdb.html">a short one</a> and here&rsquo;s <a href="https://www.youtube.com/watch?v=P0pIW5tJrRM&amp;feature=player_embedded">a long one</a>.</p>

<p>This built-in function was <strong>added in Python 3.7</strong>, but if you&rsquo;re on older versions of Python you can get the same behavior with <code>import pdb ; pdb.set_trace()</code>.</p>

<h4>dir</h4>

<p>The <code>dir</code> function can be used for two things:</p>

<ol>
<li>Seeing a list of all your local variables</li>
<li>Seeing a list of all attributes on a particular object</li>
</ol>


<p>Here we can see that our local variables, right after starting a new Python shell and then after creating a new variable <code>x</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">dir</span><span class="p">()</span>
</span><span class='line'><span class="go">[&#39;__annotations__&#39;, &#39;__doc__&#39;, &#39;__name__&#39;, &#39;__package__&#39;]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">dir</span><span class="p">()</span>
</span><span class='line'><span class="go">[&#39;__annotations__&#39;, &#39;__doc__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;x&#39;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we pass that <code>x</code> list into <code>dir</code> we can see all the attributes it has:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">dir</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'><span class="go">[&#39;__add__&#39;, &#39;__class__&#39;, &#39;__contains__&#39;, &#39;__delattr__&#39;, &#39;__delitem__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__getitem__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__iadd__&#39;, &#39;__imul__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__iter__&#39;, &#39;__le__&#39;, &#39;__len__&#39;, &#39;__lt__&#39;, &#39;__mul__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__reversed__&#39;, &#39;__rmul__&#39;, &#39;__setattr__&#39;, &#39;__setitem__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;append&#39;, &#39;clear&#39;, &#39;copy&#39;, &#39;count&#39;, &#39;extend&#39;, &#39;index&#39;, &#39;insert&#39;, &#39;pop&#39;, &#39;remove&#39;, &#39;reverse&#39;, &#39;sort&#39;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can see the typical list methods, <code>append</code>, <code>pop</code>, <code>remove</code>, and more as well as many dunder methods for operator overloading.</p>

<h4>vars</h4>

<p>The <a href="https://docs.python.org/3/library/functions.html#vars">vars</a> function is sort of a mashup of two related things: checking <code>locals()</code> and testing the <code>__dict__</code> attribute of objects.</p>

<p>When <code>vars</code> is called with no arguments, it&rsquo;s equivalent to calling the <code>locals()</code> built-in function (which shows a dictionary of all local variables and their values).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">vars</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span><span class="s">&#39;__name__&#39;</span><span class="p">:</span> <span class="s">&#39;__main__&#39;</span><span class="p">,</span> <span class="s">&#39;__doc__&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span> <span class="s">&#39;__package__&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span> <span class="s">&#39;__loader__&#39;</span><span class="p">:</span> <span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">_frozen_importlib</span><span class="o">.</span><span class="n">BuiltinImporter</span><span class="s">&#39;&gt;, &#39;</span><span class="n">__spec__</span><span class="s">&#39;: None, &#39;</span><span class="n">__annotations__</span><span class="s">&#39;: {}, &#39;</span><span class="n">__builtins__</span><span class="s">&#39;: &lt;module &#39;</span><span class="n">builtins</span><span class="s">&#39; (built-in)&gt;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When it&rsquo;s called with an argument, it accesses the <code>__dict__</code> attribute on that object (which on many objects represents a dictionary of all instance attributes).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">chain</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">vars</span><span class="p">(</span><span class="n">chain</span><span class="p">)</span>
</span><span class='line'><span class="n">mappingproxy</span><span class="p">({</span><span class="s">&#39;__getattribute__&#39;</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">slot</span> <span class="n">wrapper</span> <span class="s">&#39;__getattribute__&#39;</span> <span class="n">of</span> <span class="s">&#39;itertools.chain&#39;</span> <span class="n">objects</span><span class="o">&gt;</span><span class="p">,</span> <span class="s">&#39;__iter__&#39;</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">slot</span> <span class="n">wrapper</span> <span class="s">&#39;__iter__&#39;</span> <span class="n">of</span> <span class="s">&#39;itertools.chain&#39;</span> <span class="n">objects</span><span class="o">&gt;</span><span class="p">,</span> <span class="s">&#39;__next__&#39;</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">slot</span> <span class="n">wrapper</span> <span class="s">&#39;__next__&#39;</span> <span class="n">of</span> <span class="s">&#39;itertools.chain&#39;</span> <span class="n">objects</span><span class="o">&gt;</span><span class="p">,</span> <span class="s">&#39;__new__&#39;</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">built</span><span class="o">-</span><span class="ow">in</span> <span class="n">method</span> <span class="n">__new__</span> <span class="n">of</span> <span class="nb">type</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x5611ee76fac0</span><span class="o">&gt;</span><span class="p">,</span> <span class="s">&#39;from_iterable&#39;</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">method</span> <span class="s">&#39;from_iterable&#39;</span> <span class="n">of</span> <span class="s">&#39;itertools.chain&#39;</span> <span class="n">objects</span><span class="o">&gt;</span><span class="p">,</span> <span class="s">&#39;__reduce__&#39;</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">method</span> <span class="s">&#39;__reduce__&#39;</span> <span class="n">of</span> <span class="s">&#39;itertools.chain&#39;</span> <span class="n">objects</span><span class="o">&gt;</span><span class="p">,</span> <span class="s">&#39;__setstate__&#39;</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">method</span> <span class="s">&#39;__setstate__&#39;</span> <span class="n">of</span> <span class="s">&#39;itertools.chain&#39;</span> <span class="n">objects</span><span class="o">&gt;</span><span class="p">,</span> <span class="s">&#39;__doc__&#39;</span><span class="p">:</span> <span class="s">&#39;chain(*iterables) --&gt; chain object</span><span class="se">\n\n</span><span class="s">Return a chain object whose .__next__() method returns elements from the</span><span class="se">\n</span><span class="s">first iterable until it is exhausted, then elements from the next</span><span class="se">\n</span><span class="s">iterable, until all of the iterables are exhausted.&#39;</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you ever try to use <code>my_object.__dict__</code>, you can use <code>vars</code> instead.</p>

<p>I usually reach for <code>dir</code> just before using <code>vars</code>.</p>

<h4>type</h4>

<p>The <code>type</code> function will tell you the type of the object you pass to it.</p>

<p>The type of a class instance is the class itself:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">type</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'><span class="go">&lt;class &#39;list&#39;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The type of a class is its metaclass, which is usually <code>type</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">type</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</span><span class='line'><span class="go">&lt;class &#39;type&#39;&gt;</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">type</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
</span><span class='line'><span class="go">&lt;class &#39;type&#39;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you ever see someone reach for <code>__class__</code>, know that they could reach for the higher-level <code>type</code> function instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">x</span><span class="o">.</span><span class="n">__class__</span>
</span><span class='line'><span class="go">&lt;class &#39;list&#39;&gt;</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">type</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'><span class="go">&lt;class &#39;list&#39;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>type</code> function is sometimes helpful in actual code (especially object-oriented code with inheritance and custom string representations), but it&rsquo;s also useful when debugging.</p>

<p>Note that when <em>type checking</em>, the <code>isinstance</code> function is usually used instead of <code>type</code> (also note that we tend not to type check in Python because we prefer to practice <a href="https://en.wikipedia.org/wiki/Duck_typing">duck typing</a>).</p>

<h4>help</h4>

<p>If you&rsquo;re in an interactive Python shell (the Python <a href="https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">REPL</a> as I usually call it), maybe debugging code using <code>breakpoint</code>, and you&rsquo;d like to know how a certain object, method, or attribute works, the <code>help</code> function will come in handy.</p>

<p>Realistically, you&rsquo;ll likely resort to getting help from your favorite search engine more often than using <code>help</code>.
But if you&rsquo;re already in a Python REPL, it&rsquo;s quicker to call <code>help(list.insert)</code> than it would be to look up the <code>list.insert</code> method documentation in Google.</p>

<h2>Learn it later</h2>

<p>There are quite a few built-in functions you&rsquo;ll likely want <em>eventually</em>, but you may not need <em>right now</em>.</p>

<p>I&rsquo;m going to mention 14 more built-in functions which are handy to know about, but not worth learning until you actually need to use them.</p>

<h3>open</h3>

<p>Need to open a file in Python?
You need the <code>open</code> function!</p>

<p>Don&rsquo;t work with files directly?
Then you likely don&rsquo;t need the <code>open</code> function!</p>

<p>You might think it&rsquo;s odd that I&rsquo;ve put <code>open</code> in this section because working with files is so common.
While most programmers will read or write to files using <code>open</code> at some point, some Python programmers, such as Django developers, may not use the <code>open</code> function very much (if at all).</p>

<p>Once you need to work with files, you&rsquo;ll learn about <code>open</code>.
Until then, don&rsquo;t worry about it.</p>

<p>By the way, you might want to <a href="https://treyhunner.com/2018/12/why-you-should-be-using-pathlib/">look into pathlib</a> (which is in the Python standard library) as an alternative to using <code>open</code>.
I love the <code>pathlib</code> module so much I&rsquo;ve considered teaching files in Python by mentioning <code>pathlib</code> first and the built-in <code>open</code> function later.</p>

<h3>input</h3>

<p>The <code>input</code> function prompts the user for input, waits for them to hit the Enter key, and then returns the text they typed.</p>

<p>Reading from <a href="https://en.wikipedia.org/wiki/Standard_streams#Standard_input_(stdin)">standard input</a> (which is what the <code>input</code> function does) is one way to get inputs into your Python program, but there are so many other ways too!
You could accept command-line arguments, read from a configuration file, read from a database, and much more.</p>

<p>You&rsquo;ll learn this once you need to prompt the user of a command-line program for input.
Until then, you won&rsquo;t need it.
And if you&rsquo;ve been writing Python for a while and don&rsquo;t know about this function, you may simply never need it.</p>

<h3>repr</h3>

<p>Need the programmer-readable representation of an object?
You need the <code>repr</code> function!</p>

<p>For many objects, the <code>str</code> and <code>repr</code> representations are the same:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">str</span><span class="p">(</span><span class="mi">4</span><span class="p">),</span> <span class="nb">repr</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="go">(&#39;4&#39;, &#39;4&#39;)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">str</span><span class="p">([]),</span> <span class="nb">repr</span><span class="p">([])</span>
</span><span class='line'><span class="go">(&#39;[]&#39;, &#39;[]&#39;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>But for some objects, they&rsquo;re different:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">str</span><span class="p">(</span><span class="s">&#39;hello&#39;</span><span class="p">),</span> <span class="nb">repr</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">)</span>
</span><span class='line'><span class="go">(&#39;hello&#39;, &quot;&#39;hello&#39;&quot;)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">date</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">str</span><span class="p">(</span><span class="n">date</span><span class="p">(</span><span class="mi">2020</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)),</span> <span class="nb">repr</span><span class="p">(</span><span class="n">date</span><span class="p">(</span><span class="mi">2020</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="go">(&#39;2020-01-01&#39;, &#39;datetime.date(2020, 1, 1)&#39;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The string representation we see at the Python REPL uses <code>repr</code>, while the <code>print</code> function relies on <code>str</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">date</span><span class="p">(</span><span class="mi">2020</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="go">datetime.date(2020, 1, 1)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="s">&quot;hello!&quot;</span>
</span><span class='line'><span class="go">&#39;hello!&#39;</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">date</span><span class="p">(</span><span class="mi">2020</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="go">2020-01-01</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="s">&quot;hello!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="go">hello!</span>
</span></code></pre></td></tr></table></div></figure>


<p>You&rsquo;ll see <code>repr</code> used when logging, handling exceptions, and implementing dunder methods.</p>

<h3>super</h3>

<p>If you create classes in Python, you&rsquo;ll likely need to use <code>super</code>.
The <code>super</code> function is pretty much essential whenever you&rsquo;re inheriting from another Python class.</p>

<p>Many Python users rarely create classes.
Creating classes isn&rsquo;t an <em>essential</em> part of Python, though many types of programming require it.
For example, you can&rsquo;t really use the <a href="https://djangoproject.com/">Django</a> web framework without creating classes.</p>

<p>If you don&rsquo;t already know about <code>super</code>, you&rsquo;ll end up learning this if and when you need it.</p>

<h3>property</h3>

<p>The <code>property</code> function is a <a href="https://docs.python.org/3/glossary.html#term-decorator">decorator</a> and a <a href="https://docs.python.org/3/glossary.html#term-descriptor">descriptor</a> (only click those weird terms if you&rsquo;re extra curious) and it&rsquo;ll likely seem somewhat magical when you first learn about it.</p>

<p>This decorator allows us to create an attribute which will always seem to contain the return value of a particular function call.
It&rsquo;s easiest to understand with an example.</p>

<p>Here&rsquo;s a class that uses <code>property</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Circle</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">radius</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">radius</span> <span class="o">=</span> <span class="n">radius</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@property</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">diameter</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">radius</span> <span class="o">*</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s an access of that <code>diameter</code> attribute on a <code>Circle</code> object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">circle</span> <span class="o">=</span> <span class="n">Circle</span><span class="p">()</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">circle</span><span class="o">.</span><span class="n">diameter</span>
</span><span class='line'><span class="go">2</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">circle</span><span class="o">.</span><span class="n">radius</span> <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">circle</span><span class="o">.</span><span class="n">diameter</span>
</span><span class='line'><span class="go">10</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re doing object-oriented Python programming (you&rsquo;re making classes a whole bunch), you&rsquo;ll likely want to learn about <code>property</code> at some point.
Unlike other object-oriented programming languages, <strong>we use properties instead of getter methods and setter methods</strong>.</p>

<h3>issubclass and isinstance</h3>

<p>The <code>issubclass</code> function checks whether a class is a subclass of one or more other classes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">bool</span><span class="p">)</span>
</span><span class='line'><span class="go">False</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">bool</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span>
</span><span class='line'><span class="go">True</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">bool</span><span class="p">,</span> <span class="nb">object</span><span class="p">)</span>
</span><span class='line'><span class="go">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>isinstance</code> function checks whether an object is an instance of one or more classes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">isinstance</span><span class="p">(</span><span class="bp">True</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span>
</span><span class='line'><span class="go">False</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">isinstance</span><span class="p">(</span><span class="bp">True</span><span class="p">,</span> <span class="nb">bool</span><span class="p">)</span>
</span><span class='line'><span class="go">True</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">isinstance</span><span class="p">(</span><span class="bp">True</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span>
</span><span class='line'><span class="go">True</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">isinstance</span><span class="p">(</span><span class="bp">True</span><span class="p">,</span> <span class="nb">object</span><span class="p">)</span>
</span><span class='line'><span class="go">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can think of <code>isinstance</code> as delegating to <code>issubclass</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="bp">True</span><span class="p">),</span> <span class="nb">str</span><span class="p">)</span>
</span><span class='line'><span class="go">False</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="bp">True</span><span class="p">),</span> <span class="nb">bool</span><span class="p">)</span>
</span><span class='line'><span class="go">True</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="bp">True</span><span class="p">),</span> <span class="nb">int</span><span class="p">)</span>
</span><span class='line'><span class="go">True</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">issubclass</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="bp">True</span><span class="p">),</span> <span class="nb">object</span><span class="p">)</span>
</span><span class='line'><span class="go">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re <a href="https://docs.python.org/3/library/numbers.html#implementing-the-arithmetic-operations">overloading operators</a> (e.g. customizing what the <code>+</code> operator does on your class) you might need to use <code>isinstance</code>, but in general we try to avoid strong type checking in Python so we don&rsquo;t see these much.</p>

<p>In Python we usually prefer duck typing over type checking.
These functions actually do a bit more than the strong type checking I noted above (<a href="https://docs.python.org/3/reference/datamodel.html#customizing-instance-and-subclass-checks">the behavior of both can be customized</a>) so it&rsquo;s actually possible to practice a sort of <code>isinstance</code>-powered duck typing with abstract base classes like <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Iterable">collections.abc.Iterable</a>.
But this isn&rsquo;t seen much either (partly because we tend to practice exception-handling and <a href="https://docs.python.org/3/glossary.html#term-eafp">EAFP</a> a bit more than condition-checking and <a href="https://docs.python.org/3/glossary.html#term-lbyl">LBYL</a> in Python).</p>

<p>The last two paragraphs were filled with confusing jargon that I may explain more thoroughly in a future serious of articles if there&rsquo;s enough interest.</p>

<h3>hasattr, getattr, setattr, and delattr</h3>

<p>Need to work with an attribute on an object but the attribute name is dynamic?
You need <code>hasattr</code>, <code>getattr</code>, <code>setattr</code>, and <code>delattr</code>.</p>

<p>Say we have some <code>thing</code> object we want to check for a particular value on:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">class</span> <span class="nc">Thing</span><span class="p">:</span> <span class="k">pass</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">thing</span> <span class="o">=</span> <span class="n">Thing</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>hasattr</code> function allows us to check whether the object <em>has</em> a certain attribute (note that <code>hasattr</code> <a href="https://hynek.me/articles/hasattr/">has some quirks</a>, though most have been ironed out in Python 3):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">hasattr</span><span class="p">(</span><span class="n">thing</span><span class="p">,</span> <span class="s">&#39;x&#39;</span><span class="p">)</span>
</span><span class='line'><span class="go">False</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">thing</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">hasattr</span><span class="p">(</span><span class="n">thing</span><span class="p">,</span> <span class="s">&#39;x&#39;</span><span class="p">)</span>
</span><span class='line'><span class="go">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>getattr</code> function allows us to retrieve the value of that attribute (with an optional default if the attribute doesn&rsquo;t exist):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">getattr</span><span class="p">(</span><span class="n">thing</span><span class="p">,</span> <span class="s">&#39;x&#39;</span><span class="p">)</span>
</span><span class='line'><span class="go">4</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">getattr</span><span class="p">(</span><span class="n">thing</span><span class="p">,</span> <span class="s">&#39;x&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="go">4</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">getattr</span><span class="p">(</span><span class="n">thing</span><span class="p">,</span> <span class="s">&#39;y&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="go">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>setattr</code> function allows for setting the value:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">setattr</span><span class="p">(</span><span class="n">thing</span><span class="p">,</span> <span class="s">&#39;x&#39;</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">thing</span><span class="o">.</span><span class="n">x</span>
</span><span class='line'><span class="go">5</span>
</span></code></pre></td></tr></table></div></figure>


<p>And <code>delattr</code> deletes the attribute:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">delattr</span><span class="p">(</span><span class="n">thing</span><span class="p">,</span> <span class="s">&#39;x&#39;</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">thing</span><span class="o">.</span><span class="n">x</span>
</span><span class='line'><span class="gt">Traceback (most recent call last):</span>
</span><span class='line'>  File <span class="nb">&quot;&lt;stdin&gt;&quot;</span>, line <span class="m">1</span>, in <span class="n">&lt;module&gt;</span>
</span><span class='line'><span class="gr">AttributeError</span>: <span class="n">&#39;Thing&#39; object has no attribute &#39;x&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>These functions allow for a specific flavor of <a href="https://en.wikipedia.org/wiki/Metaprogramming">metaprogramming</a> and you likely won&rsquo;t see them often.</p>

<h3>classmethod and staticmethod</h3>

<p>The <code>classmethod</code> and <code>staticmethod</code> decorators are somewhat magical in the same way the <code>property</code> decorator is somewhat magical.</p>

<p>If you have a method that should be callable on either an instance or a class, you want the <code>classmethod</code> decorator.
Factory methods (alternative constructors) are a common use case for this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">RomanNumeral</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;A Roman numeral, represented as a string and numerically.&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">number</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">number</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@classmethod</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">from_string</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">string</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">cls</span><span class="p">(</span><span class="n">roman_to_int</span><span class="p">(</span><span class="n">string</span><span class="p">))</span>  <span class="c"># function doesn&#39;t exist yet</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s a bit harder to come up with a good use for <code>staticmethod</code>, since you can pretty much always use a module-level function instead of a static method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">RomanNumeral</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;A Roman numeral, represented as a string and numerically.&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">SYMBOLS</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;M&#39;</span><span class="p">:</span> <span class="mi">1000</span><span class="p">,</span> <span class="s">&#39;D&#39;</span><span class="p">:</span> <span class="mi">500</span><span class="p">,</span> <span class="s">&#39;C&#39;</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span> <span class="s">&#39;L&#39;</span><span class="p">:</span> <span class="mi">50</span><span class="p">,</span> <span class="s">&#39;X&#39;</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="s">&#39;V&#39;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s">&#39;I&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">number</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">number</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@classmethod</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">from_string</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">string</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">cls</span><span class="p">(</span><span class="n">cls</span><span class="o">.</span><span class="n">roman_to_int</span><span class="p">(</span><span class="n">string</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@staticmethod</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">roman_to_int</span><span class="p">(</span><span class="n">numeral</span><span class="p">):</span>
</span><span class='line'>        <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">symbol</span><span class="p">,</span> <span class="n">next_symbol</span> <span class="ow">in</span> <span class="n">zip_longest</span><span class="p">(</span><span class="n">numeral</span><span class="p">,</span> <span class="n">numeral</span><span class="p">[</span><span class="mi">1</span><span class="p">:]):</span>
</span><span class='line'>            <span class="n">value</span> <span class="o">=</span> <span class="n">RomanNumeral</span><span class="o">.</span><span class="n">SYMBOLS</span><span class="p">[</span><span class="n">symbol</span><span class="p">]</span>
</span><span class='line'>            <span class="n">next_value</span> <span class="o">=</span> <span class="n">RomanNumeral</span><span class="o">.</span><span class="n">SYMBOLS</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">next_symbol</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">value</span> <span class="o">&lt;</span> <span class="n">next_value</span><span class="p">:</span>
</span><span class='line'>                <span class="n">value</span> <span class="o">=</span> <span class="o">-</span><span class="n">value</span>
</span><span class='line'>            <span class="n">total</span> <span class="o">+=</span> <span class="n">value</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">total</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above <code>roman_to_int</code> function doesn&rsquo;t require access to the instance <em>or</em> the class, so it doesn&rsquo;t even need to be a <code>@classmethod</code>.
There&rsquo;s no actual need to make this function a <code>staticmethod</code> (instead of a <code>classmethod</code>): <code>staticmethod</code> is just more restrictive to signal the fact that we&rsquo;re not reliant on the class our function lives on.</p>

<p>I find that learning these causes folks to <em>think</em> they need them when they often don&rsquo;t.
You can go looking for these if you really need them eventually.</p>

<h3>next</h3>

<p>The <code>next</code> function returns the <em>next</em> item in an iterator.</p>

<p>I&rsquo;ve written about iterators before (<a href="https://treyhunner.com/2016/12/python-iterator-protocol-how-for-loops-work/">how for loops work</a> and <a href="https://treyhunner.com/2018/06/how-to-make-an-iterator-in-python/">how to make an iterator</a>) but a very quick summary of iterators you&rsquo;ll likely run into includes:</p>

<ul>
<li><code>enumerate</code> objects</li>
<li><code>zip</code> objects</li>
<li>the return value of the <code>reversed</code> function</li>
<li>files (the thing you get back from the <code>open</code> function)</li>
<li><code>csv.reader</code> objects</li>
<li>generator expressions</li>
<li>generator functions</li>
</ul>


<p>You can think of <code>next</code> as a way to manually loop over an iterator to get a single item and then break.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">squares</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">next</span><span class="p">(</span><span class="n">squares</span><span class="p">)</span>
</span><span class='line'><span class="go">4</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">squares</span><span class="p">:</span>
</span><span class='line'><span class="gp">... </span>    <span class="k">break</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">n</span>
</span><span class='line'><span class="go">1</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">next</span><span class="p">(</span><span class="n">squares</span><span class="p">)</span>
</span><span class='line'><span class="go">9</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Maybe learn it eventually</h2>

<p>We&rsquo;ve already covered nearly half of the built-in functions.</p>

<p>The rest of Python&rsquo;s built-in functions definitely aren&rsquo;t useless, but they&rsquo;re a bit more special-purposed.</p>

<p>The 15 built-ins I&rsquo;m mentioning in this section are things you may eventually need to learn, but it&rsquo;s also very possible you&rsquo;ll never reach for these in your own code.</p>

<ul>
<li><strong><a href="https://docs.python.org/3/library/functions.html#iter">iter</a></strong>: get an iterator from an iterable: this function <a href="https://treyhunner.com/2016/12/python-iterator-protocol-how-for-loops-work/">powers <code>for</code> loops</a> and it can be very useful when you&rsquo;re making helper functions for looping lazily</li>
<li><strong><a href="https://docs.python.org/3/library/functions.html#callable">callable</a></strong>: return <code>True</code> if the argument is a callable (I talked about this a bit in my article <a href="https://treyhunner.com/2019/04/is-it-a-class-or-a-function-its-a-callable/#Callable_objects">functions and callables</a>)</li>
<li><strong><a href="https://docs.python.org/3/library/functions.html#filter">filter</a></strong> and <strong><a href="https://docs.python.org/3/library/functions.html#map">map</a></strong>: as I discuss in my article on <a href="https://treyhunner.com/2018/09/stop-writing-lambda-expressions/">overusing lambda functions</a>, I recommend using generator expressions over the built-in <code>map</code> and <code>filter</code> functions</li>
<li><strong><a href="https://docs.python.org/3/library/functions.html#id">id</a></strong>, <strong><a href="https://docs.python.org/3/library/functions.html#locals">locals</a></strong>, and <strong><a href="https://docs.python.org/3/library/functions.html#globals">globals</a></strong>: these are great tools for teaching Python and you may have already seen them, but you won&rsquo;t see these much in real Python code</li>
<li><strong><a href="https://docs.python.org/3/library/functions.html#round">round</a></strong>: you&rsquo;ll look this up if you need to round a number</li>
<li><strong><a href="https://docs.python.org/3/library/functions.html#divmod">divmod</a></strong>: this function does a floor division (<code>//</code>) and a modulo operation (<code>%</code>) at the same time</li>
<li><strong><a href="https://docs.python.org/3/library/functions.html#bin">bin</a></strong>, <strong><a href="https://docs.python.org/3/library/functions.html#oct">oct</a></strong>, and <strong><a href="https://docs.python.org/3/library/functions.html#hex">hex</a></strong>: if you need to display a number as a string in binary, octal, or hexadecimal form, you&rsquo;ll want these functions</li>
<li><strong><a href="https://docs.python.org/3/library/functions.html#abs">abs</a></strong>: when you need the absolute value of a number, you&rsquo;ll look this up</li>
<li><strong><a href="https://docs.python.org/3/library/functions.html#hash">hash</a></strong>: dictionaries and sets rely on the <code>hash</code> function to test for <a href="https://lerner.co.il/2015/04/03/is-it-hashable-fun-and-games-with-hashing-in-python/">hashability</a>, but you likely won&rsquo;t need it unless you&rsquo;re implementing a clever de-duplication algorithm</li>
<li><strong><a href="https://docs.python.org/3/library/functions.html#object">object</a></strong>: this function (yes it&rsquo;s a class) is useful for making <a href="https://treyhunner.com/2019/03/unique-and-sentinel-values-in-python/">unique default values and sentinel values</a>, if you ever need those</li>
</ul>


<p>You&rsquo;re unlikely to need all the above built-ins, but if you write Python code for long enough you&rsquo;re likely to see nearly all of them.</p>

<h2>You likely don&rsquo;t need these</h2>

<p>You&rsquo;re unlikely to need these built-ins.
There are sometimes really appropriate uses for a few of these, but you&rsquo;ll likely be able to get away with never learning about these.</p>

<ul>
<li><strong><a href="https://docs.python.org/3/library/functions.html#ord">ord</a></strong> and <strong><a href="https://docs.python.org/3/library/functions.html#chr">chr</a></strong>: these are fun for teaching ASCII tables and unicode code points, but I&rsquo;ve never really found a use for them in my own code</li>
<li><strong><a href="https://docs.python.org/3/library/functions.html#exec">exec</a></strong> and <strong><a href="https://docs.python.org/3/library/functions.html#eval">eval</a></strong>: for evaluating a string as if it was code</li>
<li><strong><a href="https://docs.python.org/3/library/functions.html#compile">compile</a></strong>: this is related to <code>exec</code> and <code>eval</code></li>
<li><strong><a href="https://docs.python.org/3/library/functions.html#slice">slice</a></strong>: if you&rsquo;re implementing <code>__getitem__</code> to make a custom sequence, you may need this (some <a href="https://www.pythonmorsels.com/">Python Morsels</a> exercises require this actually), but unless you make your own custom sequence you&rsquo;ll likely never see <code>slice</code></li>
<li><strong><a href="https://docs.python.org/3/library/functions.html#bytes">bytes</a></strong>, <strong><a href="https://docs.python.org/3/library/functions.html#bytearray">bytearray</a></strong>, and <strong><a href="https://docs.python.org/3/library/functions.html#memoryview">memoryview</a></strong>: if you&rsquo;re working with bytes often, you&rsquo;ll reach for some of these (just ignore them until then)</li>
<li><strong><a href="https://docs.python.org/3/library/functions.html#ascii">ascii</a></strong>: like <code>repr</code> but returns an ASCII-only representation of an object; I haven&rsquo;t needed this in my code yet</li>
<li><strong><a href="https://docs.python.org/3/library/functions.html#frozenset">frozenset</a></strong>: like <code>set</code>, but it&rsquo;s immutable (and hashable!); very neat but not something I&rsquo;ve needed in my own code</li>
<li><strong><a href="https://docs.python.org/3/library/functions.html#__import__">__import__</a></strong>: this function isn&rsquo;t really meant to be used by you, use <a href="https://docs.python.org/3/library/importlib.html#importlib.import_module">importlib</a> instead</li>
<li><strong><a href="https://docs.python.org/3/library/functions.html#format">format</a></strong>: this calls the <code>__format__</code> method, which is used for string formatting (<a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings">f-strings</a> and <a href="https://docs.python.org/3/library/stdtypes.html#str.format">str.format</a>); you usually don&rsquo;t need to call this function directly</li>
<li><strong><a href="https://docs.python.org/3/library/functions.html#pow">pow</a></strong>: the exponentiation operator (<code>**</code>) usually supplants this&hellip; unless you&rsquo;re doing modulo-math (maybe you&rsquo;re implementing <a href="http://code.activestate.com/recipes/578838-rsa-a-simple-and-easy-to-read-implementation/">RSA encryption</a> from scratch&hellip;?)</li>
<li><strong><a href="https://docs.python.org/3/library/functions.html#complex">complex</a></strong>: if you didn&rsquo;t know that <code>4j+3</code> is valid Python code, you likely don&rsquo;t need the <code>complex</code> function</li>
</ul>


<h2>There&rsquo;s always more to learn</h2>

<p>There are 69 built-in functions in Python (technically <a href="https://treyhunner.com/2019/04/is-it-a-class-or-a-function-its-a-callable/#The_distinction_between_functions_and_classes_often_doesn%E2%80%99t_matter">only 42 of them are actually functions</a>).</p>

<p>When you&rsquo;re newer in your Python journey, I recommend focusing on only 20 of these built-in functions in your own code (the <a href="#10_Commonly_known_built-in_functions">10 commonly known built-ins</a> and the <a href="#Built-ins_overlooked_by_new_Pythonistas">10 built-ins that are often overlooked</a>), in addition to the <a href="#The_5_debugging_functions">5 debugging functions</a>.</p>

<p>After that there are <a href="#Learn_it_later">14 more built-ins which you&rsquo;ll probably learn later</a> (depending on the style of programming you do).</p>

<p>Then come <a href="#Maybe_learn_it_eventually">the 15 built-ins which you may or may not ever end up needing in your own code</a>.
Some people love these built-ins and some people never use them: as you get more specific in your coding needs, you&rsquo;ll likely find yourself reaching for considerably more niche tools.</p>

<p>After that I mentioned <a href="#You_likely_don%E2%80%99t_need_these">the last 15 built-ins which you&rsquo;ll likely never need</a> (again, very much depending on how you use Python).</p>

<p>You don&rsquo;t need to learn all the Python built-in functions today.
Take it slow: focus on those first 20 important built-ins and then work your way into learning about others if and when you eventually need them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Is it a class or a function? It's a callable!]]></title>
    <link href="https://treyhunner.com/2019/04/is-it-a-class-or-a-function-its-a-callable/"/>
    <updated>2019-04-16T10:20:00-07:00</updated>
    <id>https://treyhunner.com/2019/04/is-it-a-class-or-a-function-its-a-callable</id>
    <content type="html"><![CDATA[<p>If you search course curriculum I&rsquo;ve written, you&rsquo;ll often find phrases like &ldquo;<code>zip</code> function&rdquo;, &ldquo;<code>enumerate</code> function&rdquo;, and &ldquo;<code>list</code> function&rdquo;.
Those terms are all technically misnomers.</p>

<p>When I use terms like &ldquo;the <code>bool</code> function&rdquo; and &ldquo;the <code>str</code> function&rdquo; I&rsquo;m incorrectly implying that <code>bool</code> and <code>str</code> are functions.
But these <strong>aren&rsquo;t functions: they&rsquo;re classes</strong>!</p>

<p>I&rsquo;m going to explain why this confusion between classes and functions happens in Python and then explain <strong>why this distinction often doesn&rsquo;t matter</strong>.</p>

<ul data-toc=".entry-content"></ul>


<h2>Class or function?</h2>

<p>When I&rsquo;m training a new group of Python developers, there&rsquo;s group activity we often do: the class or function game.</p>

<p>In <strong>the class or function game</strong>, we take something that we &ldquo;call&rdquo; (using parenthesis: <code>()</code>) and we guess whether it&rsquo;s a class or a function.</p>

<p>For example:</p>

<ul>
<li>We can call <code>zip</code> with a couple iterables and we get another iterable back, so is <code>zip</code> a class or a function?</li>
<li>When we call <code>len</code>, are we calling a class or a function?</li>
<li>What about <code>int</code>: when we write <code>int('4')</code> are we calling a class or a function?</li>
</ul>


<p>Python&rsquo;s <code>zip</code>, <code>len</code>, and <code>int</code> are all often guessed to be functions, but <strong>only one of these is really a function</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">zip</span>
</span><span class='line'><span class="go">&lt;class &#39;zip&#39;&gt;</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">len</span>
</span><span class='line'><span class="go">&lt;built-in function len&gt;</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">int</span>
</span><span class='line'><span class="go">&lt;class &#39;int&#39;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>While <code>len</code> is a function, <code>zip</code> and <code>int</code> are classes.</p>

<p>The <code>reversed</code>, <code>enumerate</code>, <code>range</code>, and <code>filter</code> &ldquo;functions&rdquo; also aren&rsquo;t really functions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">reversed</span>
</span><span class='line'><span class="go">&lt;class &#39;reversed&#39;&gt;</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">enumerate</span>
</span><span class='line'><span class="go">&lt;class &#39;enumerate&#39;&gt;</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">range</span>
</span><span class='line'><span class="go">&lt;class &#39;range&#39;&gt;</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">filter</span>
</span><span class='line'><span class="go">&lt;class &#39;filter&#39;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After playing the class or function game, we always discuss <strong>callables</strong>, and then we discuss the fact that <strong>we often don&rsquo;t care whether something is a class or a function</strong>.</p>

<h2>What&rsquo;s a callable?</h2>

<p>A <strong>callable</strong> is anything you can <em>call</em>, using parenthesis, and possibly passing arguments.</p>

<p>All three of these lines involve callables:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">something</span><span class="p">()</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">x</span> <span class="o">=</span> <span class="n">AnotherThing</span><span class="p">()</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">something_else</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="o">*</span><span class="n">x</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We don&rsquo;t know what <code>something</code>, <code>AnotherThing</code>, and <code>something_else</code> do: but we <em>know</em> they&rsquo;re callables.</p>

<p>We have a number of callables in Python:</p>

<ul>
<li>Functions are callables</li>
<li>Classes are callables</li>
<li>Methods (which are functions that hang off of classes) are callables</li>
<li>Instances of classes can even be turned into callables</li>
</ul>


<p>Callables are a pretty important concept in Python.</p>

<h2>Classes are callables</h2>

<p>Functions are the most obvious callable in Python.
Functions can be &ldquo;called&rdquo; in every programming language.
A <em>class</em> being callable is a bit more unique though.</p>

<p>In JavaScript we can make an &ldquo;instance&rdquo; of the <code>Date</code> class like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="mi">2020</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="mi">2020</span><span class="o">-</span><span class="mi">02</span><span class="o">-</span><span class="mi">01</span><span class="nx">T08</span><span class="o">:</span><span class="mi">00</span><span class="o">:</span><span class="mf">00.000</span><span class="nx">Z</span>
</span></code></pre></td></tr></table></div></figure>


<p>In JavaScript the class instantiation syntax (the way we create an &ldquo;instance&rdquo; of a class) involves the <code>new</code> keyword.
In Python we don&rsquo;t have a <code>new</code> keyword.</p>

<p>In Python we can make an &ldquo;instance&rdquo; of the <code>datetime</code> class (from <code>datetime</code>) like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">datetime</span><span class="p">(</span><span class="mi">2020</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="go">datetime.datetime(2020, 1, 1, 0, 0)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Python, the syntax for <strong>instantiating a new class instance</strong> is the same as the syntax for <strong>calling a function</strong>.
There&rsquo;s no <code>new</code> needed: we just call the class.</p>

<p>When we <strong>call a function</strong>, we get its return value.
When we <strong>call a class</strong>, we get an &ldquo;instance&rdquo; of that class.</p>

<p><strong>We use the same syntax for constructing objects from classes and for calling functions</strong>: this fact is the main reason the word &ldquo;callable&rdquo; is such an important part of our Python vocabulary.</p>

<h2>Disguising classes as functions</h2>

<p>There are many classes-which-look-like-functions among the Python built-ins and in the Python standard library.</p>

<p>I sometimes explain <strong>decorators</strong> (an intermediate-level Python concept) as &ldquo;functions which accept functions and return functions&rdquo;.</p>

<p>But that&rsquo;s not an entirely accurate explanation.
There are also <strong>class decorators</strong>: functions which accept classes and return classes.
And there are also <strong>decorators which are implemented using classes</strong>: classes which accept functions and return objects.</p>

<p>A better explanation of the term decorators might be &ldquo;callables which accept callables and return callables&rdquo; (still not entirely accurate, but good enough for our purposes).</p>

<p>Python&rsquo;s <a href="https://docs.python.org/3/library/functions.html#property">property</a> decorator seems like a function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">class</span> <span class="nc">Circle</span><span class="p">:</span>
</span><span class='line'><span class="gp">... </span>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">radius</span><span class="p">):</span>
</span><span class='line'><span class="gp">... </span>        <span class="bp">self</span><span class="o">.</span><span class="n">radius</span> <span class="o">=</span> <span class="n">radius</span>
</span><span class='line'><span class="gp">... </span>    <span class="nd">@property</span>
</span><span class='line'><span class="gp">... </span>    <span class="k">def</span> <span class="nf">diameter</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'><span class="gp">... </span>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">radius</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">c</span> <span class="o">=</span> <span class="n">Circle</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">c</span><span class="o">.</span><span class="n">diameter</span>
</span><span class='line'><span class="go">10</span>
</span></code></pre></td></tr></table></div></figure>


<p>But it&rsquo;s a class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">property</span>
</span><span class='line'><span class="go">&lt;class &#39;property&#39;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>classmethod</code> and <code>staticmethod</code> decorators are <em>also</em> classes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">classmethod</span>
</span><span class='line'><span class="go">&lt;class &#39;classmethod&#39;&gt;</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">staticmethod</span>
</span><span class='line'><span class="go">&lt;class &#39;staticmethod&#39;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>What about context managers, like <a href="https://docs.python.org/3.5/library/contextlib.html#contextlib.suppress">suppress</a> and <a href="https://docs.python.org/3/library/contextlib.html#contextlib.redirect_stdout">redirect_stdout</a> from the <code>contextlib</code> module?
These both use the <a href="https://en.wikipedia.org/wiki/Snake_case">snake_case</a> naming convention, so they seem like functions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">contextlib</span> <span class="kn">import</span> <span class="n">suppress</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">io</span> <span class="kn">import</span> <span class="n">StringIO</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">with</span> <span class="n">suppress</span><span class="p">(</span><span class="ne">ValueError</span><span class="p">):</span>
</span><span class='line'><span class="gp">... </span>    <span class="nb">int</span><span class="p">(</span><span class="s">&#39;hello&#39;</span><span class="p">)</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">with</span> <span class="n">redirect_stdout</span><span class="p">(</span><span class="n">StringIO</span><span class="p">())</span> <span class="k">as</span> <span class="n">fake_stdout</span><span class="p">:</span>
</span><span class='line'><span class="gp">... </span>    <span class="k">print</span><span class="p">(</span><span class="s">&#39;hello!&#39;</span><span class="p">)</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">fake_stdout</span><span class="o">.</span><span class="n">getvalue</span><span class="p">()</span>
</span><span class='line'><span class="go">&#39;hello!\n&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>But they&rsquo;re actually <strong>implemented using classes</strong>, despite the <code>snake_case</code> naming convention:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">suppress</span>
</span><span class='line'><span class="go">&lt;class &#39;contextlib.suppress&#39;&gt;</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">redirect_stdout</span>
</span><span class='line'><span class="go">&lt;class &#39;contextlib.redirect_stdout&#39;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Decorators and context managers are just two places in Python where you&rsquo;ll often see callables which look like functions but aren&rsquo;t.
Whether a <strong>callable</strong> is a class or a function is often <strong>just an implementation detail</strong>.</p>

<p>It&rsquo;s not really a mistake to refer to <code>property</code> or <code>redirect_stdout</code> as functions because <strong>they may as well be functions</strong>.
We can <strong>call</strong> them, and that&rsquo;s what we care about.</p>

<h2>Callable objects</h2>

<p>Python&rsquo;s &ldquo;call&rdquo; syntax, those <code>(...)</code> parenthesis, can <strong>create a class instance</strong> or <strong>call a function</strong>.
But this &ldquo;call&rdquo; syntax can <strong>also be used to call an object</strong>.</p>

<p>Technically, everything in Python &ldquo;is an object&rdquo;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">isinstance</span><span class="p">(</span><span class="nb">len</span><span class="p">,</span> <span class="nb">object</span><span class="p">)</span>
</span><span class='line'><span class="go">True</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">isinstance</span><span class="p">(</span><span class="nb">range</span><span class="p">,</span> <span class="nb">object</span><span class="p">)</span>
</span><span class='line'><span class="go">True</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">isinstance</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="nb">object</span><span class="p">)</span>
</span><span class='line'><span class="go">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>But we often use the term &ldquo;object&rdquo; to imply that we&rsquo;re working with an instance of a class (by <em>instance of a class</em> I mean &ldquo;the thing you get back when you call a class&rdquo;).</p>

<p>There&rsquo;s a <a href="https://docs.python.org/3.5/library/functools.html#functools.partial">partial</a> function which lives in the <code>functools</code> module, which can &ldquo;partially evaluate&rdquo; a function by storing arguments to be used when calling the function later.
This is often used to make Python look a bit more like a functional programming language:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">partial</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">just_numbers</span> <span class="o">=</span> <span class="n">partial</span><span class="p">(</span><span class="nb">filter</span><span class="p">,</span> <span class="nb">str</span><span class="o">.</span><span class="n">isdigit</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">just_numbers</span><span class="p">([</span><span class="s">&#39;4&#39;</span><span class="p">,</span> <span class="s">&#39;hello&#39;</span><span class="p">,</span> <span class="s">&#39;50&#39;</span><span class="p">]))</span>
</span><span class='line'><span class="go">[&#39;4&#39;, &#39;50&#39;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>I said above that Python has &ldquo;a <code>partial</code> function&rdquo;, which is both true and false.</p>

<p>While the phrase &ldquo;a <code>partial</code> function&rdquo; makes sense, the <code>partial</code> callable <strong>isn&rsquo;t implemented using a function</strong>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">partial</span>
</span><span class='line'><span class="go">&lt;class &#39;__main__.partial&#39;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Python core developers <em>could</em> have implemented <code>partial</code> as a function, like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">partial</span><span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Return &quot;partially evaluated&quot; version of given function/arguments.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">more_args</span><span class="p">,</span> <span class="o">**</span><span class="n">more_kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="n">all_kwargs</span> <span class="o">=</span> <span class="p">{</span><span class="o">**</span><span class="n">kwargs</span><span class="p">,</span> <span class="o">**</span><span class="n">more_kwargs</span><span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">*</span><span class="n">more_args</span><span class="p">,</span> <span class="o">**</span><span class="n">all_kwargs</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">wrapper</span>
</span></code></pre></td></tr></table></div></figure>


<p>But instead they chose to use a class, doing something more like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">partial</span><span class="p">:</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Return &quot;partially evaluated&quot; version of given function/arguments.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">func</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">func</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">args</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">kwargs</span> <span class="o">=</span> <span class="n">func</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">kwargs</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">more_args</span><span class="p">,</span> <span class="o">**</span><span class="n">more_kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="n">all_kwargs</span> <span class="o">=</span> <span class="p">{</span><span class="o">**</span><span class="bp">self</span><span class="o">.</span><span class="n">kwargs</span><span class="p">,</span> <span class="o">**</span><span class="n">more_kwargs</span><span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="bp">self</span><span class="o">.</span><span class="n">args</span><span class="p">,</span> <span class="o">*</span><span class="n">more_args</span><span class="p">,</span> <span class="o">**</span><span class="n">all_kwargs</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>That <code>__call__</code> method allows us to <em>call</em> <code>partial</code> objects.
So the <code>partial</code> class makes a <strong>callable object</strong>.</p>

<p>Adding a <code>__call__</code> method to any class will <strong>make instances of that class callable</strong>.
In fact, checking for a <code>__call__</code> method is one way to ask the question &ldquo;is this object callable?&rdquo;</p>

<p>All functions, classes, and callable objects have a <code>__call__</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">hasattr</span><span class="p">(</span><span class="nb">open</span><span class="p">,</span> <span class="s">&#39;__call__&#39;</span><span class="p">)</span>
</span><span class='line'><span class="go">True</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">hasattr</span><span class="p">(</span><span class="nb">dict</span><span class="p">,</span> <span class="s">&#39;__call__&#39;</span><span class="p">)</span>
</span><span class='line'><span class="go">True</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">hasattr</span><span class="p">({},</span> <span class="s">&#39;__call__&#39;</span><span class="p">)</span>
</span><span class='line'><span class="go">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>Though a better way to check for callability than looking for a <code>__call__</code> is to use the built-in <code>callable</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">callable</span><span class="p">(</span><span class="nb">len</span><span class="p">)</span>
</span><span class='line'><span class="go">True</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">callable</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</span><span class='line'><span class="go">True</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">callable</span><span class="p">([])</span>
</span><span class='line'><span class="go">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Python, classes, functions, and instances of classes can all be used as &ldquo;callables&rdquo;.</p>

<h2>The distinction between functions and classes often doesn&rsquo;t matter</h2>

<p>The Python documentation has a page called <a href="https://docs.python.org/3/library/functions.html#built-in-funcs">Built-in Functions</a>.
But this Built-in Functions page <strong>isn&rsquo;t actually for built-in functions</strong>: it&rsquo;s for built-in callables.</p>

<p>Of the 69 &ldquo;built-in functions&rdquo; listed in the Python Built-In Functions page, <strong>only 42 are actually implemented as functions</strong>: 26 are classes and 1 (<code>help</code>) is an instance of a callable class.</p>

<p>Of the 26 classes among those built-in &ldquo;functions&rdquo;, four <em>were</em> actually functions in Python 2 (the now-lazy <code>map</code>, <code>filter</code>, <code>range</code>, and <code>zip</code>) but have since become classes.</p>

<p>The Python built-ins and the standard library are both full of maybe-functions-maybe-classes.</p>

<h3>operator.itemgetter</h3>

<p>The <code>operator</code> module has lots of callables:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">operator</span> <span class="kn">import</span> <span class="n">getitem</span><span class="p">,</span> <span class="n">itemgetter</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">get_a_and_b</span> <span class="o">=</span> <span class="n">itemgetter</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">d</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s">&#39;c&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">get_a_and_b</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
</span><span class='line'><span class="go">(1, 2)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">getitem</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="s">&#39;a&#39;</span><span class="p">),</span> <span class="n">getitem</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="s">&#39;b&#39;</span><span class="p">)</span>
</span><span class='line'><span class="go">(1, 2)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Some of these callables (like <a href="https://docs.python.org/3.5/library/operator.html#operator.itemgetter">itemgetter</a> are <em>callable classes</em>) while others (like <code>getitem</code>) are functions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">itemgetter</span>
</span><span class='line'><span class="go">&lt;class &#39;operator.itemgetter&#39;&gt;</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">get_a_and_b</span>
</span><span class='line'><span class="go">operator.itemgetter(&#39;a&#39;, &#39;b&#39;)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">getitem</span>
</span><span class='line'><span class="go">&lt;built-in function getitem&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>itemgetter</code> class <em>could</em> have been implemented as &ldquo;a function that returns a function&rdquo;.
Instead it&rsquo;s a class which implements a <code>__call__</code> method, so its class instances are callable.</p>

<h3>Iterators</h3>

<p>Generator functions are functions which return iterators when called (<a href="https://youtu.be/V2PkkMS2Ack?t=858">generators are iterators</a>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">count</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Generator that counts upward forever.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>        <span class="k">yield</span> <span class="n">n</span>
</span><span class='line'>        <span class="n">n</span> <span class="o">+=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>And <a href="https://treyhunner.com/2018/06/how-to-make-an-iterator-in-python/">iterator classes</a> are classes which return iterators when called:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">count</span><span class="p">:</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Iterator that counts upward forever.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">n</span> <span class="o">=</span> <span class="n">n</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__next__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">n</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">n</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">n</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">n</span>
</span></code></pre></td></tr></table></div></figure>


<p>Iterators can be defined using functions or using classes: whichever you choose is an implementation detail.</p>

<h3>The sorted &ldquo;key function&rdquo;</h3>

<p>The built-in <a href="https://docs.python.org/3.5/library/functions.html#sorted">sorted</a> function has an optional <code>key</code> argument, which is called to get &ldquo;comparison keys&rdquo; for sorting (<code>min</code> and <code>max</code> have a similar <code>key</code> argument).</p>

<p>This <code>key</code> argument can be a function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">def</span> <span class="nf">digit_count</span><span class="p">(</span><span class="n">s</span><span class="p">):</span> <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;_&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">))</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;400&#39;</span><span class="p">,</span> <span class="s">&#39;2_020&#39;</span><span class="p">,</span> <span class="s">&#39;800_000&#39;</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">sorted</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">digit_count</span><span class="p">)</span>
</span><span class='line'><span class="go">[&#39;400&#39;, &#39;2_020&#39;, &#39;800_000&#39;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>But it can also be a class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;400&#39;</span><span class="p">,</span> <span class="s">&#39;2_020&#39;</span><span class="p">,</span> <span class="s">&#39;800_000&#39;</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">sorted</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>
</span><span class='line'><span class="go">[&#39;400&#39;, &#39;2_020&#39;, &#39;800_000&#39;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Python documentation says &ldquo;key specifies a function of one argument&hellip;&rdquo;.
That&rsquo;s not <em>technically</em> correct because key can be any callable, not just a function.
But <strong>we often use the words &ldquo;function&rdquo; and &ldquo;callable&rdquo; interchangeably</strong> in Python, and that&rsquo;s okay.</p>

<h3>The defaultdict &ldquo;factory function&rdquo;</h3>

<p>The <a href="https://docs.python.org/3/library/collections.html#collections.defaultdict">defaultdict</a> class in the <code>collections</code> module accepts a &ldquo;factory&rdquo; callable, which is used to generate default values for missing dictionary items.</p>

<p>Usually we use a class as a <code>defaultdict</code> factory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">counts</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">counts</span><span class="p">[</span><span class="s">&#39;snakes&#39;</span><span class="p">]</span>
</span><span class='line'><span class="go">0</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">things</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">things</span><span class="p">[</span><span class="s">&#39;newer&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;Python 3&#39;</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">things</span><span class="p">[</span><span class="s">&#39;newer&#39;</span><span class="p">]</span>
</span><span class='line'><span class="go">[&#39;Python 3&#39;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>But <code>defaultdict</code> can also accept a function (or any other callable):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">random</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">colors</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;blue&#39;</span><span class="p">,</span> <span class="s">&#39;yellow&#39;</span><span class="p">,</span> <span class="s">&#39;purple&#39;</span><span class="p">,</span> <span class="s">&#39;green&#39;</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">favorite_colors</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">colors</span><span class="p">))</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">favorite_colors</span><span class="p">[</span><span class="s">&#39;Kevin&#39;</span><span class="p">]</span>
</span><span class='line'><span class="go">&#39;yellow&#39;</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">favorite_colors</span><span class="p">[</span><span class="s">&#39;Stacy&#39;</span><span class="p">]</span>
</span><span class='line'><span class="go">&#39;green&#39;</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">probabilities</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">probabilities</span><span class="p">[</span><span class="s">&#39;having fun&#39;</span><span class="p">]</span>
</span><span class='line'><span class="go">0.6714530824158086</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">probabilities</span><span class="p">[</span><span class="s">&#39;seeing a snake&#39;</span><span class="p">]</span>
</span><span class='line'><span class="go">0.07703364911089605</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty much anywhere a &ldquo;callable&rdquo; is accepted in Python, a function, a class, or some other callable object will work just fine.</p>

<h2>Think in terms of &ldquo;callables&rdquo; not &ldquo;classes&rdquo; or &ldquo;functions&rdquo;</h2>

<p>In the <a href="https://www.pythonmorsels.com/">Python Morsels</a> exercises I send out every week, I often ask learners to make a &ldquo;callable&rdquo;.
Often I&rsquo;ll say something like &ldquo;this week I&rsquo;d like you to make a callable which returns an iterator&hellip;&rdquo;.</p>

<p>I say &ldquo;callable&rdquo; because I want <a href="https://treyhunner.com/2018/06/how-to-make-an-iterator-in-python/">an iterator</a> back, but I really don&rsquo;t care whether the callable created is a <strong>generator function</strong>, an <strong>iterator class</strong>, or a <strong>function that returns a generator expression</strong>.
All of these things are <em>callables</em> which return the right type that I&rsquo;m testing for (an iterator).
It&rsquo;s up to you, the implementor of this callable, to determine how you&rsquo;d like to define it.</p>

<p>We practice <strong>duck typing</strong> in Python: <strong>if it looks like a duck and quacks like a duck, it&rsquo;s a duck</strong>.
Because of duck typing we tend to use general terms to describe specific things: lists are sequences, iterators are generators, dictionaries are mappings, and functions are callables.</p>

<p>If something looks like a callable and quacks (or rather, calls) like a callable, it&rsquo;s a callable.
Likewise, if something looks like a function and quacks (calls) like a function, we can call it a function&hellip; <strong>even if it&rsquo;s actually implemented using a class or a callable object</strong>!</p>

<p>Callables accept arguments and return something useful to the caller.
When we <em>call</em> classes we get instances of that class back.
When we <em>call</em> functions we get the return value of that function back.
The distinction between a class and a function is <strong>rarely important from the perspective of the caller</strong>.</p>

<p>When talking about passing functions or class objects around, try to think in terms of <em>callables</em>.
<strong>What happens when you call something</strong> is often more important than <strong>what that thing actually is</strong>.</p>

<p>More importantly though, if someone mislabels a function as a class or a class as a function, <strong>don&rsquo;t correct them unless the distinction is actually relevant</strong>.
A function is a callable and a class is a callable: the distinction between these two can often be disregarded.</p>

<h2>Want some practice with callables?</h2>

<p>You don&rsquo;t learn by putting more information into your head.
You learn through recall, that is trying to retrieve information for your head.</p>

<p>If you&rsquo;d like to get some practice with the <code>__call__</code> method, if you&rsquo;d like to make your own iterable/iterator-returning callables, or if you just want to practice working with &ldquo;callables&rdquo;, I have a Python Morsels exercise for you.</p>

<p>Python Morsels is a weekly Python skill-building service.
I send one exercise every week and the first 5 are free.</p>

<p>If you sign up for Python Morsels using the below form, I&rsquo;ll send you one callable-related exercise of your choosing (choose using the selection below).</p>

<h4>Which Python exercise would you like right now?</h4>

<p><form method="post" action="https://www.pythonmorsels.com/accounts/signup/">
    <label><input type="radio" name="exercise_track" value="callables1"> Novice exercise with a bonus involving callables</label>
    <br>
    <label><input type="radio" name="exercise_track" value="callables2"> Making a callable which returns an iterable</label>
    <br>
    <label><input type="radio" name="exercise_track" value="callables3"> Making an iterator-returning callable</label>
    <br>
    <label><input type="radio" name="exercise_track" value="callables4">Advanced exercise with bonuses showing the downside of <code>__call__</code></label>
    <br>
    <br>
    <input type="hidden" name="form_id" value="callables">
    <input type="email" name="email" placeholder="Your email address" class="subscribe-email form-big" required>
    <button type="submit" class="subscribe-btn form-big">Get my Python Morsels exercise</button>
    <br>
    <small>
    I won&rsquo;t share you info with others (see the <a href="https://www.pythonmorsels.com/privacy/">Python Morsels Privacy Policy</a> for details).<br>
    This form is reCAPTCHA protected (Google <a href="https://policies.google.com/privacy">Privacy Policy</a> &amp; <a href="https://policies.google.com/terms">TOS</a>)
    </small>
</form></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The problem with inheriting from dict and list in Python]]></title>
    <link href="https://treyhunner.com/2019/04/why-you-shouldnt-inherit-from-list-and-dict-in-python/"/>
    <updated>2019-04-09T07:00:00-07:00</updated>
    <id>https://treyhunner.com/2019/04/why-you-shouldnt-inherit-from-list-and-dict-in-python</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve created dozens of <a href="https://www.pythonmorsels.com/">Python Morsels</a> since I started it last year.
At this point at least 10 of these exercises involve making a custom collection: often a dict-like, list-like or set-like class.</p>

<p>Since each Python Morsels solutions email involves a walk-through of many ways to solve the same problem, I&rsquo;ve solved each of these in many ways.</p>

<p>I&rsquo;ve solved these:</p>

<ul>
<li>manually with <code>__dunder__</code> methods</li>
<li>with the abstract base classes in <a href="https://docs.python.org/3/library/collections.abc.html">collections.abc</a></li>
<li>with <a href="https://docs.python.org/3/library/collections.html#collections.UserDict">collections.UserDict</a> and <a href="https://docs.python.org/3/library/collections.html#collections.UserList">collections.UserList</a></li>
<li>by inheriting from <code>list</code>, <code>dict</code>, and <code>set</code> directly</li>
</ul>


<p>While creating and solving many exercises involving custom collections, I&rsquo;ve realized that inheriting from <code>list</code>, <code>dict</code>, and <code>set</code> is often subtly painful.
I&rsquo;m writing this article to explain why I often don&rsquo;t recommend inheriting from these built-in classes in Python.</p>

<p>My examples will focus on <code>dict</code> and <code>list</code> since those are likely more commonly sub-classed.</p>

<ul data-toc=".entry-content"></ul>


<h2>Making a custom dictionary</h2>

<p>We&rsquo;d like to make a dictionary that&rsquo;s bi-directional.
When a key-value pair is added, the key maps to the value but the value also maps to the key.</p>

<p>There will always be an even number of elements in this dictionary.
And if <code>d[k] == v</code> is <code>True</code> then <code>d[v] == k</code> will always be <code>True</code> also.</p>

<p>We could try to implement this by customizing deletion and setting of key-value pairs.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">TwoWayDict</span><span class="p">(</span><span class="nb">dict</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__delitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
</span><span class='line'>        <span class="n">value</span> <span class="o">=</span> <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__setitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">key</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">:</span>
</span><span class='line'>            <span class="k">del</span> <span class="bp">self</span><span class="p">[</span><span class="bp">self</span><span class="p">[</span><span class="n">key</span><span class="p">]]</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">value</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">:</span>
</span><span class='line'>            <span class="k">del</span> <span class="bp">self</span><span class="p">[</span><span class="n">value</span><span class="p">]</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">f</span><span class="s">&quot;{type(self).__name__}({super().__repr__()})&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we&rsquo;re ensuring that:</p>

<ul>
<li>deleting keys will delete their corresponding values as well</li>
<li>whenever we set a new value for <code>k</code>, that any existing value will be removed properly</li>
<li>whenever we set a key-value pair, that the corresponding value-key pair will be set too</li>
</ul>


<p>Setting and deleting items from this bi-directional dictionary seems to work as we&rsquo;d expect:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d</span> <span class="o">=</span> <span class="n">TwoWayDict</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mi">8</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d</span>
</span><span class='line'><span class="n">TwoWayDict</span><span class="p">({</span><span class="mi">3</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">:</span> <span class="mi">3</span><span class="p">})</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">=</span> <span class="mi">6</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d</span>
</span><span class='line'><span class="n">TwoWayDict</span><span class="p">({</span><span class="mi">3</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">:</span> <span class="mi">7</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>But calling the <code>update</code> method on this dictionary leads to odd behavior:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d</span>
</span><span class='line'><span class="n">TwoWayDict</span><span class="p">({</span><span class="mi">3</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">:</span> <span class="mi">7</span><span class="p">})</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d</span><span class="o">.</span><span class="n">update</span><span class="p">({</span><span class="mi">9</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">:</span> <span class="mi">2</span><span class="p">})</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d</span>
</span><span class='line'><span class="n">TwoWayDict</span><span class="p">({</span><span class="mi">3</span><span class="p">:</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">:</span> <span class="mi">7</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Adding <code>9: 7</code> should have removed <code>7: 6</code> and <code>6: 7</code> and adding <code>8: 2</code> should have removed <code>3: 8</code> and <code>8: 3</code>.</p>

<p>We could fix this with a custom <code>update</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">items</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">items</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>
</span><span class='line'>        <span class="n">items</span> <span class="o">=</span> <span class="n">items</span><span class="o">.</span><span class="n">items</span><span class="p">()</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">items</span><span class="p">:</span>
</span><span class='line'>        <span class="bp">self</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
</span></code></pre></td></tr></table></div></figure>


<p>But calling the initializer doesn&rsquo;t work either:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d</span> <span class="o">=</span> <span class="n">TwoWayDict</span><span class="p">({</span><span class="mi">9</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">:</span> <span class="mi">2</span><span class="p">})</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d</span>
</span><span class='line'><span class="n">TwoWayDict</span><span class="p">({</span><span class="mi">9</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">:</span> <span class="mi">2</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>So we&rsquo;ll make a custom initializer that calls <code>update</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">items</span><span class="o">=</span><span class="p">()):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>But <code>pop</code> doesn&rsquo;t work:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d</span> <span class="o">=</span> <span class="n">TwoWayDict</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="o">=</span> <span class="mi">7</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d</span>
</span><span class='line'><span class="n">TwoWayDict</span><span class="p">({</span><span class="mi">9</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">7</span><span class="p">:</span> <span class="mi">9</span><span class="p">})</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span>
</span><span class='line'><span class="mi">7</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d</span>
</span><span class='line'><span class="n">TwoWayDict</span><span class="p">({</span><span class="mi">7</span><span class="p">:</span> <span class="mi">9</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And neither does <code>setdefault</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d</span> <span class="o">=</span> <span class="n">TwoWayDict</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d</span><span class="o">.</span><span class="n">setdefault</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d</span>
</span><span class='line'><span class="n">TwoWayDict</span><span class="p">({</span><span class="mi">4</span><span class="p">:</span> <span class="mi">2</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>The problem is the <code>pop</code> method doesn&rsquo;t actually call <code>__delitem__</code> and the <code>setdefault</code> method doesn&rsquo;t actually call <code>__setitem__</code>.</p>

<p>If we wanted to fix this problem, we have to completely re-implement <code>pop</code> and <code>setdefault</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">DEFAULT</span> <span class="o">=</span> <span class="nb">object</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TwoWayDict</span><span class="p">(</span><span class="nb">dict</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># ...</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">pop</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">DEFAULT</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">key</span> <span class="ow">in</span> <span class="bp">self</span> <span class="ow">or</span> <span class="n">default</span> <span class="ow">is</span> <span class="n">DEFAULT</span><span class="p">:</span>
</span><span class='line'>            <span class="n">value</span> <span class="o">=</span> <span class="bp">self</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>
</span><span class='line'>            <span class="k">del</span> <span class="bp">self</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">value</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">default</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">setdefault</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">key</span> <span class="ow">not</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is all very tedious though.
When inheriting from <code>dict</code> to create a custom dictionary, we&rsquo;d expect <code>update</code> and <code>__init__</code> would call <code>__setitem__</code> and <code>pop</code> and <code>setdefault</code> would call <code>__delitem__</code>.
But they don&rsquo;t!</p>

<p>Likewise, <code>get</code> and <code>pop</code> don&rsquo;t call <code>__getitem__</code>, as you might expect they would.</p>

<h2>Lists and sets have the same problem</h2>

<p>The <code>list</code> and <code>set</code> classes have similar problems to the <code>dict</code> class.
Let&rsquo;s take a look at an example.</p>

<p>We&rsquo;ll make a custom list that inherits from the <code>list</code> constructor and overrides the behavior of <code>__delitem__</code>, <code>__iter__</code>, and <code>__eq__</code>.
This list will customize <code>__delitem__</code> to not actually <em>delete</em> an item but to instead leave a &ldquo;hole&rdquo; where that item used to be.
The <code>__iter__</code> and <code>__eq__</code> methods will skip over this hole when comparing two <code>HoleList</code> classes as &ldquo;equal&rdquo;.</p>

<p>This class is a bit nonsensical (no it&rsquo;s not a Python Morsels exercise fortunately), but we&rsquo;re focused less on the class itself and more on the issue with inheriting from <code>list</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">HoleList</span><span class="p">(</span><span class="nb">list</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">HOLE</span> <span class="o">=</span> <span class="nb">object</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__delitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">index</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">HOLE</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>            <span class="n">item</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">__iter__</span><span class="p">()</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">item</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">HOLE</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__eq__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">other</span><span class="p">,</span> <span class="n">HoleList</span><span class="p">):</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">all</span><span class="p">(</span>
</span><span class='line'>                <span class="n">x</span> <span class="o">==</span> <span class="n">y</span>
</span><span class='line'>                <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">)</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">__eq__</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">f</span><span class="s">&quot;{type(self).__name__}({super().__repr__()})&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unrelated Aside: if you&rsquo;re curious about that <code>object()</code> thing, I explain why it&rsquo;s useful in <a href="https://treyhunner.com/2019/03/unique-and-sentinel-values-in-python/">my article about sentinel values in Python</a>.</p>

<p>If we make two <code>HoleList</code> objects and delete items from them such that they have the same non-hole items:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="n">HoleList</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">y</span> <span class="o">=</span> <span class="n">HoleList</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">del</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">del</span> <span class="n">y</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">del</span> <span class="n">x</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">del</span> <span class="n">y</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;ll see that they&rsquo;re equal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">==</span> <span class="n">y</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="nb">list</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span>
</span><span class='line'><span class="n">HoleList</span><span class="p">([</span><span class="o">&lt;</span><span class="nb">object</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x7f56bdf38120</span><span class="o">&gt;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">object</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x7f56bdf38120</span><span class="o">&gt;</span><span class="p">])</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">y</span>
</span><span class='line'><span class="n">HoleList</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">object</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x7f56bdf38120</span><span class="o">&gt;</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">object</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x7f56bdf38120</span><span class="o">&gt;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>But if we then ask them whether they&rsquo;re <em>not equal</em> we&rsquo;ll see that they&rsquo;re both <em>equal</em> and <em>not equal</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">==</span> <span class="n">y</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">!=</span> <span class="n">y</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="nb">list</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span>
</span><span class='line'><span class="n">HoleList</span><span class="p">([</span><span class="o">&lt;</span><span class="nb">object</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x7f56bdf38120</span><span class="o">&gt;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">object</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x7f56bdf38120</span><span class="o">&gt;</span><span class="p">])</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">y</span>
</span><span class='line'><span class="n">HoleList</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">object</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x7f56bdf38120</span><span class="o">&gt;</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">object</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x7f56bdf38120</span><span class="o">&gt;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>Normally in Python 3, overriding <code>__eq__</code> would customize the behavior of both equality (<code>==</code>) and inequality (<code>!=</code>) checks.
But not for <code>list</code> or <code>dict</code>: they define both <code>__eq__</code> and <code>__ne__</code> methods which means we need to override both.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">__ne__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="ow">not</span> <span class="p">(</span><span class="bp">self</span> <span class="o">==</span> <span class="n">other</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dictionaries suffer from this same problem: <code>__ne__</code> exists which means we need to be careful to override both <code>__eq__</code> and <code>__ne__</code> when inheriting from them.</p>

<p>Also like dictionaries, the <code>remove</code> and <code>pop</code> methods on lists don&rsquo;t call <code>__delitem__</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">y</span>
</span><span class='line'><span class="n">HoleList</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">object</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x7f56bdf38120</span><span class="o">&gt;</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">object</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x7f56bdf38120</span><span class="o">&gt;</span><span class="p">])</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">y</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">y</span>
</span><span class='line'><span class="n">HoleList</span><span class="p">([</span><span class="o">&lt;</span><span class="nb">object</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x7f56bdf38120</span><span class="o">&gt;</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">object</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x7f56bdf38120</span><span class="o">&gt;</span><span class="p">])</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">y</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">object</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x7f56bdf38120</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">y</span>
</span><span class='line'><span class="n">HoleList</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span> <span class="o">&lt;</span><span class="nb">object</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x7f56bdf38120</span><span class="o">&gt;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>We could again fix these issues by re-implementing the <code>remove</code> and <code>pop</code> methods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">remove</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class='line'>    <span class="n">index</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="k">del</span> <span class="bp">self</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
</span><span class='line'><span class="k">def</span> <span class="nf">pop</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">index</span><span class="o">=-</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>    <span class="n">value</span> <span class="o">=</span> <span class="bp">self</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
</span><span class='line'>    <span class="k">del</span> <span class="bp">self</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">value</span>
</span></code></pre></td></tr></table></div></figure>


<p>But this is a pain.
And who knows whether we&rsquo;re done?</p>

<p>Every time we customize a bit of core functionality on a <code>list</code> or <code>dict</code> subclass, we&rsquo;ll need to make sure we customize other methods that also include exactly the same functionality (but which don&rsquo;t delegate to the method we overrode).</p>

<h2>Why did the Python developers do this?</h2>

<p>From my understanding, the built-in <code>list</code>, <code>dict</code>, and <code>set</code> types have in-lined a lot of code for performance.
Essentially, they&rsquo;ve copy-pasted the same code between many different functions to avoid extra function calls and make things a tiny bit faster.</p>

<p>I haven&rsquo;t found a reference online that explains why this decision was made and what the consequences of the alternatives to this choice were.
But I mostly trust that this was done for my benefit as a Python developer.
If <code>dict</code> and <code>list</code> weren&rsquo;t faster this way, why would the core developers have chosen this odd implementation?</p>

<h2>What&rsquo;s the alternative to inheriting from list and dict?</h2>

<p>So inheriting from <code>list</code> to make a custom list was painful and inheriting from <code>dict</code> to create a custom dictionary was painful.
What&rsquo;s the alternative?</p>

<p>How can we create a custom dictionary-like object that <em>doesn&rsquo;t</em> inherit from the built-in <code>dict</code>?</p>

<p>There are a few ways to create custom dictionaries:</p>

<ol>
<li>Fully embrace duck typing: figure out everything you need for your data structure to be <code>dict</code>-like and create a completely custom class (that walks and quacks like a <code>dict</code>)</li>
<li>Inherit from a helper class that&rsquo;ll point us in the right direction and tell us which methods our object needs to be <code>dict</code>-like</li>
<li>Find a more extensible re-implementation of <code>dict</code> and inherit from it instead</li>
</ol>


<p>We&rsquo;re going to skip over the first approach: reimplementing everything from scratch will take a while and Python has some helpers that&rsquo;ll make things easier.
We&rsquo;re going to take a look at those helpers, first the ones that point us in the right direction (2 above) and then the ones that act as full <code>dict</code>-replacements (3 above).</p>

<h3>Abstract base classes: they&rsquo;ll help you quack like a duck</h3>

<p>Python&rsquo;s <a href="https://docs.python.org/3/library/collections.abc.html">collections.abc</a> module includes <strong>abstract base classes</strong> that can help us implement some of the common protocols (<em>interfaces</em> as Java calls them) seen in Python.</p>

<p>We&rsquo;re trying to make a dictionary-like object.
Dictionaries are <strong>mutable mappings</strong>.
A dictionary-like object is a mapping.
That word &ldquo;mapping&rdquo; comes from &ldquo;hash map&rdquo;, which is what many other programming languages call this kind of data structure.</p>

<p>So we want to make a mutable mapping.
The <code>collections.abc</code> module provides an abstract base class for that: <code>MutableMapping</code>!</p>

<p>If we inherit from this abstract base class, we&rsquo;ll see that we&rsquo;re required to implement certain methods for it to work:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">collections.abc</span> <span class="kn">import</span> <span class="n">MutableMapping</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">TwoWayDict</span><span class="p">(</span><span class="n">MutableMapping</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>     <span class="k">pass</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d</span> <span class="o">=</span> <span class="n">TwoWayDict</span><span class="p">()</span>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'><span class="ne">TypeError</span><span class="p">:</span> <span class="n">Can</span><span class="s">&#39;t instantiate abstract class TwoWayDict with abstract methods __delitem__, __getitem__, __iter__, __len__, __setitem__</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>MutableMapping</code> class requires us to say how getting, deleting, and setting items works, how iterating works, and how we get the length of our dictionary.
But once we do that, we&rsquo;ll get the <code>pop</code>, <code>clear</code>, <code>update</code>, and <code>setdefault</code> methods for free!</p>

<p>Here&rsquo;s a re-implementation of <code>TwoWayDict</code> using the <code>MutableMapping</code> abstract base class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">collections.abc</span> <span class="kn">import</span> <span class="n">MutableMapping</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TwoWayDict</span><span class="p">(</span><span class="n">MutableMapping</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="p">()):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">mapping</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">mapping</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__delitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
</span><span class='line'>        <span class="n">value</span> <span class="o">=</span> <span class="bp">self</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>
</span><span class='line'>        <span class="k">del</span> <span class="bp">self</span><span class="o">.</span><span class="n">mapping</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__setitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">key</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">:</span>
</span><span class='line'>            <span class="k">del</span> <span class="bp">self</span><span class="p">[</span><span class="bp">self</span><span class="p">[</span><span class="n">key</span><span class="p">]]</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">value</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">:</span>
</span><span class='line'>            <span class="k">del</span> <span class="bp">self</span><span class="p">[</span><span class="n">value</span><span class="p">]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">mapping</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">mapping</span><span class="p">[</span><span class="n">value</span><span class="p">]</span> <span class="o">=</span> <span class="n">key</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">iter</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">mapping</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__len__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">mapping</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">f</span><span class="s">&quot;{type(self).__name__}({self.mapping})&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unlike <code>dict</code>, these <code>update</code> and <code>setdefault</code> methods will call our <code>__setitem__</code> method and the <code>pop</code> and <code>clear</code> methods will call our <code>__delitem__</code> method.</p>

<p>Abstract base classes might make you think we&rsquo;re leaving the wonderful land of Python duck typing behind for some sort of strongly-typed <a href="https://en.wikipedia.org/wiki/Object-oriented_programming">OOP</a> land.
But abstract base classes actually enhance duck typing.
<strong>Inheriting from abstract base classes helps us be better ducks</strong>.
We don&rsquo;t have to worry about whether we&rsquo;ve implemented all the behaviors that make a mutable mapping because the abstract base class will yell at us if we forgot to specify some essential behavior.</p>

<p>The <code>HoleList</code> class we made before would need to inherit from the <code>MutableSequence</code> abstract base class.
A custom set-like class would probably inherit from the <code>MutableSet</code> abstract base class.</p>

<h3>UserList/UserDict: lists and dictionaries that are actually extensible</h3>

<p>When using the collection ABCs, <code>Mapping</code>, <code>Sequence</code>, <code>Set</code> (and their mutable children) you&rsquo;ll often find yourself creating a wrapper around an existing data structure.
If you&rsquo;re implementing a dictionary-like object, using a dictionary under the hood makes things easier: the same applies for lists and sets.</p>

<p>Python actually includes two even higher level helpers for creating list-like and dictionary-like classes which <strong>wrap around <code>list</code> and <code>dict</code> objects</strong>.
These two classes live in the <a href="https://docs.python.org/3/library/collections.html">collections</a> module as <a href="https://docs.python.org/3/library/collections.html#collections.UserList">UserList</a> and <a href="https://docs.python.org/3/library/collections.html#collections.UserDict">UserDict</a>.</p>

<p>Here&rsquo;s a re-implementation of <code>TwoWayDict</code> that inherits from <code>UserDict</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">UserDict</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TwoWayDict</span><span class="p">(</span><span class="n">UserDict</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__delitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
</span><span class='line'>        <span class="n">value</span> <span class="o">=</span> <span class="bp">self</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">__delitem__</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__setitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">key</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">:</span>
</span><span class='line'>            <span class="k">del</span> <span class="bp">self</span><span class="p">[</span><span class="bp">self</span><span class="p">[</span><span class="n">key</span><span class="p">]]</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">value</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">:</span>
</span><span class='line'>            <span class="k">del</span> <span class="bp">self</span><span class="p">[</span><span class="n">value</span><span class="p">]</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">f</span><span class="s">&quot;{type(self).__name__}({self.data})&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You may notice something interesting about the above code.</p>

<p>That code looks extremely similar to the code we originally wrote (the first version that had lots of bugs) when attempting to inherit from <code>dict</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">TwoWayDict</span><span class="p">(</span><span class="nb">dict</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__delitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
</span><span class='line'>        <span class="n">value</span> <span class="o">=</span> <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__setitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">key</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">:</span>
</span><span class='line'>            <span class="k">del</span> <span class="bp">self</span><span class="p">[</span><span class="bp">self</span><span class="p">[</span><span class="n">key</span><span class="p">]]</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">value</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">:</span>
</span><span class='line'>            <span class="k">del</span> <span class="bp">self</span><span class="p">[</span><span class="n">value</span><span class="p">]</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">__setitem__</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">f</span><span class="s">&quot;{type(self).__name__}({super().__repr__()})&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>__setitem__</code> method is identical, but the <code>__delitem__</code> method has some small differences.</p>

<p>It might seem from these two code blocks that <code>UserDict</code> just a better <code>dict</code>.
That&rsquo;s not quite right though: <code>UserDict</code> isn&rsquo;t a <code>dict</code> replacement so much as a <code>dict</code> wrapper.</p>

<p>The <code>UserDict</code> class implements the <em>interface</em> that dictionaries are supposed to have, but it wraps around an actual <code>dict</code> object under-the-hood.</p>

<p>Here&rsquo;s another way we could have written the above <code>UserDict</code> code, without any <code>super</code> calls:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">UserDict</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TwoWayDict</span><span class="p">(</span><span class="n">UserDict</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__delitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
</span><span class='line'>        <span class="n">value</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__setitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">key</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">:</span>
</span><span class='line'>            <span class="k">del</span> <span class="bp">self</span><span class="p">[</span><span class="bp">self</span><span class="p">[</span><span class="n">key</span><span class="p">]]</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">value</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">:</span>
</span><span class='line'>            <span class="k">del</span> <span class="bp">self</span><span class="p">[</span><span class="n">value</span><span class="p">]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="n">value</span><span class="p">]</span> <span class="o">=</span> <span class="n">key</span>
</span></code></pre></td></tr></table></div></figure>


<p>Both of these methods reference <code>self.data</code>, which we didn&rsquo;t define.</p>

<p>The <code>UserDict</code> class initializer makes a dictionary which it stores in <code>self.data</code>.
All of the methods on this dictionary-like <code>UserDict</code> class wrap around this <code>self.data</code> dictionary.
<code>UserList</code> works the same way, except its <code>data</code> attribute wraps around a <code>list</code> object.
If we want to customize one of the <code>dict</code> or <code>list</code> methods of these classes, we can just override it and change what it does.</p>

<p>You can think of <code>UserDict</code> and <code>UserList</code> as <strong>wrapper classes</strong>.
When we inherit from these classes, we&rsquo;re wrapping around a <code>data</code> attribute which we proxy all our method lookups to.</p>

<p>In fancy OOP speak, we might consider <code>UserDict</code> and <code>UserList</code> to be <a href="https://en.wikipedia.org/wiki/Adapter_pattern">adapter classes</a>.</p>

<h3>So should I use abstract base classes or UserDict and UserList?</h3>

<p>The <code>UserList</code> and <code>UserDict</code> classes were originally created long before the abstract base classes in <code>collections.abc</code>.
<code>UserList</code> and <code>UserDict</code> have been around (in some form at least) since before Python 2.0 was even released, but the <code>collections.abc</code> abstract base classes have only been around since Python 2.6.</p>

<p>The <code>UserList</code> and <code>UserDict</code> classes are for when you want something that acts almost identically to a list or a dictionary but you want to customize just a little bit of functionality.</p>

<p>The abstract base classes in <code>collections.abc</code> are useful when you want something that&rsquo;s a <em>sequence</em> or a <em>mapping</em> but is different enough from a list or a dictionary that you really should be making your own custom class.</p>

<h2>Does inheriting from list and dict ever make sense?</h2>

<p>Inheriting from <code>list</code> and <code>dict</code> isn&rsquo;t always bad.</p>

<p>For example, here&rsquo;s a perfectly functional version of a <code>DefaultDict</code> (which acts a little differently from <code>collections.defaultdict</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">DefaultDict</span><span class="p">(</span><span class="nb">dict</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">default</span> <span class="o">=</span> <span class="n">default</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__missing__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">default</span>
</span></code></pre></td></tr></table></div></figure>


<p>This <code>DefaultDict</code> uses the <code>__missing__</code> method to act as you&rsquo;d expect:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d</span> <span class="o">=</span> <span class="n">DefaultDict</span><span class="p">({</span><span class="s">&#39;a&#39;</span><span class="p">:</span> <span class="mi">8</span><span class="p">})</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d</span><span class="p">[</span><span class="s">&#39;a&#39;</span><span class="p">]</span>
</span><span class='line'><span class="mi">8</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d</span><span class="p">[</span><span class="s">&#39;b&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d</span>
</span><span class='line'><span class="p">{</span><span class="s">&#39;a&#39;</span><span class="p">:</span> <span class="mi">8</span><span class="p">}</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">e</span> <span class="o">=</span> <span class="n">DefaultDict</span><span class="p">({</span><span class="s">&#39;a&#39;</span><span class="p">:</span> <span class="mi">8</span><span class="p">},</span> <span class="n">default</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">e</span><span class="p">[</span><span class="s">&#39;a&#39;</span><span class="p">]</span>
</span><span class='line'><span class="mi">8</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">e</span><span class="p">[</span><span class="s">&#39;b&#39;</span><span class="p">]</span>
</span><span class='line'><span class="mi">4</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">e</span>
</span><span class='line'><span class="p">{</span><span class="s">&#39;a&#39;</span><span class="p">:</span> <span class="mi">8</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s no problem with inheriting from <code>dict</code> here because we&rsquo;re not overriding functionality that lives in many different places.</p>

<p>If you&rsquo;re changing functionality that&rsquo;s limited to a single method or adding your own custom method, it&rsquo;s probably worth inheriting from <code>list</code> or <code>dict</code> directly.
But if your change will require duplicating the same functionality in multiple places (as is often the case), consider reaching for one of the alternatives.</p>

<h2>When making a custom list or dictionary, remember you have options</h2>

<p>When creating your own set-like, list-like, or dictionary-like object, think carefully about how you need your object to work.</p>

<p>If you need to change some core functionality, inheriting from <code>list</code>, <code>dict</code>, or <code>set</code> will be painful and I&rsquo;d recommend against it.</p>

<p>If you&rsquo;re making a variation of <code>list</code> or <code>dict</code> and need to customize just a little bit of core functionality, consider inheriting from <code>collections.UserList</code> or <code>collections.UserDict</code>.</p>

<p>In general, if you&rsquo;re making something custom, you&rsquo;ll often want to reach for the abstract base classes in <code>collections.abc</code>.
For example if you&rsquo;re making a slightly more custom sequence or mapping (think <code>collections.deque</code>, <code>range</code>, and maybe <code>collections.Counter</code>) you&rsquo;ll want <code>MutableSequence</code> or <code>MutableMapping</code>.
And if you&rsquo;re making a custom set-like object, your only options are <code>collections.abc.Set</code> or <code>collections.abc.MutableSet</code> (there is no <code>UserSet</code>).</p>

<p>We don&rsquo;t need to create our own data structures very often in Python.
When you do need to create your own custom collections, wrapping around a data structure is a great idea.
Remember the <code>collections</code> and <code>collections.abc</code> modules when you need them!</p>

<h2>You don&rsquo;t learn by putting information into your head</h2>

<p>You don&rsquo;t learn by putting information into your head, you learn by trying to retrieve information <em>from</em> your head.
This knowledge about inheriting from <code>list</code> and <code>dict</code> and the <code>collections.abc</code> classes and <code>collections.UserList</code> and <code>collections.UserDict</code> isn&rsquo;t going to stick unless you try to apply it!</p>

<p>If you use the below form to sign up for Python Morsels, the first exercise you see when you sign up will involve creating your own custom mapping or sequence (it&rsquo;ll be a surprise which one).
After that first exercise, I&rsquo;ll send you one exercise every week for the next month.
By default they&rsquo;ll be <strong>intermediate-level</strong> exercises, though you can change your skill level after you sign up.</p>

<p><form method="post" action="https://www.pythonmorsels.com/accounts/signup/">
    <input type="email" name="email" placeholder="Your email" class="subscribe-email form-big" required>
    <input type="hidden" name="exercise_track" value="custom collection">
    <input type="hidden" name="form_id" value="inheriting from builtins">
    <button type="submit" class="subscribe-btn form-big">Get my Python Morsels exercise</button>
    <br></p>

<pre><code>&lt;small&gt;
I won't share you info with others (see the &lt;a href="https://www.pythonmorsels.com/privacy/"&gt;Python Morsels Privacy Policy&lt;/a&gt; for details).&lt;br&gt;
This form is reCAPTCHA protected (Google &lt;a href="https://policies.google.com/privacy"&gt;Privacy Policy&lt;/a&gt; &amp;amp; &lt;a href="https://policies.google.com/terms"&gt;TOS&lt;/a&gt;)
&lt;/small&gt;
</code></pre>

<p></form></p>

<p>If you&rsquo;d rather get more beginner-friendly exercises, use the Python Morsels sign up form on the right side of this page instead.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making the most of the PyCon sprints]]></title>
    <link href="https://treyhunner.com/2019/04/making-the-most-of-the-pycon-sprints/"/>
    <updated>2019-04-02T09:45:00-07:00</updated>
    <id>https://treyhunner.com/2019/04/making-the-most-of-the-pycon-sprints</id>
    <content type="html"><![CDATA[<p>I wrote a blog post last year, <a href="https://treyhunner.com/2018/04/how-to-make-the-most-of-your-first-pycon/">How to have a great first PyCon</a>, in which I gave quite a few tips for <strong>making the most of your time at PyCon</strong> (if you&rsquo;re a first time PyCon attendee, <a href="https://treyhunner.com/2018/04/how-to-make-the-most-of-your-first-pycon/">go read it</a>).
One thing I didn&rsquo;t mention <em>at all</em> in that article on PyCon was <a href="https://us.pycon.org/2019/community/sprints/">the sprints</a>.</p>

<p>I didn&rsquo;t mention the sprints not because I don&rsquo;t like them (I actually love the sprints and I usually attend at least the first two days of sprints every year), but because <strong>first-time PyCon attendees often don&rsquo;t stay for the sprints</strong>.
This is partly because the sprints can be very intimidating for first-time PyCon attendees.
The fear that <strong>the sprints aren&rsquo;t for me</strong> is a very real one.</p>

<p>This year PyCon has multiple options to help you have a successful sprint, including their annual &ldquo;Introduction to Sprinting Workshop&rdquo; on Sunday and, brand-new this year, the <a href="https://us.pycon.org/2019/hatchery/mentoredsprints/">mentored sprints</a> a hatchery track for underrepresented beginners.
The applications for the mentored sprints have closed for PyCon 2019, but that&rsquo;s something to keep an eye on for future PyCons.</p>

<p>In this post I&rsquo;m going to share some advice for <strong>how to get the most out of the PyCon sprints</strong> and I hope to <strong>address the fears that folks often feel</strong>. I&rsquo;m hoping this post might encourage you to add an extra day or two to your PyCon trip and give the sprints a try.</p>

<p>The sprints are a very different experience from the talk days at PyCon and <strong>they&rsquo;re hard to compare to the rest of PyCon</strong>.
Some people like the talks better, but I&rsquo;ve also talked to first time sprinters who said <strong>the sprints were their favorite part of the conference</strong>.</p>

<p>In this post I&rsquo;m going to share some advice for <strong>how to get the most out of the PyCon sprints</strong>.
I&rsquo;m hoping this post might encourage you to add an extra day or two to your PyCon trip and give the sprints a try.</p>

<ol data-toc=".entry-content"></ol>


<h2>Your fears going into the sprints</h2>

<p>We&rsquo;re going to start by addressing some common concerns.
I&rsquo;ve heard these concerns from folks I&rsquo;ve encouraged to stay for the sprints and from folks I&rsquo;ve interviewed about their advice for first-time sprinters.</p>

<h3>I&rsquo;m not experienced enough</h3>

<p>I&rsquo;ve <strong>never contributed to an open source project before</strong> and I don&rsquo;t really know what to do.
I&rsquo;m a <strong>junior programmer</strong> and I&rsquo;m afraid I&rsquo;m not experienced enough.
I <strong>don&rsquo;t write code for a living</strong> and I&rsquo;m afraid I won&rsquo;t be able to get anything done because I don&rsquo;t know how to <em>do</em> much yet.</p>

<p>The sprints are a great place for a first-time open source contributor.
Making a contribution to an open source project <strong>while sitting next to the maintainer</strong> is a unique experience.
If you contribute to open source at home or at work, you&rsquo;re unlikely to have a project maintainer nearby.</p>

<p>If you&rsquo;re a junior programmer or you don&rsquo;t code for a living <strong>you might be afraid of your inexperience</strong>: maybe you&rsquo;re pretty new to coding in general and you don&rsquo;t understand git, testing, version control, and GitHub.
But there&rsquo;s very likely a project for <em>you</em> to contribute to.
The sprints include sprint coordinators who can help <strong>point you to projects they&rsquo;ve heard are particularly beginner-friendly</strong> or who have quite a bit of <strong>low-hanging fruit in their issue tracker for newcomers to dig into</strong> (something as simple as updating the on-boarding documentation can be a great benefit to maintainers).</p>

<h3>It&rsquo;ll be too fast-paced for me</h3>

<p>You might think the sprints involve smart people coding for many hours on end, racing against the clock.
This is false.
From my experience, sprints usually aren&rsquo;t like that at all.</p>

<p>There are some very smart people at the sprints, but there are a lot of newcomers too.
Everyone at the sprints is new to <em>something</em> and most of us are <a href="https://youtu.be/hIJdFxYlEKE?t=333">mediocre programmers</a> (who are more skilled in some areas and less skilled in others).</p>

<p>The &ldquo;pace&rdquo; of the sprints is really up to you.
The name &ldquo;sprints&rdquo; is kind of a misnomer: <strong>I never find myself <em>sprinting</em> while at the sprints</strong>.</p>

<p>I&rsquo;ve attended at least one day of sprints at PyCon US for each of the last 5 years and my sprint experience has almost always consisted of:</p>

<ul>
<li>Some <strong>high level conversation</strong> about an intriguing feature, topic, or idea</li>
<li>Some <strong>low level conversation</strong> about how pieces of a project work (conversations about the inner-workings of a project are so much easier to have in-person)</li>
<li>Some <strong>writing time</strong>.  Sometimes this is writing code.  Sometimes this is writing text copy for documentation or marketing material.  Sometimes it&rsquo;s my own writing time for a talk or article I&rsquo;m working on.</li>
<li>Some <strong>rubber duck time</strong>.  I often wander around asking people what they&rsquo;re working on and sometimes act as their <a href="https://en.wikipedia.org/wiki/Rubber_duck_debugging">rubber duck</a>.  I also often wander around seeking my own rubber duck if I get stuck on a particular topic or idea (whether on my own personal project or an open source project I&rsquo;m contributing to).</li>
<li>Plenty of <strong>personal break time</strong>.  I very often take mental breaks during the sprints to wander the halls, often aimlessly.  Breaks feel great, but they also often help my subconscious work on a task for a bit while my conscious mind rests.</li>
</ul>


<p>Sprints are what you make them: some people prefer many hours of furious coding with their earbuds in most of the day but many people prefer something that looks a bit more like <strong>coworking with new friends in a coffee shop</strong>. Sprints are an intense experience for some people, but they don&rsquo;t have to be intense for you.</p>

<p>My sprints are often more relaxed than the conference and many of the best conversations I have during PyCon come out of the sprints.</p>

<h3>I won&rsquo;t be able to get enough done while I&rsquo;m there</h3>

<p>If you&rsquo;re only planning to be at the sprints for one day, <strong>can you really expect to get up to speed quickly enough to accomplish something meaningful</strong>?</p>

<p>This fear is very real for all sprint attendees.</p>

<p>If you&rsquo;re just getting started on contributing to a new (to you) code base, <strong>you may not be able to submit a viable change (often in the form of a pull request) by the end of the day</strong>.</p>

<p>This fear is about framing: <strong>what is your goal at the sprints</strong>?</p>

<p>If your goal is to get a pull request merged into an open source project by the end of the day, try to find something minor that needs fixing in the documentation, website styling, or something else that the project maintainer agrees needs fixing.
It&rsquo;s much easier to <strong>get a minor change merged</strong> if you get an early start and pick a small issue.</p>

<p>But if your goal is to make a more substantial improvement to a project, then you probably won&rsquo;t get much code merged (if any) by the end of the day.
For bigger changes, you&rsquo;ll likely <strong>start your work at the sprints and continue it at home</strong>, often with help from the project maintainers (via comments on pull request and/or emails).</p>

<h2>What to expect from the sprints</h2>

<p>What can you really expect while attending the sprints?
What is sprinting really like?</p>

<h3>Some projects are easier to sprint on than others</h3>

<p>Different projects sprint in different ways.
Many projects <strong>go out of their way to welcome contributions from newcomers</strong>, some projects may struggle a little in welcoming newcomers, and a few projects might hold a sprint that&rsquo;s focused entirely on engaging existing contributors since they might not meet to work in-person often (but you&rsquo;re unlikely to stumble upon those).</p>

<p>If you&rsquo;re not sure what project you&rsquo;d like to sprint on during first day at the sprints, <strong>I recommend picking a project to sprint on that seems particularly newcomer friendly</strong>.
The <a href="https://us.pycon.org/2019/community/sprints/">Pycon Sprints page</a> has several projects that will be sprinting and after the conference ends on Sunday evening you&rsquo;ll get a chance to hear many of the sprinting projects come on stage and tell you who they are and how you can help.
Alternatively (or additionally), if you&rsquo;ve identified a project that particularly suits your interests, <strong>talk to the maintainers</strong> and see if they think (and you think) their project would be a good fit for you.</p>

<p>Keep in mind that <strong>newer projects and smaller projects often have more to be done</strong>.
It can be quite challenging to find issues that need fixing in big and stable projects like CPython and Django, but newer or smaller projects often need more help.</p>

<p>It&rsquo;s also usually more fun to be <strong>a big fish in a small pond</strong> rather than a small fish in a big pond.
It might take you the same amount of effort to make a small improvement to a big project as it takes to make a big change to a small project.</p>

<h3>The maintainers are there to help you</h3>

<p>During the sprints, project maintainers are there to help you.
Project maintainers can quietly write code at home, but it&rsquo;s hard for them to encourage <em>you</em> to quietly write code at home.
So <strong>many project maintainers consider it their primary responsibility to help you contribute to their project during the sprints</strong>.</p>

<p>The maintainers of projects are usually focused on <strong>enabling your contributions during the sprints</strong> because they want your help.
If you contribute to a project during the sprints, it&rsquo;s more likely you&rsquo;ll decide to contribute to the project again <em>after</em> the sprints.
That would be great for the maintainers (they&rsquo;re getting your help) and might be quite fun for you too.</p>

<p>You might be thinking &ldquo;surely, the maintainers can&rsquo;t be there entirely to help me&rdquo;.
And you&rsquo;re right: a number of maintainers do contribute code to their own projects during the sprints.
Generally the amount of code maintainers commit to their projects increases as the sprints stretch on.
There are far fewer people on the third and fourth days of sprints than on the first and second days.
If a maintainer stays for all four days of the sprints, they&rsquo;re much more likely to commit code to their own project as the number of sprinters working on their project dwindles and as those still working start to need a bit less help than they did on the first day.
<strong>During the first couple days of the sprints, most maintainers are there primarily to help you</strong>.</p>

<h3>The sprints can be more relaxing than the talks</h3>

<p>The talk days of PyCon can be pretty overwhelming.
<strong>The sprints are a bit more structured</strong> (in a sort of odd semi-structured way) because everyone at the sprints is working on something together (or at least they&rsquo;re working on something <em>and</em> they&rsquo;re together).</p>

<p>The sprints are <strong>sort of like an introvert party</strong>: everyone is sitting at tables next to each other, sometimes talking and sometimes working quietly, but always sitting next to other humans without the need to constantly talk and interact.
And even if you&rsquo;re <em>not</em> working on the same thing as someone else, <strong>you&rsquo;re still a PyCon person in a room with other PyCon people, doing whatever it is you&rsquo;re all doing</strong>.</p>

<p>For some people the sprints really are a sprint, but for most of us <strong>the sprints are more like an endurance run</strong>, one with <em>plenty</em> of breaks.</p>

<h3>Contributing at the sprints is often easier than online</h3>

<p><strong>Contributing to open source projects at the sprints is usually easier than contributing online</strong>.
The ease of in-person communication often makes the experience less intimidating.</p>

<p>It&rsquo;s easier to express oneself and empathize during face-to-face communication than over text-based communication.
Emoji are great, but they&rsquo;re not a substitute for body language and tone of voice.</p>

<p>It feels less awkward to chat with a project maintainer about your goals and your skill level in-person than via a GitHub pull request.</p>

<p>Little bits of seemingly meaningless conversation happen while folks sit next to each other for hours: conversation about weather, hobbies, what we thought of our lunch, pop culture, and whatever else comes up.
That kind of natural conversation brings people closer together and makes us feel more comfortable communicating later, whether in-person or online.</p>

<p>Continued communication online is also often easier <em>after</em> face-to-face communication.
After you&rsquo;ve met a project maintainer in-person, you&rsquo;ll likely find communicating online via their issue tracker less intimidating because <strong>you and the maintainer already know each other</strong>.</p>

<p>The in-person nature of the sprints makes them a uniquely favorable place for your first open source contribution.</p>

<h2>How to get the most out of the sprints</h2>

<p>The sprints are a unique experience that <em>might</em> give you a greater sense of community, purpose, and belonging than the (often not quite as communal) talk days of the conference.</p>

<p>What steps can you take to increase the likelihood that you&rsquo;ll have a wonderful time at the PyCon sprints?</p>

<h3>Don&rsquo;t underestimate your skills</h3>

<p>If you&rsquo;re trying to get a feel for what project might be a good fit for you, let the maintainers know what skills you do and don&rsquo;t have and <strong>see if you get a good vibe</strong> from both the maintainers and the project.
If you do, run with it!</p>

<p>If you&rsquo;re afraid you won&rsquo;t have something to contribute, remember that, like businesses, <strong>open source projects have a wide variety of needs</strong>.</p>

<p>If you know something about marketing, you can offer to sit with project maintainers and <strong>help them improve their marketing materials</strong>.
At PyCon 2016 I interviewed some project maintainers and then crafted slogans and wrote marketing copy that explained what problem their project solved and who needed it.
I feel those were some of the most valuable contributions I made in a pretty short amount of time.</p>

<p>If you&rsquo;re pretty good at design, you could offer to <strong>create visuals for projects</strong> (maybe logos, diagrams, or other visualizations).</p>

<p>If you know CSS or JavaScript, you could find <strong>a web-based project that needs help with their front-end</strong>.
Being the &ldquo;front-end dev among Pythonistas&rdquo; or the &ldquo;UX person among developers&rdquo; can really help you make uniquely helpful contributions to projects.</p>

<p>Also keep in mind that there are often small projects that you can make big contributions to at the sprints simply because they&rsquo;re in great need.
Sometimes people even start a project <em>at the sprints</em> because it&rsquo;s easier to get help from others when <strong>you&rsquo;re in a room full of folks who might know a few things about the technology you&rsquo;re using</strong>.
If you join a newer or smaller project at the sprints (or start your own), you&rsquo;ll often be able to find a whole bunch of low-hanging fruit that hasn&rsquo;t been taken care of only because no one has had the time to work on it yet.</p>

<h3>Attend the intro to the sprints the night before</h3>

<p>Some maintainers list their projects on the <a href="https://us.pycon.org/2019/community/sprints/">PyCon sprints page</a> to note that they&rsquo;ll be attending the sprints.
Some maintainers simply announce their project during <strong>the sprint pitches after</strong> the main conference closing, on the last day of talks (Sunday).
If you are looking for a project, stick around after the last talk of the day and dozens of maintainers will walk up on the big stage to give an elevator pitch for the project they&rsquo;re sprinting on, with each pitch taking about a minute.</p>

<p>During the sprint pitches, each maintainer will talk about what their project is, what kind of help they&rsquo;re most in need of (fitting as much as they can in the very few seconds they have) and generally close with some commentary on whether their project is a good fit for newcomers.
You don&rsquo;t have to attend the sprint pitches, but doing so will increase your chances of hearing about <strong>a project that you&rsquo;d actually really like to work on</strong>.</p>

<p>Another thing to pay attention to on the last day of talks is the hands-on <strong>Introduction to Sprinting tutorial</strong> on Sunday evening.
The Intro to Sprinting tutorial is open to walk-ins (first-come, first-served) and is purposely held after the main conference closing so you won&rsquo;t need to miss any talks.</p>

<p>Last year the Intro to Sprinting tutorial room filled up pretty quickly, so rest assured you won&rsquo;t be alone.
Definitely try to get the Intro to Sprinting workshop on your calendar (once the room and time are announced) and show up on-time if you can.</p>

<h3>Try to prepare yourself for the setup time</h3>

<p>Getting started on a new project can take a lot of time, so try to prepare yourself and your development environment as much as you can early on.</p>

<p>Make sure you have git, GitHub, a code editor, and a modern version (maybe multiple versions) of Python installed on your machine.</p>

<p><strong>Get an early start if possible</strong>.
The setup process can take a long time for some projects. Many projects will have a documentation page set up with instructions on what to install and how to install it. But be aware&hellip; sometimes the setup process is a little buggy and <strong>the first pull request you make to a project may be related to improving the setup instructions</strong>.</p>

<p>If you show up to sprints early, you might be able to pick a project and get that project setup on your machine before break time.
If you&rsquo;re feeling extra ambitious, <strong>you could even get a head start and prepare your machine the night before the sprints</strong>.
I&rsquo;ve never done this because I&rsquo;m rarely feeling ambitious, but I know some folks do this to make sure they can get in a little more quality sprinting time on the first day.</p>

<p>Another way to prepare yourself for setup time is to stay longer.
If you&rsquo;re staying for 2 or 3 days of sprints, you can take it easy and spend more time on setup and getting your footing during the first day.
That way you&rsquo;ll feel <strong>more confident and more independent on the second day</strong>.
If you stay more than one day, you might also get the opportunity to <strong>sprint on two different projects</strong> if you decide you&rsquo;d like to switch projects on day 2 (or even mid-day if you&rsquo;d like).</p>

<p>Oh and another way to prepare yourself: remember your laptop and your laptop charger (and if you&rsquo;re from outside the US, a power adapter if needed).</p>

<h3>Ask for help</h3>

<p>If the maintainer of the project your sprinting on is in the room they&rsquo;re likely there because <strong>they want to help you contribute to their project</strong>.
On day 1 of sprints, project maintainers tend to prioritize helping you, over writing their own code.
<strong>Please don&rsquo;t forget to ask for help when you need it</strong>.</p>

<p>Also if you&rsquo;re stuck on laptop setup issues, the PyCon sprint coordinators will be hosting <strong>a help desk during the first day of sprints</strong> (on Monday).
The help desk is a great place to get yourself unstuck when you have a general issue that could use another set of eyes.</p>

<p>If you&rsquo;re at the sprints to learn, you do want to struggle <em>some</em>.
Struggling is a great way to learn, but don&rsquo;t let yourself flounder for too long on issues that aren&rsquo;t your area of expertise.
If you get stuck, attempt to fix your problem by trial-and-error and Googling, talk to your neighbor or your <a href="https://en.wikipedia.org/wiki/Rubber_duck_debugging">rubber duck</a> and <strong>after you&rsquo;ve given yourself some time to troubleshoot, ask for help</strong>!</p>

<h3>Plan to follow-through when home (if you&rsquo;d like)</h3>

<p>Keep in mind that you may not complete your work at the sprints.
You&rsquo;re likely to find yourself <strong>still in the middle of a pull request back-and-forth at the end of your sprints</strong>.
Pull requests often require more work before merging.
Expect to get started at the sprints, but not necessarily to finish while you&rsquo;re there.</p>

<p>If you plan to complete your pull request at home, <strong>ask the project maintainer what form of remote communication would be best for questions you have regarding contributions</strong>.</p>

<h3>Empathize with others</h3>

<p>Your project maintainer may not show up early on day 1 and they might even leave early, depending on what their plans and schedule look like.
If they&rsquo;re at the Sunday night pitches or if you interact with them during PyCon, you might consider asking them when they plan to be present and how they plan to operate (will they be writing code or helping others write code or both).</p>

<p>When sprinting, try to empathize with your project maintainer.
Empathy is challenging during remote open source contributions, but it can be a struggle even for in-person contributions.</p>

<p>Consider what your project maintainer&rsquo;s motivations likely are and remember that they&rsquo;re often trying to balance <strong>getting many new contributors to their project</strong>, <strong>getting bugs fixed</strong>, and <strong>maintaining the quality and consistency of their code base</strong>.
Balancing multiple goals which sometimes compete with each other can be a challenge.</p>

<p>Text-based communication is hard, so <strong>seize your face-to-face communication while you&rsquo;re at the sprints</strong> and try to get a sense for how your project maintainer thinks.
If you do decide to contribute more after the sprints are over, <strong>that in-person empathy can help you continue to empathize remotely as well</strong>.</p>

<p>Some other places you may want to use empathy: empathizing with users of your code/documentation/design (someone is going to use your work) and the other sprinters in the room with you.
It&rsquo;s nice to congratulate your fellow sprinters when they get their code working or if they get a pull request accepted.</p>

<p>If you bring snacks, candy, donuts, or a small power strip to expand one power strip port into multiple, <strong>your kindness might give you happy neighbors at the sprints</strong>.</p>

<h3>Be kind to yourself</h3>

<p>Don&rsquo;t go into the sprints with a very specific thing that you absolutely must do: have a goal but <strong>allow yourself to change your goal</strong> as you learn new information about your environment.
<strong>Be flexible and be forgiving with yourself</strong>.</p>

<p>You&rsquo;re allowed to <strong>switch projects</strong> at any time, as often as you like, and for any reason you like (i.e. the project isn&rsquo;t as interesting as you hoped, the onboarding process isn&rsquo;t as smooth as you expected, or the project isn&rsquo;t a good fit for you).
If you need to switch projects, don&rsquo;t feel you need to offer elaborate explanations.</p>

<p>You&rsquo;re allowed to <strong>stop sprinting</strong> at any time and <strong>take a break</strong>.
You aren&rsquo;t obligated to follow through on a pull request you opened (it&rsquo;d be lovely if you did, but you don&rsquo;t <em>have</em> to).</p>

<p>Time-wise, there&rsquo;s lots of flexibility at the sprints.
The maintainer of the project you&rsquo;re sprinting on might get an early start or they might not show up until later on the first day of sprints.
You need to give yourself flexibility as well.</p>

<p>Don&rsquo;t feel obligated at the sprints: you don&rsquo;t have to make a code change, <strong>you don&rsquo;t have to be productive</strong>, you don&rsquo;t have to show up at a certain time or stay for a certain amount of time, and <strong>you don&rsquo;t even have to sprint on an open source project</strong> (I frequently don&rsquo;t).</p>

<p>If you&rsquo;d like to take half of a sprint day to explore the city you&rsquo;re in with a new friend (or on your own because you need personal time), go for it!</p>

<p>Embrace self-care at the sprints, whatever that means for you.</p>

<h3>Remember that sprints are lots of things to lots of people</h3>

<p>During my first PyCon sprint in 2014, I helped a project figure out how to migrate from Python 2 to Python 3.
The project maintainer wasn&rsquo;t looking forward to that migration so they were grateful to have another brain troubleshooting with them.</p>

<p>But during that sprint I also got an idea for a contribution to another project (Django), was encouraged to pursue the idea, and <a href="https://github.com/django/deps/pull/4">a few weeks after the sprints</a> I proposed the idea publicly.
After my suggestion sat without feedback, I sort of abandoned it.</p>

<p>But at the PyCon 2015 sprints the next year, I brought up my abandoned idea to a Django core developer and they offered to shepherd my change through, so I <a href="https://github.com/django/deps/pull/13">continued my efforts</a> during the sprints.
A couple weeks after the sprints ended I <a href="https://github.com/django/deps/pull/14">finished up the idea at home</a> and finally <a href="https://github.com/django/django/pull/4573">implemented the changes</a>, which were eventually merged (after <a href="https://github.com/django/deps/pull/15/files">some scope tweaks</a>).</p>

<p>My first two years of PyCon sprints involved some substantial code contributions that I hadn&rsquo;t expected to make.
Most of the changes I made were <strong>started at the sprints but finished at home</strong>.</p>

<p>The sprints were a source of idea generation and inspiration, not a place to get lots of work done.
Since 2015 I&rsquo;ve started sprinting on <em>ideas</em> more than code.</p>

<p>During my PyCon 2016 sprints I helped a few open source projects improve their marketing copy (so someone hitting their website would better understand what their project did and who it was for).
My pull requests during these sprints were text-based changes, not code changes.</p>

<p>My PyCon 2017 sprints involved a lot of community work: discussions with folks about the PSF and the new Code of Conduct working group.
I spent much more time in Google Docs tweaking documents than I did using git.</p>

<p>My sprints at PyCon 2018 involved writing talk proposals, meeting with new friends, and chatting with core developers about the soon-to-be-written <a href="https://www.python.org/dev/peps/pep-0582/">PEP 582</a>.
I don&rsquo;t think I made any contributions to open source projects (outside of possibly inspiring a bullet point or two in that PEP).
But I had a great time and sitting quietly in the sprint rooms helped me get a lot of work done on my talk proposals.</p>

<p><strong>The sprints aren&rsquo;t one thing</strong>.
If you&rsquo;re not feeling like a code contribution is the thing you&rsquo;d like to do during the sprints, get creative!
<strong>Your time at the sprints can be spent however you&rsquo;d like it to be</strong>.</p>

<h2>Running your own sprint</h2>

<p>This could be a whole article on its own, but I want to give a few quick tips for folks who might be attempting to run a sprint for their own project.</p>

<p>While I&rsquo;ve maintained open source projects remotely, I haven&rsquo;t run an in-person sprint on my own projects.
So my tips on running a sprint on your own project come from the perspective of a contributor and a floating helper for maintainers who needed an extra hand.</p>

<p>As a project maintainer on day 1 of sprints, <strong>I&rsquo;d consider your primary responsibility to be one of helping encourage other contributors</strong>.
You want to help folks get their environment setup, help folks identify good issues to work on, help folks with their code contributions, and even help other contributors as they help out their neighbors.</p>

<p><strong>Your job often isn&rsquo;t to write code</strong>, it&rsquo;s to be <em>interrupted</em> by people who are trying to make contributions but need your help.</p>

<p>For the in-person, in-the-moment part of running a sprint I have <a href="http://trey.io/pycascades2019">a whole talk and a bunch of related resources</a> for folks who are coaching others in-person.
But your job doesn&rsquo;t start <em>at the sprints</em>.
Ideally, you&rsquo;ll want to <strong>prepare your project for the sprints</strong> a while before the sprints even start.</p>

<p>Many projects use issue labels to indicate <strong>issues which are specifically good for first-time contributors</strong> (something like &ldquo;newcomer&rdquo;, &ldquo;good first issue&rdquo;, &ldquo;first-timers only&rdquo;, etc.).
I&rsquo;d recommend looking at <a href="https://github.com/MunGell/awesome-for-beginners#python">the many other contributor-friendly projects</a>, studying what they do, and figuring out <strong>how you can make your project more friendly to new sprinters</strong>.</p>

<p>The PyCon sprints page also recommends this <a href="https://opensourceevents.github.io/">in-person events handbook</a> made by the OpenHatch folks.
Take a look at it!
And if you can, <strong>ask questions of other project maintainers you admire who will also be sprinting</strong>: how do they ensure newcomers feel appreciated, how do they help folks feel accomplished, what do they do to get their project and their minds ready?</p>

<h2>Take note of the key events</h2>

<p>Put the events you&rsquo;ll be attending for the PyCon 2019 sprints in your calendar!</p>

<p>The sprint pitches are on the last talk day at PyCon, just after the closing of the main conference.
The Intro to Sprints tutorial usually starts just after that.
And during the first day of sprints the next day, the sprint help desk will be available to help you get some extra help on day 1.</p>

<p>Also remember the mentored sprints (if you&rsquo;ve gone through the application process already) which are designed for underrepresented groups and are on Saturday during the talks.</p>

<h2>Ask others what they think of the sprints</h2>

<p>Much of the above advice was borrowed or enhanced by wisdom from others.
I&rsquo;ve held interviews with folks during the last few PyCon sprints, I&rsquo;ve asked folks online what they think of the sprints, and I&rsquo;ve chatted with first-time sprinters about what their concerns were going into the sprints.
If you shared your sprint experiences with me in the past, thank you.</p>

<p>If you&rsquo;re still uncertain about whether you should attend a sprint, please talk to others about what they think of the PyCon sprints.
I&rsquo;ve found that most PyCon attendees are more than happy to talk about their perspective on the various parts of the conference they&rsquo;ve partaken in.</p>

<p>If you can&rsquo;t afford to stay for the sprints, I completely understand.
Most PyCon attendees will not be staying for the sprints.
But if you&rsquo;re lucky enough to have the time and resources to stay, I&rsquo;d suggest giving it a try.</p>

<p>If you can afford to schedule some extra time to attend a day or two of sprints and then decide that the sprints aren&rsquo;t for you, that time could always be spent exploring the city you&rsquo;re in, working, or doing something else that makes you feel whole.</p>

<p>And if you&rsquo;re from an underrepresented or marginalized group in tech and you&rsquo;re new to sprinting, consider applying for the <a href="https://us.pycon.org/2019/hatchery/mentoredsprints/">mentored sprints</a> for PyCon 2020.</p>

<p>Whatever you decide, have a lovely PyCon! 💖</p>

<p>Thanks to Asheesh Laroia for encouraging this post and Chalmer Lowe for quite a bit of helpful feedback while I was writing it.
Thanks also to the many folks who sent me ideas and shared their perspective and advice about the sprints.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Overusing list comprehensions and generator expressions in Python]]></title>
    <link href="https://treyhunner.com/2019/03/abusing-and-overusing-list-comprehensions-in-python/"/>
    <updated>2019-03-26T13:30:00-07:00</updated>
    <id>https://treyhunner.com/2019/03/abusing-and-overusing-list-comprehensions-in-python</id>
    <content type="html"><![CDATA[<p>List comprehensions are one of my favorite features in Python.
I love list comprehensions so much that I&rsquo;ve written an <a href="https://treyhunner.com/2015/12/python-list-comprehensions-now-in-color/" title="List Comprehensions: Explain Visually">article</a> about them, done <a href="https://youtu.be/5_cJIcgM7rw" title="Comprehensible Comprehensions">a talk</a> about them, and held a <a href="https://youtu.be/_6U1XoxyyBY" title="Using List Comprehensions and Generator Expressions For Data Processing">3 hour comprehensions tutorial</a> at PyCon 2018.</p>

<p>While I love list comprehensions, I&rsquo;ve found that once new Pythonistas start to really appreciate comprehensions they tend to use them everywhere.
<strong>Comprehensions are lovely, but they can easily be overused</strong>!</p>

<p>This article is all about cases when comprehensions aren&rsquo;t the best tool for the job, at least in terms of readability.
We&rsquo;re going to walk through a number of cases where there&rsquo;s a more readable alternative to comprehensions and we&rsquo;ll also see some not-so-obvious cases where comprehensions aren&rsquo;t needed at all.</p>

<p>This article isn&rsquo;t meant to scare you off from comprehensions if you&rsquo;re not already a fan; it&rsquo;s meant to encourage moderation for those of us (myself included) who need it.</p>

<p><strong>Note</strong>: In this article, I&rsquo;ll be using the term &ldquo;comprehension&rdquo; to refer to all forms of comprehensions (list, set, dict) as well as generator expressions.
If you&rsquo;re unfamiliar with comprehensions, I recommend reading <a href="https://treyhunner.com/2015/12/python-list-comprehensions-now-in-color/" title="List Comprehensions: Explain Visually">this article</a> or watching <a href="https://youtu.be/5_cJIcgM7rw" title="Comprehensible Comprehensions">this talk</a> (the talk dives into generator expressions a bit more deeply).</p>

<ul data-toc=".entry-content"></ul>


<h2>Writing comprehensions with poor spacing</h2>

<p>Critics of list comprehensions often say they&rsquo;re hard to read.
And they&rsquo;re right, many comprehensions <em>are</em> hard to read.
<strong>Sometimes all a comprehension needs to be more readable is better spacing</strong>.</p>

<p>Take the comprehension in this function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_factors</span><span class="p">(</span><span class="n">dividend</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Return a list of all factors of the given number.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">n</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">dividend</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="k">if</span> <span class="n">dividend</span> <span class="o">%</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>We could make that comprehension more readable by adding some well-placed line breaks:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_factors</span><span class="p">(</span><span class="n">dividend</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Return a list of all factors of the given number.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span>
</span><span class='line'>        <span class="n">n</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">dividend</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">dividend</span> <span class="o">%</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>    <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Less code can mean more readable code, but not always.
<strong>Whitespace is your friend, especially when you&rsquo;re writing comprehensions</strong>.</p>

<p>In general, I prefer to write most of my comprehensions <strong>spaced out over multiple lines of code</strong> using the indentation style above.
I do write one-line comprehensions sometimes, but I don&rsquo;t default to them.</p>

<h2>Writing ugly comprehensions</h2>

<p>Some loops technically <em>can</em> be written as comprehensions but they have so much logic in them they probably <em>shouldn&rsquo;t</em> be.</p>

<p>Take this comprehension:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">fizzbuzz</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="n">f</span><span class="s">&#39;fizzbuzz {n}&#39;</span> <span class="k">if</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">else</span> <span class="n">f</span><span class="s">&#39;fizz {n}&#39;</span> <span class="k">if</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">else</span> <span class="n">f</span><span class="s">&#39;buzz {n}&#39;</span> <span class="k">if</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">else</span> <span class="n">n</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This comprehension is equivalent to this <code>for</code> loop:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">fizzbuzz</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">):</span>
</span><span class='line'>    <span class="n">fizzbuzz</span><span class="o">.</span><span class="n">append</span><span class="p">(</span>
</span><span class='line'>        <span class="n">f</span><span class="s">&#39;fizzbuzz {n}&#39;</span> <span class="k">if</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">else</span> <span class="n">f</span><span class="s">&#39;fizz {n}&#39;</span> <span class="k">if</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">else</span> <span class="n">f</span><span class="s">&#39;buzz {n}&#39;</span> <span class="k">if</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">else</span> <span class="n">n</span>
</span><span class='line'>    <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Both the comprehension and the <code>for</code> loop use three nested <a href="https://docs.python.org/3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator">inline if statements</a> (Python&rsquo;s <a href="https://en.wikipedia.org/wiki/%3F:">ternary operator</a>).</p>

<p>Here&rsquo;s a more readable way to write this code, using an <code>if-elif-else</code> construct:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">fizzbuzz</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="n">fizzbuzz</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">f</span><span class="s">&#39;fizzbuzz {n}&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="n">fizzbuzz</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">f</span><span class="s">&#39;fizz {n}&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>        <span class="n">fizzbuzz</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">f</span><span class="s">&#39;buzz {n}&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="n">fizzbuzz</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just because there <em>is</em> a way to write your code as a comprehension, <strong>that doesn&rsquo;t mean that you <em>should</em> write your code as a comprehension</strong>.</p>

<p>Be careful using any amount of complex logic in comprehensions, even a single <a href="https://docs.python.org/3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator">inline if</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">number_things</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="n">n</span> <span class="o">//</span> <span class="mi">2</span> <span class="k">if</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">else</span> <span class="n">n</span> <span class="o">*</span> <span class="mi">3</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">numbers</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you really prefer to use a comprehension in cases like this, at least give some thought to <strong>whether whitespace or parenthesis could make things more readable</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">number_things</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">(</span><span class="n">n</span> <span class="o">//</span> <span class="mi">2</span> <span class="k">if</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">else</span> <span class="n">n</span> <span class="o">*</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">numbers</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>And consider whether breaking some of your logic out into a separate function might improve readability as well (it may not in this somewhat silly example).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">number_things</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="n">even_odd_number_switch</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">numbers</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Whether a separate function makes things more readable will depend on how important that operation is, how large it is, and how well the function name conveys the operation.</p>

<h2>Loops disguised as comprehensions</h2>

<p>Sometimes you&rsquo;ll encounter code that uses a comprehension syntax but breaks the spirit of what comprehensions are used for.</p>

<p>For example, this code looks like a comprehension:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">[</span><span class="k">print</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">11</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure>


<p>But it doesn&rsquo;t <em>act</em> like a comprehension.
We&rsquo;re using a comprehension for a purpose it wasn&rsquo;t intended for.</p>

<p>If we execute this comprehension in the Python shell you&rsquo;ll see what I mean:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="p">[</span><span class="k">print</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">11</span><span class="p">)]</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="mi">4</span>
</span><span class='line'><span class="mi">5</span>
</span><span class='line'><span class="mi">6</span>
</span><span class='line'><span class="mi">7</span>
</span><span class='line'><span class="mi">8</span>
</span><span class='line'><span class="mi">9</span>
</span><span class='line'><span class="mi">10</span>
</span><span class='line'><span class="p">[</span><span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>We wanted to print out all the numbers from 1 to 10 and that&rsquo;s what we did.
But this comprehension statement also returned a list of <code>None</code> values to us, which we promptly discarded.</p>

<p><strong>Comprehensions build up lists: that&rsquo;s what they&rsquo;re for</strong>.
We built up a list of the return values from the <code>print</code> function and the <code>print</code> function returns <code>None</code>.</p>

<p>But we didn&rsquo;t care about the list our comprehension built up: we only cared about its side effect.</p>

<p>We could have instead written that code like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">11</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>List comprehensions are for <strong>looping over an iterable and building up new lists</strong>, while <code>for</code> loops are for <strong>looping over an iterable to do pretty much any operation you&rsquo;d like</strong>.</p>

<p>When I see a list comprehension in code <strong>I immediately assume that we&rsquo;re building up a new list</strong> (because that&rsquo;s what they&rsquo;re for).
If you use a comprehension for <strong>a purpose outside of building up a new list</strong>, it&rsquo;ll confuse others who read your code.</p>

<p>If you don&rsquo;t care about building up a new list, don&rsquo;t use a comprehension.</p>

<h2>Using comprehensions when a more specific tool exists</h2>

<p>For many problems, a more specific tool makes more sense than a general purpose <code>for</code> loop.
<strong>But comprehensions aren&rsquo;t always the best special-purpose tool for the job at hand.</strong></p>

<p>I have both seen and written quite a bit of code that looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">csv</span>
</span><span class='line'>
</span><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;populations.csv&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">csv_file</span><span class="p">:</span>
</span><span class='line'>    <span class="n">lines</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>        <span class="n">row</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">csv</span><span class="o">.</span><span class="n">reader</span><span class="p">(</span><span class="n">csv_file</span><span class="p">)</span>
</span><span class='line'>    <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>That comprehension is sort of an <em>identity</em> comprehension.
Its only purpose is to loop over the given iterable (<code>csv.reader(csv_file)</code>) and create a list out of it.</p>

<p>But in Python, we have a more specialized tool for this task: the <code>list</code> constructor.
Python&rsquo;s <code>list</code> constructor can do all the looping and list creation work for us:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">csv</span>
</span><span class='line'>
</span><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;populations.csv&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">csv_file</span><span class="p">:</span>
</span><span class='line'>    <span class="n">lines</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">csv</span><span class="o">.</span><span class="n">reader</span><span class="p">(</span><span class="n">csv_file</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Comprehensions are a special-purpose tool for looping over an iterable to build up a new list while modifying each element along the way and/or filtering elements down.
The <code>list</code> constructor is a special-purpose tool for looping over an iterable to build up a new list, without changing anything at all.</p>

<p>If you don&rsquo;t need to filter your elements down or map them into new elements while building up your new list, <strong>you don&rsquo;t need a comprehension: you need the <code>list</code> constructor</strong>.</p>

<p>This comprehension converts each of the <code>row</code> tuples we get from looping over <code>zip</code> into lists:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">transpose</span><span class="p">(</span><span class="n">matrix</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Return a transposed version of given list of lists.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">[</span><span class="n">n</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">row</span><span class="p">]</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="n">matrix</span><span class="p">)</span>
</span><span class='line'>    <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>We could use the <code>list</code> constructor for that too:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">transpose</span><span class="p">(</span><span class="n">matrix</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Return a transposed version of given list of lists.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span>
</span><span class='line'>        <span class="nb">list</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="n">matrix</span><span class="p">)</span>
</span><span class='line'>    <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Whenever you see a comprehension like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">some_iterable</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>You could write this instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">my_list</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">some_iterable</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The same applies for <code>dict</code> and <code>set</code> comprehensions.</p>

<p>This is also something I&rsquo;ve written quite a bit in the past:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">states</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;AL&#39;</span><span class="p">,</span> <span class="s">&#39;Alabama&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;AK&#39;</span><span class="p">,</span> <span class="s">&#39;Alaska&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;AZ&#39;</span><span class="p">,</span> <span class="s">&#39;Arizona&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;AR&#39;</span><span class="p">,</span> <span class="s">&#39;Arkansas&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;CA&#39;</span><span class="p">,</span> <span class="s">&#39;California&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="c"># ...</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">abbreviations_to_names</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">abbreviation</span><span class="p">:</span> <span class="n">name</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">abbreviation</span><span class="p">,</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">states</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we&rsquo;re looping over a list of two-item tuples and making a dictionary out of them.</p>

<p>This task is exactly what the <code>dict</code> constructor was made for:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">abbreviations_to_names</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">states</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The built-in <code>list</code> and <code>dict</code> constructors aren&rsquo;t the only comprehension-replacing tools.
The standard library and third-party libraries also include tools that are sometimes better suited for your looping needs than a comprehension.</p>

<p>Here&rsquo;s a generator expression that sums up an iterable-of-iterables-of-numbers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">sum_all</span><span class="p">(</span><span class="n">number_lists</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Return the sum of all numbers in the given list-of-lists.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">sum</span><span class="p">(</span>
</span><span class='line'>        <span class="n">n</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">numbers</span> <span class="ow">in</span> <span class="n">number_lists</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">numbers</span>
</span><span class='line'>    <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here&rsquo;s the same thing using <code>itertools.chain</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">chain</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sum_all</span><span class="p">(</span><span class="n">number_lists</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Return the sum of all numbers in the given list-of-lists.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">sum</span><span class="p">(</span><span class="n">chain</span><span class="o">.</span><span class="n">from_iterable</span><span class="p">(</span><span class="n">number_lists</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>When you should use a comprehension and when you should use the alternative isn&rsquo;t always straightforward.</p>

<p>I&rsquo;m often torn on whether to use <code>itertools.chain</code> or a comprehension.
I usually write my code both ways and then go with the one that seems clearer.</p>

<p>Readability is fairly problem-specific with many programming constructs, comprehensions included.</p>

<h2>Needless work</h2>

<p>Sometimes you&rsquo;ll see comprehensions that shouldn&rsquo;t be replaced by another construct but should instead be <strong>removed entirely</strong>, leaving only the iterable they loop over.</p>

<p>Here we&rsquo;re opening up a file of words (with one word per line), storing file in memory, and counting the number of times each occurs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">Counter</span>
</span><span class='line'>
</span><span class='line'><span class="n">word_counts</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">(</span>
</span><span class='line'>    <span class="n">word</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;word_list.txt&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span><span class="o">.</span><span class="n">splitlines</span><span class="p">()</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;re using a generator expression here, but we don&rsquo;t need to be.
This works just as well:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">Counter</span>
</span><span class='line'>
</span><span class='line'><span class="n">word_counts</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="s">&#39;word_list.txt&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">()</span><span class="o">.</span><span class="n">splitlines</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>We were looping over a list to convert it to a generator before passing it to the <code>Counter</code> class.
That was needless work!
The <code>Counter</code> class accepts <strong>any iterable: it doesn&rsquo;t care whether they&rsquo;re lists, generators, tuples, or something else</strong>.</p>

<p>Here&rsquo;s another needless comprehension:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;word_list.txt&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">words_file</span><span class="p">:</span>
</span><span class='line'>    <span class="n">lines</span> <span class="o">=</span> <span class="p">[</span><span class="n">line</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">words_file</span><span class="p">]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="s">&#39;z&#39;</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="s">&#39;z word&#39;</span><span class="p">,</span> <span class="n">line</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;re looping over <code>words_file</code>, converting it to a list of <code>lines</code>, and then looping over <code>lines</code> just once.
That conversion to a list was unnecessary.</p>

<p>We could just loop over <code>words_file</code> directly instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;word_list.txt&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">words_file</span><span class="p">:</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">words_file</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="s">&#39;z&#39;</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="s">&#39;z word&#39;</span><span class="p">,</span> <span class="n">line</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s no reason to convert an iterable to a list if all we&rsquo;re going to do is loop over it once.</p>

<p>In Python, we often care less about <strong>whether something is a list</strong> and more about <strong>whether it&rsquo;s an iterable</strong>.</p>

<p>Be careful not to create new iterables when you don&rsquo;t need to: <strong>if you&rsquo;re only going to loop over an iterable once, just use the iterable you already have</strong>.</p>

<h2>When would I use a comprehension?</h2>

<p>So when would you actually use a comprehension?</p>

<p>The simple but imprecise answer is whenever you can write your code in the below <a href="https://treyhunner.com/2015/12/python-list-comprehensions-now-in-color/" title="List Comprehensions: Explain Visually">comprehension copy-pasteable format</a> and there isn&rsquo;t another tool you&rsquo;d rather use for shortening your code, you should consider using a list comprehension.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">new_things</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">ITEM</span> <span class="ow">in</span> <span class="n">old_things</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">condition_based_on</span><span class="p">(</span><span class="n">ITEM</span><span class="p">):</span>
</span><span class='line'>        <span class="n">new_things</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">some_operation_on</span><span class="p">(</span><span class="n">ITEM</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>That loop can be rewritten as this comprehension:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">new_things</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="n">some_operation_on</span><span class="p">(</span><span class="n">ITEM</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">ITEM</span> <span class="ow">in</span> <span class="n">old_things</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">condition_based_on</span><span class="p">(</span><span class="n">ITEM</span><span class="p">)</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The complex answer is whenever comprehensions make sense, you should consider them.
That&rsquo;s not really an answer, but there is no one answer to the question &ldquo;when should I use a comprehension&rdquo;?</p>

<p>For example here&rsquo;s a <code>for</code> loop which doesn&rsquo;t really look like it could be rewritten using a comprehension:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">is_prime</span><span class="p">(</span><span class="n">candidate</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">candidate</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">candidate</span> <span class="o">%</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>But there is in fact another way to write this loop using a generator expression, if we know how to use the built-in <code>all</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">is_prime</span><span class="p">(</span><span class="n">candidate</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">all</span><span class="p">(</span>
</span><span class='line'>        <span class="n">candidate</span> <span class="o">%</span> <span class="n">n</span> <span class="o">!=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">candidate</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I wrote <a href="https://treyhunner.com/2016/11/check-whether-all-items-match-a-condition-in-python/">a whole article on the <code>any</code> and <code>all</code> functions</a> and how they pair so nicely with generator expressions.
But <code>any</code> and <code>all</code> aren&rsquo;t alone in their affinity for generator expressions.</p>

<p>We have a similar situation with this code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">sum_of_squares</span><span class="p">(</span><span class="n">numbers</span><span class="p">):</span>
</span><span class='line'>    <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">:</span>
</span><span class='line'>        <span class="n">total</span> <span class="o">+=</span> <span class="n">n</span><span class="o">**</span><span class="mi">2</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">total</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s no <code>append</code> there and no new iterable being built up.
But if we create a generator of squares, we could pass them to the built-in <code>sum</code> function to get the same result:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">sum_of_squares</span><span class="p">(</span><span class="n">numbers</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">sum</span><span class="p">(</span><span class="n">n</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So in addition to the &ldquo;can I copy-paste my way from a loop to a comprehension&rdquo; check, there&rsquo;s another, fuzzier, check to consider: could your code be enhanced by a generator expression combined with an iterable-accepting function or class?</p>

<p>Any function or class that <strong>accepts an iterable as an argument</strong> <em>might</em> be a good candidate for <strong>combining with a generator expression</strong>.</p>

<h2>Use list comprehensions thoughtfully</h2>

<p>List comprehensions can make your code more readable (if you don&rsquo;t believe me, see the examples in my <a href="https://youtu.be/5_cJIcgM7rw" title="Comprehensible Comprehensions">Comprehensible Comprehensions</a> talk), but they can definitely be abused.</p>

<p>List comprehensions are a special-purpose tool for solving a specific problem.
The <code>list</code> and <code>dict</code> constructors are <strong>even more special-purpose tools</strong> for solving even more specific problems.</p>

<p>Loops are <strong>a more general purpose tool</strong> for times when you have a problem that doesn&rsquo;t fit within the realm of comprehensions or another special-purpose looping tool.</p>

<p>Functions like <code>any</code>, <code>all</code>, and <code>sum</code>, and classes like <code>Counter</code> and <code>chain</code> are iterable-accepting tools that <strong>pair very nicely with comprehensions</strong> and sometimes <strong>replace the need for comprehensions entirely</strong>.</p>

<p>Remember that comprehensions are for a single purpose: <strong>creating a new iterable from an old iterable</strong>, while tweaking values slightly along the way and/or for filtering out values that don&rsquo;t match a certain condition.
Comprehensions are a lovely tool, but <strong>they&rsquo;re not your only tool</strong>.
Don&rsquo;t forget the <code>list</code> and <code>dict</code> constructors and always consider <code>for</code> loops when your comprehensions get out of hand.</p>

<h2>Practice Python list comprehensions right now!</h2>

<p><strong>The best way to learn</strong> is through <strong>regular practice</strong>.
Every week I send out carefully crafted Python exercises through my Python skill-building service, <a href="https://www.pythonmorsels.com/">Python Morsels</a>.</p>

<p>If you&rsquo;d like to practice your comprehensions through one Python exercise right now, you can sign up for <a href="https://www.pythonmorsels.com/">Python Morsels</a> using the form below.
After you sign up, I&rsquo;ll immediately give you <strong>one exercise to practice your comprehension copy-pasting skills</strong>.</p>

<p><form method="post" action="https://www.pythonmorsels.com/accounts/signup/">
    <label><input type="radio" name="exercise_track" value="comprehension4"> I&rsquo;m pretty much an expert at comprehensions</label>
    <br>
    <label><input type="radio" name="exercise_track" value="comprehension3"> I use comprehensions quite often</label>
    <br>
    <label><input type="radio" name="exercise_track" value="comprehension2"> I understand comprehensions, I just don&rsquo;t write them much</label>
    <br>
    <label><input type="radio" name="exercise_track" value="comprehension1"> What&rsquo;s a comprehension?</label>
    <br>
    <br>
  <input type="email" name="email" placeholder="Your email" class="subscribe-email form-big" required>
  <input type="hidden" name="form_id" value="overusing comprehensions">
  <button type="submit" class="subscribe-btn form-big">Get my Python Morsels exercise</button>
<br></p>

<p><small>
I won&rsquo;t share you info with others (see the <a href="https://www.pythonmorsels.com/privacy/">Python Morsels Privacy Policy</a> for details).<br>
This form is reCAPTCHA protected (Google <a href="https://policies.google.com/privacy">Privacy Policy</a> &amp; <a href="https://policies.google.com/terms">TOS</a>)
</small></p>

<p></form></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unique sentinel values, identity checks, and when to use object() instead of None]]></title>
    <link href="https://treyhunner.com/2019/03/unique-and-sentinel-values-in-python/"/>
    <updated>2019-03-20T07:30:00-07:00</updated>
    <id>https://treyhunner.com/2019/03/unique-and-sentinel-values-in-python</id>
    <content type="html"><![CDATA[<p>Occasionally in Python (and in programming in general), you&rsquo;ll need an object which can be uniquely identified.
Sometimes this unique object represents a <strong>stop value</strong> or a <strong>skip value</strong> and sometimes it&rsquo;s an <strong>initial value</strong>.
But in each of these cases you want your object to stand out from the other objects you&rsquo;re working with.</p>

<p>When you need a unique value (a <strong>sentinel value</strong> maybe) <code>None</code> is often the value to reach for.
But sometimes <code>None</code> isn&rsquo;t enough: sometimes <code>None</code> is ambiguous.</p>

<p>In this article we&rsquo;ll talk about when <code>None</code> isn&rsquo;t enough, I&rsquo;ll show you how I create unique values when <code>None</code> doesn&rsquo;t cut it, and we&rsquo;ll see a few different uses for this technique.</p>

<ul data-toc=".entry-content"></ul>


<h2>Initial values and default values</h2>

<p>Let&rsquo;s re-implement a version of Python&rsquo;s built-in <code>min</code> function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">min</span><span class="p">(</span><span class="n">iterable</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Imperfect re-implementation of Python&#39;s built-in min function.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">minimum</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">iterable</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">minimum</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">or</span> <span class="n">item</span> <span class="o">&lt;</span> <span class="n">minimum</span><span class="p">:</span>
</span><span class='line'>            <span class="n">minimum</span> <span class="o">=</span> <span class="n">item</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">minimum</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">minimum</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">default</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">default</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;Empty iterable&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This <code>min</code> function, like the built-in one, returns the minimum value in the given iterable or raises an exception when an empty iterable is given unless a default value is specified (in which case the default is returned).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">min</span><span class="p">([</span><span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">7</span><span class="p">])</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">min</span><span class="p">([</span><span class="mi">9</span><span class="p">])</span>
</span><span class='line'><span class="mi">9</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">min</span><span class="p">([])</span>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">12</span><span class="p">,</span> <span class="ow">in</span> <span class="nb">min</span>
</span><span class='line'><span class="ne">ValueError</span><span class="p">:</span> <span class="n">Empty</span> <span class="n">iterable</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">min</span><span class="p">([],</span> <span class="n">default</span><span class="o">=</span><span class="mi">9</span><span class="p">)</span>
</span><span class='line'><span class="mi">9</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">min</span><span class="p">([</span><span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">7</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="mi">9</span><span class="p">)</span>
</span><span class='line'><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<p>This behavior is somewhat similar to the built-in <code>min</code> function, except <strong>our code is buggy</strong>!</p>

<p>There are two bugs here.</p>

<p>First, an iterable containing a single <code>None</code> value will be treated as if it was an empty iterable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">min</span><span class="p">([</span><span class="bp">None</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="mi">0</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">min</span><span class="p">([</span><span class="bp">None</span><span class="p">])</span>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">8</span><span class="p">,</span> <span class="ow">in</span> <span class="nb">min</span>
</span><span class='line'><span class="ne">ValueError</span><span class="p">:</span> <span class="n">Empty</span> <span class="n">iterable</span>
</span></code></pre></td></tr></table></div></figure>


<p>Second, if we specify our <code>default</code> value as <code>None</code> this <code>min</code> function won&rsquo;t accept it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">min</span><span class="p">([],</span> <span class="n">default</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">min</span><span class="p">([],</span> <span class="n">default</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">12</span><span class="p">,</span> <span class="ow">in</span> <span class="nb">min</span>
</span><span class='line'><span class="ne">ValueError</span><span class="p">:</span> <span class="n">Empty</span> <span class="n">iterable</span>
</span></code></pre></td></tr></table></div></figure>


<p>Why is this happening?</p>

<p>It&rsquo;s all about <code>None</code>.</p>

<h2>Why is <code>None</code> a problem?</h2>

<p>The first bug in our code is related to the initial value for <code>minimum</code> and the second is related to the default value for our <code>default</code> argument.
In both cases, <strong>we&rsquo;re using <code>None</code> to represent an <em>unspecified</em> or <em>un-initialized</em> value</strong>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">min</span><span class="p">(</span><span class="n">iterable</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Imperfect re-implementation of Python&#39;s built-in min function.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">minimum</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">iterable</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">minimum</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">or</span> <span class="n">item</span> <span class="o">&lt;</span> <span class="n">minimum</span><span class="p">:</span>
</span><span class='line'>            <span class="n">minimum</span> <span class="o">=</span> <span class="n">item</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">minimum</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">minimum</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">default</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">default</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;Empty iterable&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using <code>None</code> is a problem in both cases because <code>None</code> is both a valid value for <code>default</code> and a valid value in our iterable.</p>

<p>Python&rsquo;s <code>None</code> value is useful for representing emptiness, but it isn&rsquo;t magical, at least not any more magical than any other valid value.</p>

<p>If we need a truly unique value for our default state, we need to invent our own.</p>

<p>When <code>None</code> isn&rsquo;t a valid input for your function, it&rsquo;s perfectly fine to use it to represent a unique default or initial state.
But <code>None</code> is often valid data, which means <strong><code>None</code> is sometimes a poor choice for a unique initial state</strong>.</p>

<p>We&rsquo;ll fix both of our bugs by using <code>object()</code>: a somewhat common convention for creating a truly unique value in Python.</p>

<p>First we&rsquo;ll set <code>minimum</code> to a unique object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">min</span><span class="p">(</span><span class="n">iterable</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Imperfect re-implementation of Python&#39;s built-in min function.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">initial</span> <span class="o">=</span> <span class="nb">object</span><span class="p">()</span>
</span><span class='line'>    <span class="n">minimum</span> <span class="o">=</span> <span class="n">initial</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">iterable</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">minimum</span> <span class="ow">is</span> <span class="n">initial</span> <span class="ow">or</span> <span class="n">item</span> <span class="o">&lt;</span> <span class="n">minimum</span><span class="p">:</span>
</span><span class='line'>            <span class="n">minimum</span> <span class="o">=</span> <span class="n">item</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">minimum</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">initial</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">minimum</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">default</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">default</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;Empty iterable&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>That <code>initial</code> variable holds our unique value so we can check for its presence later.</p>

<p>This fixes the first bug:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">min</span><span class="p">([</span><span class="bp">None</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">min</span><span class="p">([</span><span class="bp">None</span><span class="p">])</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">min</span><span class="p">([])</span>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">13</span><span class="p">,</span> <span class="ow">in</span> <span class="nb">min</span>
</span><span class='line'><span class="ne">ValueError</span><span class="p">:</span> <span class="n">Empty</span> <span class="n">iterable</span>
</span></code></pre></td></tr></table></div></figure>


<p>But not the second.</p>

<p>To fix the second bug we need to use a different default value for our <code>default</code> argument (other than <code>None</code>).</p>

<p>To do this, we&rsquo;ll make a global &ldquo;constant&rdquo; (by convention) variable, <code>INITIAL</code>, outside our function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">INITIAL</span> <span class="o">=</span> <span class="nb">object</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">min</span><span class="p">(</span><span class="n">iterable</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">INITIAL</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Imperfect re-implementation of Python&#39;s built-in min function.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">minimum</span> <span class="o">=</span> <span class="n">INITIAL</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">iterable</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">minimum</span> <span class="ow">is</span> <span class="n">INITIAL</span> <span class="ow">or</span> <span class="n">item</span> <span class="o">&lt;</span> <span class="n">minimum</span><span class="p">:</span>
</span><span class='line'>            <span class="n">minimum</span> <span class="o">=</span> <span class="n">item</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">minimum</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">INITIAL</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">minimum</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">default</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">INITIAL</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">default</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;Empty iterable&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now our code works exactly how we&rsquo;d hope it would:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">min</span><span class="p">([</span><span class="bp">None</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">min</span><span class="p">([</span><span class="bp">None</span><span class="p">])</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">min</span><span class="p">([],</span> <span class="n">default</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">min</span><span class="p">([],</span> <span class="n">default</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">min</span><span class="p">([</span><span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">])</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">min</span><span class="p">([</span><span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">min</span><span class="p">([])</span>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">12</span><span class="p">,</span> <span class="ow">in</span> <span class="nb">min</span>
</span><span class='line'><span class="ne">ValueError</span><span class="p">:</span> <span class="n">Empty</span> <span class="n">iterable</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s lovely&hellip; but what is this magical <code>object()</code> thing?
Why does it work, how does it work, and when should we use it?</p>

<h2>What is <code>object()</code>?</h2>

<p>Every class in Python has a base class of <code>object</code> (in Python 3 that is&hellip; things were a bit weirder in Python 2).</p>

<p>So <code>object</code> is a class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">object</span>
</span><span class='line'><span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">object</span><span class="s">&#39;&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="nb">object</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">type</span><span class="s">&#39;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we call <code>object</code> we&rsquo;re creating an &ldquo;instance&rdquo; of the object class, just as calling any other class (when given the correct arguments) will create instances of them:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">set</span><span class="p">()</span>
</span><span class='line'><span class="nb">set</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">bytearray</span><span class="p">()</span>
</span><span class='line'><span class="nb">bytearray</span><span class="p">(</span><span class="n">b</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">frozenset</span><span class="p">()</span>
</span><span class='line'><span class="nb">frozenset</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>So we&rsquo;re creating an instance of <code>object</code>.
But&hellip; why?</p>

<p>Well, an instance of <code>object</code> shouldn&rsquo;t be seen as equal to any other object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="nb">object</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">y</span> <span class="o">=</span> <span class="nb">object</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">==</span> <span class="n">y</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">4</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">==</span> <span class="bp">None</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">==</span> <span class="p">[]</span>
</span><span class='line'><span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>Except itself:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="nb">object</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">z</span> <span class="o">=</span> <span class="n">x</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">==</span> <span class="n">z</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>Python&rsquo;s <code>None</code> is similar, except that <em>anyone</em> can get access to this unique <code>None</code> object anywhere in their code by just typing <code>None</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">y</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">==</span> <span class="n">y</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="nb">object</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">y</span> <span class="o">=</span> <span class="nb">object</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">==</span> <span class="n">y</span>
</span><span class='line'><span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>We needed a placeholder value in our code.
<code>None</code> is a lovely placeholder as long as <strong>we don&rsquo;t need to worry about distinguishing between <em>our</em> <code>None</code> and <em>their</em> <code>None</code></strong>.</p>

<p>If <code>None</code> is valid <em>data</em>, it&rsquo;s no longer just a placeholder.
At that point, we need to start reaching for <code>object()</code> instead.</p>

<h2>Equality vs identity</h2>

<p>I noted that <code>object()</code> isn&rsquo;t <em>equal</em> to anything else.
But we weren&rsquo;t actually checking for equality (using <code>==</code> or <code>!=</code>) in our function:</p>

<p>Instead of <code>==</code> and <code>!=</code>, we used <code>is</code> and <code>is not</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">INITIAL</span> <span class="o">=</span> <span class="nb">object</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">min</span><span class="p">(</span><span class="n">iterable</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">INITIAL</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Imperfect re-implementation of Python&#39;s built-in min function.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">minimum</span> <span class="o">=</span> <span class="n">INITIAL</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">iterable</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">minimum</span> <span class="ow">is</span> <span class="n">INITIAL</span> <span class="ow">or</span> <span class="n">item</span> <span class="o">&lt;</span> <span class="n">minimum</span><span class="p">:</span>
</span><span class='line'>            <span class="n">minimum</span> <span class="o">=</span> <span class="n">item</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">minimum</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">INITIAL</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">minimum</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">default</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">INITIAL</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">default</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;Empty iterable&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>While <code>==</code> and <code>!=</code> are equality operators, <code>is</code> and <code>is not</code> are <strong>identity operators</strong>.</p>

<p>Python&rsquo;s <code>is</code> operator asks about the <strong>identity</strong> of an object: are the two objects on either side of the <code>is</code> operator actually the same exact object.</p>

<p>We&rsquo;re not just asking <em>are they equal</em>, but are they stored in <em>the same place in memory</em> and in fact refer to the same exact object.</p>

<p>Two of the variables below (<code>x</code> and <code>z</code>) point to the same object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="nb">object</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">y</span> <span class="o">=</span> <span class="nb">object</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">z</span> <span class="o">=</span> <span class="n">x</span>
</span></code></pre></td></tr></table></div></figure>


<p>So while <code>y</code> has a unique ID in memory, <code>x</code> and <code>z</code> do not:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">id</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'><span class="mi">140079600030400</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">id</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="mi">140079561403808</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">id</span><span class="p">(</span><span class="n">z</span><span class="p">)</span>
</span><span class='line'><span class="mi">140079600030400</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which means <code>x</code> is <em>identical</em> to <code>z</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="ow">is</span> <span class="n">y</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="ow">is</span> <span class="n">z</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>By default, Python&rsquo;s <code>==</code> operator delegates to <code>is</code>.
Meaning unless two variables point to the exact some object in memory, <code>==</code> will return <code>False</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="nb">object</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">y</span> <span class="o">=</span> <span class="nb">object</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">z</span> <span class="o">=</span> <span class="n">x</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">==</span> <span class="n">x</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">==</span> <span class="n">y</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">==</span> <span class="n">z</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is true <em>by default</em>&hellip; but many objects in Python overload the <code>==</code> operator to do much more useful things when we ask about equality.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">0</span> <span class="o">==</span> <span class="mf">0.0</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span> <span class="o">==</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="p">{}</span> <span class="o">==</span> <span class="p">{}</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each object can <strong>customize the behavior of <code>==</code></strong> to answer whatever question they&rsquo;d like.</p>

<p>Which means someone could make a class like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">AlwaysEqual</span><span class="p">:</span>
</span><span class='line'><span class="o">...</span>     <span class="k">def</span> <span class="nf">__eq__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>         <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>And suddenly our assumption about <code>==</code> with <code>object()</code> (or any other value) will fail us:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="nb">object</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">y</span> <span class="o">=</span> <span class="n">AlwaysEqual</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="ow">is</span> <span class="n">y</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">==</span> <span class="n">y</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Use identity to compare unique objects</h2>

<p>The <code>is</code> operator, unlike <code>==</code>, is not overloadable.
<strong>Unlike with <code>==</code>, there&rsquo;s no way to control or change what happens when you say <code>x is y</code>.</strong></p>

<p>There&rsquo;s a <code>__eq__</code> method, but there&rsquo;s no such thing as a <code>__is__</code> method.
Which means the <code>is</code> operator will never lie to you: it will always tell you whether two objects are one in the same.</p>

<p>If we use <code>is</code> instead of <code>==</code>, we could actually use any unique object to represent our unique <code>INITIAL</code> value.</p>

<p>Even an empty list:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">INITIAL</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">min</span><span class="p">(</span><span class="n">iterable</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">INITIAL</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Imperfect re-implementation of Python&#39;s built-in min function.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">minimum</span> <span class="o">=</span> <span class="n">INITIAL</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">iterable</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">minimum</span> <span class="ow">is</span> <span class="n">INITIAL</span> <span class="ow">or</span> <span class="n">item</span> <span class="o">&lt;</span> <span class="n">minimum</span><span class="p">:</span>
</span><span class='line'>            <span class="n">minimum</span> <span class="o">=</span> <span class="n">item</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">minimum</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">INITIAL</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">minimum</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">default</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">INITIAL</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">default</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;Empty iterable&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>An empty list might seem problematic in the same way as <code>None</code> was: but they&rsquo;re actually quite different.</p>

<p>We don&rsquo;t have any of the same issues as we did with <code>None</code> before:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">min</span><span class="p">([[]],</span> <span class="n">default</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">[]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">min</span><span class="p">([[]])</span>
</span><span class='line'><span class="p">[]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">min</span><span class="p">([],</span> <span class="n">default</span><span class="o">=</span><span class="p">[])</span>
</span><span class='line'><span class="p">[]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The reason is that <code>None</code> is a <a href="https://en.wikipedia.org/wiki/Singleton_pattern">singleton value</a>.
That means that whenever you say <code>None</code> in your Python code, you&rsquo;re referencing the exact same <code>None</code> object every time.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">y</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="ow">is</span> <span class="n">y</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">id</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="nb">id</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="mi">94548887510464</span><span class="p">,</span> <span class="mi">94548887510464</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Whereas every empty list we make creates a brand new list object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">y</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="ow">is</span> <span class="n">y</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">id</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="nb">id</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="mi">140079561624776</span><span class="p">,</span> <span class="mi">140079598927432</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So while two independent empty lists may be <em>equal</em>, they aren&rsquo;t the same object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">y</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">==</span> <span class="n">y</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="ow">is</span> <span class="n">y</span>
</span><span class='line'><span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>The objects that those <code>x</code> and <code>y</code> variables point to have <strong>the same value</strong> but are <strong>not actually the same object</strong>.</p>

<h2>None is a placeholder value</h2>

<p>Python&rsquo;s <code>None</code> is lovely.
<code>None</code> is a universal placeholder value.
Need a placeholder?
Great!
Python has a great placeholder value and it&rsquo;s called <code>None</code>!</p>

<p>There are lots of places where Python itself actually uses <code>None</code> as a placeholder value also.</p>

<p>If you pass no arguments to the string <code>split</code> method, that&rsquo;s the same as passing a separator value of <code>None</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;hello world&quot;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;hello&#39;</span><span class="p">,</span> <span class="s">&#39;world&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;hello&#39;</span><span class="p">,</span> <span class="s">&#39;world&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you pass in a <code>key</code> function of <code>None</code> to the <code>sorted</code> builtin, that&rsquo;s the same as passing in no <code>key</code> function at all:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39; &#39;</span><span class="p">,</span> <span class="s">&#39;d&#39;</span><span class="p">,</span> <span class="s">&#39;e&#39;</span><span class="p">,</span> <span class="s">&#39;h&#39;</span><span class="p">,</span> <span class="s">&#39;l&#39;</span><span class="p">,</span> <span class="s">&#39;l&#39;</span><span class="p">,</span> <span class="s">&#39;l&#39;</span><span class="p">,</span> <span class="s">&#39;o&#39;</span><span class="p">,</span> <span class="s">&#39;o&#39;</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39; &#39;</span><span class="p">,</span> <span class="s">&#39;d&#39;</span><span class="p">,</span> <span class="s">&#39;e&#39;</span><span class="p">,</span> <span class="s">&#39;h&#39;</span><span class="p">,</span> <span class="s">&#39;l&#39;</span><span class="p">,</span> <span class="s">&#39;l&#39;</span><span class="p">,</span> <span class="s">&#39;l&#39;</span><span class="p">,</span> <span class="s">&#39;o&#39;</span><span class="p">,</span> <span class="s">&#39;o&#39;</span><span class="p">,</span> <span class="s">&#39;r&#39;</span><span class="p">,</span> <span class="s">&#39;w&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Python loves using <code>None</code> as a placeholder because it&rsquo;s often a pretty great placeholder value.</p>

<p>The issue with <code>None</code> only appears <strong>if someone else could reasonably be using <code>None</code> as a non-placeholder input to our function</strong>.
This is often the case when the caller of a function has a placeholder values (often <code>None</code>) in their inputs and the author of that function (that&rsquo;s us) needs a separate unique placeholder.</p>

<p>Using <code>None</code> to represent two different things at once is like having two identical-looking bookmarks in the same book: it&rsquo;s confusing!</p>

<h2>Creating unique non-None placeholders: why <code>object()</code>?</h2>

<p>When we made that <code>INITIAL</code> value before, we were sort of inventing our own <code>None</code>-like object: an object that we could uniquely reference by using the <code>is</code> operator.</p>

<p>That <code>INITIAL</code> object we made should be completely unique: it shouldn&rsquo;t ever be seen in any arbitrary input that may be given to our function (unless someone made the strange decision to import <code>INITIAL</code> and reference it specifically).</p>

<p>Why <code>object()</code> though?
After all we could have used any unique object by creating an instance of pretty much any class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">INITIAL</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">INITIAL</span> <span class="o">==</span> <span class="p">[]</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">INITIAL</span> <span class="ow">is</span> <span class="p">[]</span>
</span><span class='line'><span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>Though it might have been even more clear to create our own class just for this purpose:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">DummyClass</span><span class="p">:</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Class that just creates unique objects.&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">INITIAL</span> <span class="o">=</span> <span class="n">DummyClass</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>But I&rsquo;d argue that <code>object()</code> is the &ldquo;right&rdquo; thing to use here.</p>

<p>Everyone knows what <code>[]</code> means, but <code>object()</code> is mysterious, which is actually the reason I think it&rsquo;s a good choice in this case.</p>

<p>When we see an empty list we expect that list to be used <em>as a list</em> and when we see a class instance, we expect that class to <em>do something</em>.
But we don&rsquo;t actually want this object to <em>do</em> anything: <strong>we only care about the uniqueness of this new object</strong>.</p>

<p>We could have done this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">INITIAL</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;completely unique value&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>But I find using <code>object()</code> less confusing than this because it&rsquo;s clear: readers won&rsquo;t have a chance to be confused by the listy-ness of a list.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">INITIAL</span> <span class="o">=</span> <span class="nb">object</span><span class="p">()</span>  <span class="c"># completely unique value</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also if a confused developer Googles &ldquo;what is <code>object()</code> in Python?&rdquo; they might end up with <a href="https://stackoverflow.com/questions/28306371/what-is-object-good-for">some sort of explanation</a>.</p>

<h2>Other cases for non-None placeholders</h2>

<p>There&rsquo;s a word I&rsquo;ve been avoiding using up to this point.
I&rsquo;ve only been avoiding it because I think I typically misuse it (or rather overuse it).
The word is <a href="https://en.wikipedia.org/wiki/Sentinel_value">sentinel value</a>.</p>

<p>I suspect I overuse this word because I use it to mean any unique placeholder value, such as the <code>INITIAL</code> object we made before.
But most definitions I&rsquo;ve seen use &ldquo;sentinel value&rdquo; to specifically mean a value which indicates the end of a list, a loop, or an algorithm.</p>

<p>Sentinel values are a thing that, when seen, indicate that something has finished.
I think of this as a <strong>stop value</strong>: when you see a sentinel value it&rsquo;s a signal that the loop or algorithm that you&rsquo;re in should terminate.</p>

<p>Before we weren&rsquo;t using a stop value so much as an <strong>initial value</strong>.</p>

<p>Here&rsquo;s an example of a stop value; a true sentinel value:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">zip_longest</span>
</span><span class='line'>
</span><span class='line'><span class="n">SENTINEL</span> <span class="o">=</span> <span class="nb">object</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">strict_zip</span><span class="p">(</span><span class="o">*</span><span class="n">iterables</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Variation of ``zip`` which requires equal-length iterables.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">values</span> <span class="ow">in</span> <span class="n">zip_longest</span><span class="p">(</span><span class="o">*</span><span class="n">iterables</span><span class="p">,</span> <span class="n">fillvalue</span><span class="o">=</span><span class="n">SENTINEL</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">SENTINEL</span> <span class="ow">in</span> <span class="n">values</span><span class="p">:</span>
</span><span class='line'>            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;Given iterables must have the same length.&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">yield</span> <span class="n">values</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;re using the unique <code>SENTINEL</code> value above to signal that we need to stop looping and raise an exception.
The presence of this value indicates that one of our iterables was a different length than the others and we need to handle this error case.</p>

<h2>Rely on identity checks for unique values</h2>

<p>Note that we&rsquo;re implicitly relying on <code>==</code> above because we&rsquo;re saying <code>if SENTINEL in values</code> which actually loops over <code>values</code> looking for a value that is equal to <code>SENTINEL</code>.</p>

<p>If we wanted to be more strict (and possibly more efficient) we could rely on <code>is</code>, but we&rsquo;d need to do some looping ourselves.
Fortunately Python&rsquo;s <code>any</code> function and a generator expression would make that a bit easier:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">zip_longest</span>
</span><span class='line'>
</span><span class='line'><span class="n">SENTINEL</span> <span class="o">=</span> <span class="nb">object</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">strict_zip</span><span class="p">(</span><span class="o">*</span><span class="n">iterables</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Variation of ``zip`` which requires equal-length iterables.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">values</span> <span class="ow">in</span> <span class="n">zip_longest</span><span class="p">(</span><span class="o">*</span><span class="n">iterables</span><span class="p">,</span> <span class="n">fillvalue</span><span class="o">=</span><span class="n">SENTINEL</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">any</span><span class="p">(</span><span class="n">v</span> <span class="ow">is</span> <span class="n">SENTINEL</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">values</span><span class="p">):</span>
</span><span class='line'>            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;Given iterables must have the same length.&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">yield</span> <span class="n">values</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m fine with either of these functions.  The first is a bit more readable even though this one is arguably a bit more correct.</p>

<p>Identity checks are often faster than equality checks (<code>==</code> has to call the <code>__eq__</code> method, but <code>is</code> does a straight memory ID check).
But identity checks are also a bit more <em>correct</em>: if it&rsquo;s uniqueness we care about, <strong>a unique memory location is the ultimate uniqueness check</strong>.</p>

<p>When writing code that uses <strong>a unique object</strong>, it&rsquo;s wise to <strong>rely on identity rather than equality</strong> if you can.</p>

<h2>This is what <code>is</code> was made for</h2>

<p>If we care about <em>equality</em> (the value of an object) we use <code>==</code>, if we care about <em>identity</em> (the memory location) we use <code>is</code>.</p>

<p>If you search my Python code for <code>is</code> you&rsquo;ll pretty much only find the following things:</p>

<ol>
<li><code>x is None</code> (this is the most common thing you&rsquo;ll see)</li>
<li><code>x is True</code> or <code>x is False</code> (sometimes my tests get picky about <code>True</code> vs truthiness)</li>
<li><code>iter(x) is x</code> (<a href="https://treyhunner.com/2016/12/python-iterator-protocol-how-for-loops-work/">iterators</a> are a different Python rabbit hole)</li>
<li><code>x is some_unique_object</code></li>
</ol>


<p>Those first two are checking for a <a href="https://en.wikipedia.org/wiki/Singleton_pattern">singleton</a> value (as <a href="https://pep8.org/#programming-recommendations">recommended by PEP 8</a>).
The third one is checking if we&rsquo;ve seen <strong>the same object twice</strong> (an iterator in this case).
And the fourth one is checking for the presence of these unique values we&rsquo;ve been discussing.</p>

<p>The <code>is</code> operator checks whether two objects are exactly the same object in memory.
<strong>You never want to use the <code>is</code> operator <em>except</em> for true identity checks</strong>: <a href="https://en.wikipedia.org/wiki/Singleton_pattern">singletons</a> (like <code>None</code>, <code>True</code>, and <code>False</code>), checking for the same object again, and checking for our own unique values (sentinels, as I usually call them).</p>

<h2>So when would we use <code>object()</code>?</h2>

<p>Oftentimes <code>None</code> is both the easy answer and the right answer for a unique placeholder value in Python, but sometimes you just need to invent your own unique placeholder value.
In those cases <code>object()</code> is a great tool to have in your Python toolbox.</p>

<p>When would we actually use <code>object()</code> for a uniqueness check in our own code?</p>

<p>I can think of a few cases:</p>

<ol>
<li><strong>Unique initial values</strong>: a starting value that should be distinguished from values seen later (<code>default</code> and <code>initial</code> in our <code>min</code> function)</li>
<li><strong>Unique stop values</strong>: a value whose presence tells us to stop looping/processing (a true sentinel value, as in <code>strict_zip</code>)</li>
<li><strong>Unique skip values</strong>: a value whose presence should be treated as an empty value to be skipped over (we didn&rsquo;t see this, but it comes up with utilities like <code>itertools.zip_longest</code> sometimes)</li>
</ol>


<p>I hope this meandering through unique values has given you something (some non-<code>None</code> things) to think about.</p>

<p>May your <code>None</code> values be unambiguous and your identity checks be truly unique.</p>

<h2>Practice what you just learned</h2>

<p>Want to get some practice using <code>object()</code> in Python?</p>

<p>If you sign up to <a href="https://www.pythonmorsels.com/">Python Morsels</a> (my Python skill-building service) using the form below, I&rsquo;ll immediately send you a Python exercise where it makes sense to use <code>object()</code>.</p>

<p><form method="post" action="https://www.pythonmorsels.com/accounts/signup/">
  <input type="email" name="email" placeholder="Your email" class="subscribe-email form-big" required>
  <input type="hidden" name="exercise_track" value="sentinels">
  <input type="hidden" name="form_id" value="sentinels post">
  <button type="submit" class="subscribe-btn form-big">Get my Python Morsels exercise</button>
<br></p>

<p><small>
I won&rsquo;t share you info with others (see the <a href="https://www.pythonmorsels.com/privacy/">Python Morsels Privacy Policy</a> for details).<br>
This form is reCAPTCHA protected (Google <a href="https://policies.google.com/privacy">Privacy Policy</a> &amp; <a href="https://policies.google.com/terms">TOS</a>)
</small></p>

<p></form></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tuple ordering and deep comparisons in Python]]></title>
    <link href="https://treyhunner.com/2019/03/python-deep-comparisons-and-code-readability/"/>
    <updated>2019-03-13T07:30:00-07:00</updated>
    <id>https://treyhunner.com/2019/03/python-deep-comparisons-and-code-readability</id>
    <content type="html"><![CDATA[<p>Comparing things in Python.
That sounds like something that almost doesn&rsquo;t even need to be taught.
But I&rsquo;ve found that <strong>Python&rsquo;s comparison operators are often misunderstood and under-appreciated by newer Pythonistas</strong>.</p>

<p>Let&rsquo;s review how Python&rsquo;s comparison operators work on different types of objects and then take a look at how we can use this to improve the readability of our code.</p>

<ul data-toc=".entry-content"></ul>


<h2>Python&rsquo;s comparison operators</h2>

<p>By &ldquo;comparison operators&rdquo; I mean the equality operators (<code>==</code> and <code>!=</code>) and the ordering operators (<code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>).</p>

<p>We can use these operators to compare numbers, as you&rsquo;d expect:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">4</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">3</span> <span class="o">!=</span> <span class="mi">4</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">3</span> <span class="o">&lt;</span> <span class="mi">4</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">3</span> <span class="o">&gt;</span> <span class="mi">4</span>
</span><span class='line'><span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>But we can also use these operators to compare strings:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&quot;pear&quot;</span> <span class="o">==</span> <span class="s">&quot;pickle&quot;</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&quot;pear&quot;</span> <span class="o">!=</span> <span class="s">&quot;pickle&quot;</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&quot;pear&quot;</span> <span class="o">&lt;</span> <span class="s">&quot;pickle&quot;</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&quot;pear&quot;</span> <span class="o">&gt;</span> <span class="s">&quot;pickle&quot;</span>
</span><span class='line'><span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>And even tuples:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">target</span> <span class="o">=</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">installed</span> <span class="o">=</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">target</span> <span class="o">==</span> <span class="n">installed</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">target</span> <span class="o">&lt;=</span> <span class="n">installed</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">target</span> <span class="o">&gt;</span> <span class="n">installed</span>
</span><span class='line'><span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>Many programming languages don&rsquo;t have an equivalent to Python&rsquo;s very flexible comparison operators.</p>

<p>We&rsquo;ll take a look at how these operators work on tuples and more complex objects in a moment, but we&rsquo;ll start with something simpler: string comparisons.</p>

<h2>String comparisons in Python</h2>

<p>Equality and inequality with strings is fairly simple.
If two strings have exactly the same characters, they&rsquo;re equal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&quot;hello&quot;</span> <span class="o">==</span> <span class="s">&quot;hello&quot;</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&quot;hello&quot;</span> <span class="o">==</span> <span class="s">&quot;hella&quot;</span>
</span><span class='line'><span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that I&rsquo;m glossing over a very big exception: unicode characters.
There are often multiple ways to represent the same text and those different representations must be <a href="https://docs.python.org/3/library/unicodedata.html#unicodedata.normalize">normalized</a> before they&rsquo;re seen as equal.
For simplicity, we&rsquo;re going to stick to ASCII characters in this article.</p>

<p>Ordering of strings is where things get a bit interesting in Python:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&quot;pickle&quot;</span> <span class="o">&lt;</span> <span class="s">&quot;python&quot;</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>The string <code>"pickle"</code> is <em>less than</em> the string <code>"python"</code> because we&rsquo;re ordering alphabetically&hellip; sort of.
Capitalization matters:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&quot;pickle&quot;</span> <span class="o">&lt;</span> <span class="s">&quot;Python&quot;</span>
</span><span class='line'><span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>The string <code>"Python"</code> is less than <code>"pickle"</code> because <code>P</code> is less than <code>p</code>.</p>

<p>We&rsquo;re not actually ordering alphabetically here so much as <strong>ASCII-betically</strong> (unicode-betically really since we&rsquo;re in Python 3).
These strings are being ordered by the ASCII values of their characters (<code>p</code> is 112 in <a href="https://en.wikipedia.org/wiki/ASCII#Printable_characters">ASCII</a> and <code>P</code> is 80).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">ord</span><span class="p">(</span><span class="s">&quot;p&quot;</span><span class="p">)</span>
</span><span class='line'><span class="mi">112</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">ord</span><span class="p">(</span><span class="s">&quot;P&quot;</span><span class="p">)</span>
</span><span class='line'><span class="mi">80</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="s">&quot;P&quot;</span> <span class="o">&lt;</span> <span class="s">&quot;p&quot;</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>Technically Python compares the Unicode code point (which is what <a href="https://docs.python.org/3/library/functions.html#ord">ord</a> does) for these characters and that happens to be the same as the ASCII value for ASCII characters.</p>

<p>The rules for ordering strings are:</p>

<ol>
<li>Compare the n-th characters of each string (starting with the first character, index <code>0</code>) using the <code>==</code> operator; if they&rsquo;re equal, repeat this step with the next character</li>
<li>For two unequal characters, take the character that has the lower code point and declare its string &ldquo;less than&rdquo; the other</li>
<li>If all characters are equal, the strings are equal</li>
<li>If one string runs out of characters during step 1 (one string is a &ldquo;prefix&rdquo; of the other), the shorter string is &ldquo;less than&rdquo; the longer one</li>
</ol>


<p>The ordering algorithm Python uses for strings might seem complicated, but it&rsquo;s <strong>very similar to the ordering algorithm used in dictionaries</strong>; not Python dictionaries but <a href="https://en.wikipedia.org/wiki/Dictionary">physical dictionaries</a> (those things we used before the Internet existed).
We give precedence to the first characters when ordering words in dictionaries and if one word is a prefix of another, it comes first.</p>

<h2>Tuple comparisons</h2>

<p>We can ask tuples if they&rsquo;re equal, just as we can ask strings if they&rsquo;re equal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>But we can also compare tuples using the ordering operators (<code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&lt;</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&lt;</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>String ordering might have been somewhat intuitive (most of us learned alphabetical ordering before Python), but tuple ordering doesn&rsquo;t often feel quite as intuitive at first.
But you&rsquo;re actually somewhat familiar with tuple ordering already because <strong>tuple ordering uses the same algorithm as string ordering</strong>.</p>

<p>The rules for ordering tuples (which are essentially the same as ordering strings):</p>

<ol>
<li>Compare the n-th items of each tuple (starting with the first, index <code>0</code>) using the <code>==</code> operator; if they&rsquo;re equal, repeat this step with the next item</li>
<li>For two unequal items, the item that is &ldquo;less than&rdquo; makes the tuple that contains it also &ldquo;less than&rdquo; the other tuple</li>
<li>If all items are equal, the tuples are equal</li>
<li>If one tuple runs out of items during step 1 (one tuple is a &ldquo;prefix&rdquo; of the other), the shorter tuple is &ldquo;less than&rdquo; the longer one</li>
</ol>


<p>In Python, this algorithm might look sort of like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">less_than</span><span class="p">(</span><span class="n">tuple1</span><span class="p">,</span> <span class="n">tuple2</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">tuple1</span><span class="p">,</span> <span class="n">tuple2</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="n">y</span><span class="p">:</span>
</span><span class='line'>            <span class="k">continue</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">tuple1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">tuple2</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">True</span>  <span class="c"># There were more items in the second tuple</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">False</span>  <span class="c"># The first tuple had more items or they are equal</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that we&rsquo;d never write code like this because Python is doing all this work for us already.
That whole function is the same as using the <code>&lt;</code> operator:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">less_than</span><span class="p">(</span><span class="n">tuple1</span><span class="p">,</span> <span class="n">tuple2</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">tuple1</span> <span class="o">&lt;</span> <span class="n">tuple2</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Lexicographical ordering</h2>

<p>This <strong>alphabetical-like style of ordering</strong> that gives precedence to the first items in an iterable is called <a href="https://en.wikipedia.org/wiki/Lexicographical_order">lexicographical ordering</a>.
You don&rsquo;t need to know that phrase, but if you ever need to describe <em>the way ordering works in Python</em>, <strong>lexicographical</strong> is the word to use.</p>

<p>Strings and tuples are ordered lexicographically, as we&rsquo;ve seen, but so are lists:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span> <span class="o">&lt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span> <span class="o">&lt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>In fact, most <a href="https://docs.python.org/3/glossary.html#term-sequence">sequences</a> in Python <a href="https://docs.python.org/3/tutorial/datastructures.html#comparing-sequences-and-other-types">should be ordered lexicographically</a> (<code>range</code> objects are an exception to this as they can&rsquo;t be ordered at all).</p>

<p>But not every collection in Python relies on lexicographical ordering.</p>

<h2>Dictionary and set comparisons</h2>

<p>Many objects in Python work with equality but don&rsquo;t work with ordering at all.</p>

<p>For example dictionaries compare &ldquo;equal&rdquo; when they have all the same keys and values:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">expected</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;name&#39;</span><span class="p">:</span> <span class="s">&#39;Trey&#39;</span><span class="p">,</span> <span class="s">&#39;python_version&#39;</span><span class="p">:</span> <span class="mf">3.7</span><span class="o">.</span><span class="mi">0</span><span class="p">}</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">actual</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;name&#39;</span><span class="p">:</span> <span class="s">&#39;Trey&#39;</span><span class="p">,</span> <span class="s">&#39;python_version&#39;</span><span class="p">:</span> <span class="mf">2.7</span><span class="o">.</span><span class="mi">0</span><span class="p">}</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">expected</span> <span class="o">==</span> <span class="n">actual</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">actual</span><span class="p">[</span><span class="s">&#39;python_version&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="mf">3.7</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">expected</span> <span class="o">==</span> <span class="n">actual</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>But <strong>dictionaries can&rsquo;t be ordered</strong> using the <code>&lt;</code> or <code>&gt;</code> operators:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">expected</span> <span class="o">&lt;</span> <span class="n">actual</span>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'><span class="ne">TypeError</span><span class="p">:</span> <span class="s">&#39;&lt;&#39;</span> <span class="ow">not</span> <span class="n">supported</span> <span class="n">between</span> <span class="n">instances</span> <span class="n">of</span> <span class="s">&#39;dict&#39;</span> <span class="ow">and</span> <span class="s">&#39;dict&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sets are similar, except that sets <em>do</em> work with ordering operators&hellip; they just don&rsquo;t use those operators for ordering:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">}</span> <span class="o">&lt;</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span> <span class="o">&lt;</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">}</span>
</span><span class='line'><span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sets overload these operators to answer questions about <strong>whether one set is a subset or superset of another</strong> (<a href="https://docs.python.org/3.7/library/stdtypes.html#set-types-set-frozenset">see sets in the documentation</a>).</p>

<h2>Deep equality</h2>

<p>Comparisons between two data structures in Python tend to be <strong>deep comparisons</strong>.
Whether we&rsquo;re comparing lists, tuples, sets, or dictionaries, when we ask whether two of these objects are &ldquo;equal&rdquo; Python will recurse through each sub-object and ask whether each is &ldquo;equal&rdquo;.</p>

<p>So given a dictionary that maps tuples to lists of tuples:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">current_portals</span> <span class="o">=</span> <span class="p">{(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">):</span> <span class="p">[(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)],</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">):</span> <span class="p">[(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)]}</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">previous_portals</span> <span class="o">=</span> <span class="p">{(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">):</span> <span class="p">[(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)],</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">):</span> <span class="p">[(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Asking whether these two dictionaries are equal is equivalent to asking whether each key-value pair is equal, recursively:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">current_portals</span> <span class="o">==</span> <span class="n">previous_portals</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">current_portals</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span><span class='line'><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">current_portals</span> <span class="o">==</span> <span class="n">previous_portals</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>The dictionaries ask each of their keys &ldquo;are you in the other dictionary&rdquo; and then asks each of the corresponding values for those keys &ldquo;are you equal to the other value&rdquo;.
But each of these operations may (as in this case) require another level of depth: the keys are tuples which need to be traversed and the values are lists which need to be traversed.
And in this case those values, the lists, need to be traversed even deeper because they contain more data structures: tuples.</p>

<p><strong>We don&rsquo;t have to worry about any of this though</strong>: Python just does these deep comparisons for us automatically.</p>

<p>While you don&rsquo;t need to worry about how deep comparisons work, the fact that Python&rsquo;s comparisons <em>are</em> deep can be pretty handy to know.</p>

<p>For example if we have <a href="https://pastebin.com/raw/yspKmfyj">a class</a> with <code>x</code>, <code>y</code>, and <code>z</code> attributes we&rsquo;d like to compare in our <code>__eq__</code> method, instead of this long boolean expression:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">__eq__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">==</span> <span class="n">other</span><span class="o">.</span><span class="n">x</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">y</span> <span class="o">==</span> <span class="n">other</span><span class="o">.</span><span class="n">y</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">z</span> <span class="o">==</span> <span class="n">other</span><span class="o">.</span><span class="n">z</span>
</span></code></pre></td></tr></table></div></figure>


<p>We could bundle these values into 3-item tuples and compare them that way instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">__eq__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">z</span><span class="p">)</span> <span class="o">==</span> <span class="p">(</span><span class="n">other</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">other</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="n">other</span><span class="o">.</span><span class="n">z</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I find this more readable, mostly because <strong>we&rsquo;ve added symmetry to our code</strong>: we have one <code>==</code> expression with the same kind of object on each side of it.</p>

<h2>Deep ordering</h2>

<p>This &ldquo;deep comparison&rdquo; works for equality, but it also works for ordering.</p>

<p>The use case for deep ordering isn&rsquo;t as obvious as for deep equality, but identifying places where deep ordering is handy can help you drastically improve the readability of your code.</p>

<p>Take this example method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">__lt__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">last_name</span> <span class="o">&lt;</span> <span class="n">other</span><span class="o">.</span><span class="n">last_name</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>    <span class="k">elif</span> <span class="n">other</span><span class="o">.</span><span class="n">last_name</span> <span class="o">&lt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">last_name</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>    <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">first_name</span> <span class="o">&lt;</span> <span class="n">other</span><span class="o">.</span><span class="n">first_name</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>This <code>__lt__</code> method implements the <code>&lt;</code> operator on <a href="https://pastebin.com/raw/u8uGDArq">its class</a>, returning <code>True</code> if <code>self</code> is less than <code>other</code>.
Storing and comparing <code>first_name</code> and <code>last_name</code> attributes this way is <a href="https://www.youtube.com/watch?v=458KmAKq0bQ&amp;feature=youtu.be&amp;t=148">an anti-pattern</a> but we&rsquo;ll ignore that fact for this example.</p>

<p>That <code>__lt__</code> method above gives precedence to the <code>last_name</code>: the <code>first_name</code> is only checked if the <code>last_name</code> attribute of these two objects happens to be equal.</p>

<p>If we wanted to collapse this logic some, we could rewrite our code like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">__lt__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">last_name</span> <span class="o">&lt;</span> <span class="n">other</span><span class="o">.</span><span class="n">last_name</span> <span class="ow">or</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">last_name</span> <span class="o">==</span> <span class="n">other</span><span class="o">.</span><span class="n">last_name</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">first_name</span> <span class="o">&lt;</span> <span class="n">other</span><span class="o">.</span><span class="n">first_name</span>
</span><span class='line'>    <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or&hellip; we could rely on the deep ordering of tuples instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">__lt__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">last_name</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">first_name</span><span class="p">)</span> <span class="o">&lt;</span> <span class="p">(</span><span class="n">other</span><span class="o">.</span><span class="n">last_name</span><span class="p">,</span> <span class="n">other</span><span class="o">.</span><span class="n">first_name</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we&rsquo;re ordering our tuples lexicographically (by their first item first).
Our tuples happen to contain strings, which are also ordered lexicographically (by their first character first).
So we&rsquo;re <strong>deeply ordering</strong> these objects.</p>

<h2>Sorting by multiple attributes at once</h2>

<p>Knowing about lexicographical ordering and deep ordering of Python sequences can be quite useful when sorting Python objects.
From Python&rsquo;s perspective, <strong>sorting is really just ordering over and over</strong>.</p>

<p>Python&rsquo;s built-in <code>sorted</code> function accepts a <code>key</code> function which can return a corresponding key object to sort each of these items by.</p>

<p>Here we&rsquo;re specifying a <code>key</code> function that accepts a word and returns a tuple of two things: the length of the word and the case-normalized word:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;kumquat&#39;</span><span class="p">,</span> <span class="s">&#39;Cherimoya&#39;</span><span class="p">,</span> <span class="s">&#39;Loquat&#39;</span><span class="p">,</span> <span class="s">&#39;longan&#39;</span><span class="p">,</span> <span class="s">&#39;jujube&#39;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">length_and_word</span><span class="p">(</span><span class="n">word</span><span class="p">):</span> <span class="k">return</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">),</span> <span class="n">word</span><span class="o">.</span><span class="n">casefold</span><span class="p">())</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">fruits</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">length_and_word</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;jujube&#39;</span><span class="p">,</span> <span class="s">&#39;longan&#39;</span><span class="p">,</span> <span class="s">&#39;Loquat&#39;</span><span class="p">,</span> <span class="s">&#39;kumquat&#39;</span><span class="p">,</span> <span class="s">&#39;Cherimoya&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>With the key function above we&rsquo;re able to sort fruits first by their length and <em>then</em> by their case-normalized equivalent.
So &ldquo;jujube&rdquo; comes first because it&rsquo;s 6 letters (like <code>longan</code> and <code>Loquat</code>) but it&rsquo;s also alphabetically before <code>longan</code> and <code>Loquat</code>.</p>

<p>If we just sorted by length we would have had a different ordering:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">fruits</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="nb">len</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;Loquat&#39;</span><span class="p">,</span> <span class="s">&#39;longan&#39;</span><span class="p">,</span> <span class="s">&#39;jujube&#39;</span><span class="p">,</span> <span class="s">&#39;kumquat&#39;</span><span class="p">,</span> <span class="s">&#39;Cherimoya&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Slight aside</strong>: deep comparisons actually predate the <code>sorted</code> function&rsquo;s <code>key</code> argument in Python.
Before there was a key function Python developers would create lists of tuples, sort the lists of tuples, and then grab the actual value they cared about out of that list (which is <a href="https://docs.python.org/3/howto/sorting.html#the-old-way-using-decorate-sort-undecorate">discussed in the docs</a>).</p>

<p>The <code>sorted</code> function isn&rsquo;t the only place where tuple ordering can come in handy.
Any place where you see a <code>key</code> function might be a candidates for relying on tuple ordering.
For example the <code>min</code> and <code>max</code> functions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">min</span><span class="p">(</span><span class="n">fruits</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="nb">str</span><span class="o">.</span><span class="n">casefold</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;Cherimoya&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">max</span><span class="p">(</span><span class="n">fruits</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="nb">str</span><span class="o">.</span><span class="n">casefold</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;Loquat&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Anywhere Python does an ordering operation might be a place you could rely on the deep ordering of Python&rsquo;s data structures.</p>

<h2>Deep hashability (and unhashability)</h2>

<p>Python has both deep equality and deep orderability.
But Python&rsquo;s deep comparisons don&rsquo;t stop there: there&rsquo;s also deep hashability.</p>

<p>This is something that mostly comes up with tuples.
Tuples can be used as a key in a dictionary (as we saw earlier), and they can be used in sets:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">current_portals</span> <span class="o">=</span> <span class="p">{(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">):</span> <span class="p">[(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)],</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">):</span> <span class="p">[(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)]}</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">points</span> <span class="o">=</span> <span class="p">{(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But this only works for tuples that contain immutable values:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">things</span> <span class="o">=</span> <span class="p">{([</span><span class="s">&quot;dress&quot;</span><span class="p">,</span> <span class="s">&quot;truck&quot;</span><span class="p">],</span> <span class="s">&quot;yellow&quot;</span><span class="p">),</span> <span class="p">([</span><span class="s">&quot;ball&quot;</span><span class="p">,</span> <span class="s">&quot;plane&quot;</span><span class="p">],</span> <span class="s">&quot;purple&quot;</span><span class="p">)}</span>
</span><span class='line'><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span><span class='line'>  <span class="n">File</span> <span class="s">&quot;&lt;stdin&gt;&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span><span class='line'><span class="ne">TypeError</span><span class="p">:</span> <span class="n">unhashable</span> <span class="nb">type</span><span class="p">:</span> <span class="s">&#39;list&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tuples with lists in them aren&rsquo;t hashable because lists aren&rsquo;t hashable: each object inside a tuple must be hashable for the tuple itself to be hashable.</p>

<p>So while tuples containing lists aren&rsquo;t hashable, tuples containing tuples <em>are</em> hashable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">things</span> <span class="o">=</span> <span class="p">{((</span><span class="s">&quot;dress&quot;</span><span class="p">,</span> <span class="s">&quot;truck&quot;</span><span class="p">),</span> <span class="s">&quot;yellow&quot;</span><span class="p">),</span> <span class="p">((</span><span class="s">&quot;ball&quot;</span><span class="p">,</span> <span class="s">&quot;plane&quot;</span><span class="p">),</span> <span class="s">&quot;purple&quot;</span><span class="p">)}</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">things</span>
</span><span class='line'><span class="p">{((</span><span class="s">&#39;dress&#39;</span><span class="p">,</span> <span class="s">&#39;truck&#39;</span><span class="p">),</span> <span class="s">&#39;yellow&#39;</span><span class="p">),</span> <span class="p">((</span><span class="s">&#39;ball&#39;</span><span class="p">,</span> <span class="s">&#39;plane&#39;</span><span class="p">),</span> <span class="s">&#39;purple&#39;</span><span class="p">)}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tuples compute their hash values by delegating to the hash values of the items they contain:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">y</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">hash</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'><span class="mi">3713081631934410656</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">hash</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">==</span> <span class="nb">hash</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>While hashability is a big subject, this is really all I&rsquo;m going to say about it.
You don&rsquo;t really need to know how hashing works in Python so if you found this section confusing, that&rsquo;s okay!</p>

<p>The takeaway here is that Python supports <strong>deep hashability</strong> which is <strong>the reason we can use tuples as dictionary keys</strong> and the reason we can use tuples in sets.</p>

<h2>Deep comparisons are a tool to remember</h2>

<p>When you have code that compares two objects based on subparts in a particular order:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">d1</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1999</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">31</span><span class="p">)</span>
</span><span class='line'><span class="n">d2</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1999</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">d1</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">d2</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>
</span><span class='line'>    <span class="n">greater</span> <span class="o">=</span> <span class="n">d1</span>
</span><span class='line'><span class="k">elif</span> <span class="n">d1</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">d2</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>
</span><span class='line'>    <span class="n">greater</span> <span class="o">=</span> <span class="n">d2</span>
</span><span class='line'><span class="k">elif</span> <span class="n">d1</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">d2</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>    <span class="n">greater</span> <span class="o">=</span> <span class="n">d1</span>
</span><span class='line'><span class="k">elif</span> <span class="n">d1</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">d2</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>    <span class="n">greater</span> <span class="o">=</span> <span class="n">d2</span>
</span><span class='line'><span class="k">elif</span> <span class="n">d1</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">d2</span><span class="p">[</span><span class="mi">2</span><span class="p">]:</span>
</span><span class='line'>    <span class="n">greater</span> <span class="o">=</span> <span class="n">d1</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="n">greater</span> <span class="o">=</span> <span class="n">d2</span>
</span></code></pre></td></tr></table></div></figure>


<p>You could probably rely on tuple ordering instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">d1</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1999</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">31</span><span class="p">)</span>
</span><span class='line'><span class="n">d2</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1999</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">d1</span> <span class="o">&lt;</span> <span class="n">d2</span><span class="p">:</span>
</span><span class='line'>    <span class="n">greater</span> <span class="o">=</span> <span class="n">d1</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="n">greater</span> <span class="o">=</span> <span class="n">d2</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you are comparing many different things as equal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d1</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1999</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">31</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d2</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1999</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d1</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">d2</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="ow">and</span> <span class="n">d1</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">d2</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="ow">and</span> <span class="n">d1</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="n">d2</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'><span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>You could probably rely on deep equality instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d1</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1999</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">31</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d2</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1999</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">d1</span> <span class="o">==</span> <span class="n">d2</span>
</span><span class='line'><span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>And if you need to use a dictionary that has a key made up of multiple parts, if those parts are each hashable, you could probably use a tuple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">points</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">points</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;red&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">points</span>
</span><span class='line'><span class="p">{(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">):</span> <span class="s">&#39;red&#39;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Python&rsquo;s support for lexicographical ordering and deep comparisons is often overlooked by folks moving from other programming languages</strong>.
Remember these features: you may not need them today, but they&rsquo;ll almost certainly come in handy at some point.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[No really, pathlib is great]]></title>
    <link href="https://treyhunner.com/2019/01/no-really-pathlib-is-great/"/>
    <updated>2019-01-15T11:20:00-08:00</updated>
    <id>https://treyhunner.com/2019/01/no-really-pathlib-is-great</id>
    <content type="html"><![CDATA[<p>I recently <a href="https://treyhunner.com/2018/12/why-you-should-be-using-pathlib/">published an article about Python&rsquo;s pathlib module</a> and how I think everyone should be using it.</p>

<p>I won some <a href="https://docs.python.org/3/library/pathlib.html">pathlib</a> converts, but some folks also brought up concerns.
Some folks noted that I seemed to be comparing <code>pathlib</code> to <code>os.path</code> in a disingenuous way.
Some people were also concerned that <code>pathlib</code> will take a very long time to be widely adopted because <code>os.path</code> is so entrenched in the Python community.
And there were also concerns expressed about performance.</p>

<p>In this article I&rsquo;d like to acknowledge and address these concerns.
This will be both a defense of <code>pathlib</code> and a sort of love letter to <a href="https://www.python.org/dev/peps/pep-0519/#standard-library-changes">PEP 519</a>.</p>

<ul data-toc=".entry-content"></ul>


<h2>Comparing pathlib and os.path the right way</h2>

<p>In my last article I compared this code which uses <code>os</code> and <code>os.path</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os.path</span>
</span><span class='line'>
</span><span class='line'><span class="n">os</span><span class="o">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s">&#39;src&#39;</span><span class="p">,</span> <span class="s">&#39;__pypackages__&#39;</span><span class="p">),</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'><span class="n">os</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="s">&#39;.editorconfig&#39;</span><span class="p">,</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s">&#39;src&#39;</span><span class="p">,</span> <span class="s">&#39;.editorconfig&#39;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>To this code with uses <code>pathlib.Path</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
</span><span class='line'>
</span><span class='line'><span class="n">Path</span><span class="p">(</span><span class="s">&#39;src/__pypackages__&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="n">parents</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'><span class="n">Path</span><span class="p">(</span><span class="s">&#39;.editorconfig&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="s">&#39;src/.editorconfig&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This might seem like an unfair comparison because I used <code>os.path.join</code> in the first example to ensure the correct path separator is used on all platforms but I didn&rsquo;t do that in the second example.
But this is in fact a fair comparison because <strong>the Path class normalizes path separators automatically</strong>.</p>

<p>We can prove this by looking at the string representation of this <code>Path</code> object on Windows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">str</span><span class="p">(</span><span class="n">Path</span><span class="p">(</span><span class="s">&#39;src/__pypackages__&#39;</span><span class="p">))</span>
</span><span class='line'><span class="go">&#39;src\\__pypackages__&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>No matter whether we use the <code>joinpath</code> method, a <code>/</code> in a path string, the <code>/</code> operator (which is a neat feature of <code>Path</code> objects), or separate arguments to the <code>Path</code> constructor, we get the same representation in all cases:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">Path</span><span class="p">(</span><span class="s">&#39;src&#39;</span><span class="p">,</span> <span class="s">&#39;.editorconfig&#39;</span><span class="p">)</span>
</span><span class='line'><span class="go">WindowsPath(&#39;src/.editorconfig&#39;)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">Path</span><span class="p">(</span><span class="s">&#39;src&#39;</span><span class="p">)</span> <span class="o">/</span> <span class="s">&#39;.editorconfig&#39;</span>
</span><span class='line'><span class="go">WindowsPath(&#39;src/.editorconfig&#39;)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">Path</span><span class="p">(</span><span class="s">&#39;src&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">joinpath</span><span class="p">(</span><span class="s">&#39;.editorconfig&#39;</span><span class="p">)</span>
</span><span class='line'><span class="go">WindowsPath(&#39;src/.editorconfig&#39;)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">Path</span><span class="p">(</span><span class="s">&#39;src/.editorconfig&#39;</span><span class="p">)</span>
</span><span class='line'><span class="go">WindowsPath(&#39;src/.editorconfig&#39;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>That last expression caused some confusion from folks who assumed <code>pathlib</code> wouldn&rsquo;t be smart enough to convert that <code>/</code> into a <code>\</code> in the path string.
Fortunately, it is!</p>

<p>With <code>Path</code> objects, you never have to worry about backslashes vs forward slashes again: specify all paths using forward slashes and you&rsquo;ll get what you&rsquo;d expect on all platforms.</p>

<h2>Normalizing file paths shouldn&rsquo;t be your concern</h2>

<p>If you&rsquo;re developing on Linux or Mac, it&rsquo;s very easy to add bugs to your code that only affect Windows users.
Unless you&rsquo;re careful to use <code>os.path.join</code> to build your paths up or <code>os.path.normcase</code> to convert forward slashes to backslashes as appropriate, <strong>you may be writing code that breaks on Windows</strong>.</p>

<p>This is a Windows bug waiting to happen (we&rsquo;ll get mixed backslashes and forward slashes here):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os.path</span>
</span><span class='line'><span class="n">directory</span> <span class="o">=</span> <span class="s">&#39;.&#39;</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span> <span class="k">else</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="n">new_file</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">directory</span><span class="p">,</span> <span class="s">&#39;new_package/__init__.py&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This just works on all systems:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
</span><span class='line'><span class="n">directory</span> <span class="o">=</span> <span class="s">&#39;.&#39;</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span> <span class="k">else</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="n">new_file</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="n">directory</span><span class="p">,</span> <span class="s">&#39;new_package/__init__.py&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It used to be the responsibility of you the Python programmer to carefully join and normalize your paths, just as it used to be your responsibility in Python 2 land to use unicode whenever it was more appropriate than bytes.
This is the case no more.
The <code>pathlib.Path</code> class is careful to fix path separator issues before they even occur.</p>

<p>I don&rsquo;t use Windows.
I don&rsquo;t own a Windows machine.
But a ton of the developers who use my code likely use Windows and I don&rsquo;t want my code to break on their machines.</p>

<p><strong>If there&rsquo;s a chance that your Python code will ever run on a Windows machine, you really need <code>pathlib</code></strong>.</p>

<p><strong>Don&rsquo;t stress about path normalization</strong>: just use <code>pathlib.Path</code> whenever you need to represent a file path.</p>

<h2>pathlib seems great, but I depend on code that doesn&rsquo;t use it!</h2>

<p>You have lots of code that works with path strings.
Why would you switch to using <code>pathlib</code> when it means you&rsquo;d need to rewrite all this code?</p>

<p>Let&rsquo;s say you have a function like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os.path</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">make_editorconfig</span><span class="p">(</span><span class="n">dir_path</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Create .editorconfig file in given directory and return filename.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">filename</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dir_path</span><span class="p">,</span> <span class="s">&#39;.editorconfig&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span><span class='line'>        <span class="n">os</span><span class="o">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">dir_path</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s">&#39;wt&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">filename</span>
</span></code></pre></td></tr></table></div></figure>


<p>This function accepts a directory to create a <code>.editorconfig</code> file in, like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">os.path</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">make_editorconfig</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s">&#39;src&#39;</span><span class="p">,</span> <span class="s">&#39;my_package&#39;</span><span class="p">))</span>
</span><span class='line'><span class="go">&#39;src/my_package/.editorconfig&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>But our code also works with a <code>Path</code> object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">make_editorconfig</span><span class="p">(</span><span class="n">Path</span><span class="p">(</span><span class="s">&#39;src/my_package&#39;</span><span class="p">))</span>
</span><span class='line'><span class="go">&#39;src/my_package/.editorconfig&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>But&hellip; how??</p>

<p>Well <code>os.path.join</code> accepts <code>Path</code> objects (as of Python 3.6).
And <code>os.makedirs</code> accepts <code>Path</code> objects too.</p>

<p>In fact the built-in <code>open</code> function accepts <code>Path</code> objects and <code>shutil</code> does and anything in the standard library that previously accepted a path string is now expected to work with both <code>Path</code> objects and path strings.</p>

<p>This is all thanks to <a href="https://www.python.org/dev/peps/pep-0519/#standard-library-changes">PEP 519</a>, which called for an <code>os.PathLike</code> abstract base class and declared that Python utilities that work with file paths should now accept either path strings or path-like objects.</p>

<h2>But my favorite third-party library X has a better Path object!</h2>

<p>You might already be using a third-party library that has a <code>Path</code> object which works differently than pathlib&rsquo;s Path objects.
Maybe you even like it better.</p>

<p>For example <a href="https://github.com/joke2k/django-environ">django-environ</a>, <a href="https://github.com/jaraco/path.py">path.py</a>, <a href="https://github.com/tomerfiliba/plumbum">plumbum</a>, and <a href="https://github.com/saulpw/visidata">visidata</a> all have their own custom <code>Path</code> objects that represent file paths.
Some of these <code>pathlib</code> alternatives predate <code>pathlib</code> and chose to inherit from <code>str</code> so they could be passed to functions that expected path strings.
Thanks to PEP 519 both <code>pathlib</code> and its third-party alternatives can play nicely without needing to resort to the hack of inheriting from <code>str</code>.</p>

<p>Let&rsquo;s say you don&rsquo;t like <code>pathlib</code> because <code>Path</code> objects are immutable and you very much prefer using mutable <code>Path</code> objects.
Well thanks to <a href="https://www.python.org/dev/peps/pep-0519/#standard-library-changes">PEP 519</a>, you can create your own even-better-because-it-is-mutable <code>Path</code> and also has a <code>__fspath__</code>.
You don&rsquo;t <em>need</em> to use <code>pathlib</code> to benefit from it.</p>

<p>Any homegrown <code>Path</code> object you make or find in a third party library now has the ability to work natively with the Python built-ins and standard library modules that expect Path objects.
<strong>Even if you don&rsquo;t like <code>pathlib</code>, its existence a big win for third-party <code>Path</code> objects as well</strong>.</p>

<h2>But Path objects and path strings don&rsquo;t mix, do they?</h2>

<p>You might be thinking: this is really wonderful, but won&rsquo;t this sometimes-a-string and sometimes-a-path-object situation add confusion to my code?</p>

<p>The answer is yes, somewhat.
But I&rsquo;ve found that it&rsquo;s pretty easy to work around.</p>

<p>PEP 519 added a couple other things along with path-like objects: one is a way to convert all path-like objects to path strings and the other is a way to convert all path-like objects to <code>Path</code> objects.</p>

<p>Given either a path string or a <code>Path</code> object (or anything with a <code>__fspath__</code> method):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os.path</span>
</span><span class='line'><span class="n">p1</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s">&#39;src&#39;</span><span class="p">,</span> <span class="s">&#39;my_package&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">p2</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s">&#39;src/my_package&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>os.fspath</code> function will now normalize both of these types of paths to strings:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">os</span> <span class="kn">import</span> <span class="n">fspath</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">fspath</span><span class="p">(</span><span class="n">p1</span><span class="p">),</span> <span class="n">fspath</span><span class="p">(</span><span class="n">p2</span><span class="p">)</span>
</span><span class='line'><span class="go">(&#39;src/my_package&#39;, &#39;src/my_package&#39;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the <code>Path</code> class will now accept both of these types of paths and convert them to <code>Path</code> objects:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">Path</span><span class="p">(</span><span class="n">p1</span><span class="p">),</span> <span class="n">Path</span><span class="p">(</span><span class="n">p2</span><span class="p">)</span>
</span><span class='line'><span class="go">(PosixPath(&#39;src/my_package&#39;), PosixPath(&#39;src/my_package&#39;))</span>
</span></code></pre></td></tr></table></div></figure>


<p>That means you could convert the output of the <code>make_editorconfig</code> function back into a <code>Path</code> object if you wanted to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">Path</span><span class="p">(</span><span class="n">make_editorconfig</span><span class="p">(</span><span class="n">Path</span><span class="p">(</span><span class="s">&#39;src/my_package&#39;</span><span class="p">)))</span>
</span><span class='line'><span class="go">PosixPath(&#39;src/my_package/.editorconfig&#39;)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Though of course a better long-term approach would be to rewrite the <code>make_editorconfig</code> function to use <code>pathlib</code> instead.</p>

<h2>pathlib is too slow</h2>

<p>I&rsquo;ve heard this concern come up a few times: <code>pathlib</code> is just too slow.</p>

<p>It&rsquo;s true that <code>pathlib</code> can be slow.
Creating thousands of <code>Path</code> objects can make a noticeable impact on your code.</p>

<p>I decided to test the performance difference between <code>pathlib</code> and the alternative on my own machine using two different programs that both look for all <code>.py</code> files below the current directory.</p>

<p>Here&rsquo;s the <code>os.walk</code> version:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">os</span> <span class="kn">import</span> <span class="n">getcwd</span><span class="p">,</span> <span class="n">walk</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">extension</span> <span class="o">=</span> <span class="s">&#39;.py&#39;</span>
</span><span class='line'><span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">for</span> <span class="n">root</span><span class="p">,</span> <span class="n">directories</span><span class="p">,</span> <span class="n">filenames</span> <span class="ow">in</span> <span class="n">walk</span><span class="p">(</span><span class="n">getcwd</span><span class="p">()):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="n">filenames</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">filename</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="n">extension</span><span class="p">):</span>
</span><span class='line'>            <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s">&quot;{count} Python files found&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s the <code>Path.rglob</code> version:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">extension</span> <span class="o">=</span> <span class="s">&#39;.py&#39;</span>
</span><span class='line'><span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="n">Path</span><span class="o">.</span><span class="n">cwd</span><span class="p">()</span><span class="o">.</span><span class="n">rglob</span><span class="p">(</span><span class="n">f</span><span class="s">&#39;*{extension}&#39;</span><span class="p">):</span>
</span><span class='line'>    <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s">&quot;{count} Python files found&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Testing runtimes for programs that rely on filesystem accesses is tricky because runtimes vary greatly, so I reran each script 10 times and compared the best runtime of each.</p>

<p>Both scripts found 97,507 Python files in the directory I ran them in.
The first one finished in 1.914 seconds (best out of 10 runs).
The second one finished in 3.430 seconds (best out of 10 runs).</p>

<p>When I set <code>extension = ''</code> these find about 600,000 files and the differences spread a little further apart.
The first runs in 1.888 seconds and the second in 7.485 seconds.</p>

<p>So the <code>pathlib</code> version of this program <strong>ran twice as slow</strong> for <code>.py</code> files and <strong>four times as slow</strong> for every file in my home directory.
<strong>The <code>pathlib</code> code was indeed slower</strong>, much slower percentage-wise.</p>

<p>But in my case, this speed difference doesn&rsquo;t matter much.
I searched for every file in my home directory and lost 6 seconds to the slower version of my code.
If I needed to scale this code to search 10 million files, I&rsquo;d probably want to rewrite it.
But that&rsquo;s a problem I can get to if I experience it.</p>

<p>If you have a tight loop that could use some optimizing and <code>pathlib.Path</code> is one of the bottlenecks that&rsquo;s slowing that loop down, abandon <code>pathlib</code> in that part of your code.
But <strong>don&rsquo;t optimize parts of your code that aren&rsquo;t bottlenecks</strong>: it&rsquo;s a waste of time and often results in less readable code for little gain.</p>

<h2>Improving readability with pathlib</h2>

<p>I&rsquo;d like to wrap up these thoughts by ending with some <code>pathlib</code> refactorings.
I&rsquo;ve taken a couple small examples of code that work with files and refactored these examples to use <code>pathlib</code> instead.
I&rsquo;ll mostly leave these code blocks without comment and let you be the judge of which versions you like best.</p>

<p>Here&rsquo;s the <code>make_editorconfig</code> function we saw earlier:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os.path</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">make_editorconfig</span><span class="p">(</span><span class="n">dir_path</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Create .editorconfig file in given directory and return filename.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">filename</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dir_path</span><span class="p">,</span> <span class="s">&#39;.editorconfig&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span><span class='line'>        <span class="n">os</span><span class="o">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">dir_path</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s">&#39;wt&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">filename</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here&rsquo;s the same function using <code>pathlib.Path</code> instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">make_editorconfig</span><span class="p">(</span><span class="n">dir_path</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Create .editorconfig file in given directory and return filepath.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">path</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="n">dir_path</span><span class="p">,</span> <span class="s">&#39;.editorconfig&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">():</span>
</span><span class='line'>        <span class="n">path</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">parent</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>        <span class="n">path</span><span class="o">.</span><span class="n">touch</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">path</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s a command-line program that accepts a string representing a directory and prints the contents of the <code>.gitignore</code> file in that directory if one exists:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">os.path</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">directory</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="n">ignore_filename</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">directory</span><span class="p">,</span> <span class="s">&#39;.gitignore&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">isfile</span><span class="p">(</span><span class="n">ignore_filename</span><span class="p">):</span>
</span><span class='line'>    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">ignore_filename</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s">&#39;rt&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">ignore_file</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">ignore_file</span><span class="o">.</span><span class="n">read</span><span class="p">(),</span> <span class="n">end</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the same code using <code>pathlib.Path</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">directory</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'><span class="n">ignore_path</span> <span class="o">=</span> <span class="n">directory</span> <span class="o">/</span> <span class="s">&#39;.gitignore&#39;</span>
</span><span class='line'><span class="k">if</span> <span class="n">ignore_path</span><span class="o">.</span><span class="n">is_file</span><span class="p">():</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">ignore_path</span><span class="o">.</span><span class="n">read_text</span><span class="p">(),</span> <span class="n">end</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here&rsquo;s some code that prints all groups of files in and below the current directory which are duplicates:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">hashlib</span> <span class="kn">import</span> <span class="n">md5</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">os</span> <span class="kn">import</span> <span class="n">getcwd</span><span class="p">,</span> <span class="n">walk</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os.path</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">find_files</span><span class="p">(</span><span class="n">filepath</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">root</span><span class="p">,</span> <span class="n">directories</span><span class="p">,</span> <span class="n">filenames</span> <span class="ow">in</span> <span class="n">walk</span><span class="p">(</span><span class="n">filepath</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="n">filenames</span><span class="p">:</span>
</span><span class='line'>            <span class="k">yield</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">file_hashes</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">path</span> <span class="ow">in</span> <span class="n">find_files</span><span class="p">(</span><span class="n">getcwd</span><span class="p">()):</span>
</span><span class='line'>    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s">&#39;rb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">my_file</span><span class="p">:</span>
</span><span class='line'>        <span class="n">file_hash</span> <span class="o">=</span> <span class="n">md5</span><span class="p">(</span><span class="n">my_file</span><span class="o">.</span><span class="n">read</span><span class="p">())</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">()</span>
</span><span class='line'>        <span class="n">file_hashes</span><span class="p">[</span><span class="n">file_hash</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">paths</span> <span class="ow">in</span> <span class="n">file_hashes</span><span class="o">.</span><span class="n">values</span><span class="p">():</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">paths</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;Duplicate files found:&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="o">*</span><span class="n">paths</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the same code that uses <code>pathlib.Path</code> instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">hashlib</span> <span class="kn">import</span> <span class="n">md5</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">find_files</span><span class="p">(</span><span class="n">filepath</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">path</span> <span class="ow">in</span> <span class="n">Path</span><span class="p">(</span><span class="n">filepath</span><span class="p">)</span><span class="o">.</span><span class="n">rglob</span><span class="p">(</span><span class="s">&#39;*&#39;</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">path</span><span class="o">.</span><span class="n">is_file</span><span class="p">():</span>
</span><span class='line'>            <span class="k">yield</span> <span class="n">path</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">file_hashes</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="n">path</span> <span class="ow">in</span> <span class="n">find_files</span><span class="p">(</span><span class="n">Path</span><span class="o">.</span><span class="n">cwd</span><span class="p">()):</span>
</span><span class='line'>    <span class="n">file_hash</span> <span class="o">=</span> <span class="n">md5</span><span class="p">(</span><span class="n">path</span><span class="o">.</span><span class="n">read_bytes</span><span class="p">())</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">()</span>
</span><span class='line'>    <span class="n">file_hashes</span><span class="p">[</span><span class="n">file_hash</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">paths</span> <span class="ow">in</span> <span class="n">file_hashes</span><span class="o">.</span><span class="n">values</span><span class="p">():</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">paths</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;Duplicate files found:&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="o">*</span><span class="n">paths</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The changes here are subtle, but I think they add up.
I prefer this <code>pathlib</code>-refactored version.</p>

<h2>Start using pathlib.Path objects</h2>

<p>Let&rsquo;s recap.</p>

<p>The <code>/</code> separators in <code>pathlib.Path</code> strings are automatically converted to the correct path separator based on the operating system you&rsquo;re on.
This is a huge feature that can make for code that is <strong>more readable and more certain to be free of path-related bugs</strong>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">path1</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s">&#39;dir&#39;</span><span class="p">,</span> <span class="s">&#39;file&#39;</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">path2</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s">&#39;dir&#39;</span><span class="p">)</span> <span class="o">/</span> <span class="s">&#39;file&#39;</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">path3</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s">&#39;dir/file&#39;</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">path3</span>
</span><span class='line'><span class="go">WindowsPath(&#39;dir/file&#39;)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">path1</span> <span class="o">==</span> <span class="n">path2</span> <span class="o">==</span> <span class="n">path3</span>
</span><span class='line'><span class="go">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Python standard library and built-ins (like <code>open</code>) also accept <code>pathlib.Path</code> objects now.
This means <strong>you can start using pathlib, even if your dependencies don&rsquo;t</strong>!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">shutil</span> <span class="kn">import</span> <span class="n">move</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">rename_and_redirect</span><span class="p">(</span><span class="n">old_filename</span><span class="p">,</span> <span class="n">new_filename</span><span class="p">):</span>
</span><span class='line'>    <span class="n">move</span><span class="p">(</span><span class="n">old</span><span class="p">,</span> <span class="n">new</span><span class="p">)</span>
</span><span class='line'>    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">old</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s">&#39;wt&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'>        <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">f</span><span class="s">&#39;This file has moved to {new}&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">old</span><span class="p">,</span> <span class="n">new</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s">&#39;old.txt&#39;</span><span class="p">),</span> <span class="n">Path</span><span class="p">(</span><span class="s">&#39;new.txt&#39;</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">rename_and_redirect</span><span class="p">(</span><span class="n">old</span><span class="p">,</span> <span class="n">new</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">old</span><span class="o">.</span><span class="n">read_text</span><span class="p">()</span>
</span><span class='line'><span class="go">&#39;This file has moved to new.txt&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And if you don&rsquo;t like <code>pathlib</code>, you can use a third-party library that provides the same path-like interface.
This is great because <strong>even if you&rsquo;re not a fan of <code>pathlib</code> you&rsquo;ll still benefit from the new changes detailed in PEP 519</strong>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="kn">from</span> <span class="nn">plumbum</span> <span class="kn">import</span> <span class="n">Path</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">my_path</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s">&#39;old.txt&#39;</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">my_path</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span><span class='line'><span class="gp">... </span>    <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span><span class='line'><span class="gp">...</span>
</span><span class='line'><span class="go">This file has moved to new.txt</span>
</span></code></pre></td></tr></table></div></figure>


<p>While <code>pathlib</code> is sometimes slower than the alternative(s), the cases where this matters are somewhat rare (in my experience at least) and <strong>you can always jump back to using path strings for parts of your code that are particularly performance sensitive</strong>.</p>

<p>And in general, <code>pathlib</code> makes for more readable code.
Here&rsquo;s a succinct and descriptive Python script to demonstrate my point:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
</span><span class='line'><span class="n">gitignore</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s">&#39;.gitignore&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">gitignore</span><span class="o">.</span><span class="n">is_file</span><span class="p">():</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">gitignore</span><span class="o">.</span><span class="n">read_text</span><span class="p">(),</span> <span class="n">end</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>pathlib</code> module is lovely: start using it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why you should be using pathlib]]></title>
    <link href="https://treyhunner.com/2018/12/why-you-should-be-using-pathlib/"/>
    <updated>2018-12-21T14:00:00-08:00</updated>
    <id>https://treyhunner.com/2018/12/why-you-should-be-using-pathlib</id>
    <content type="html"><![CDATA[<p>When I discovered Python&rsquo;s new <a href="https://docs.python.org/3/library/pathlib.html">pathlib</a> module a few years ago, I initially wrote it off as being a slightly more awkward and unnecessarily object-oriented version of the <code>os.path</code> module.
I was wrong.
Python&rsquo;s <code>pathlib</code> module is actually <a href="https://jefftriplett.com/2017/pathlib-is-wonderful/">wonderful</a>!</p>

<p>In this article I&rsquo;m going to try to sell you on <code>pathlib</code>.
I hope that this article will inspire you to <strong>use Python&rsquo;s <code>pathlib</code> module pretty much anytime you need to work with files in Python</strong>.</p>

<p><strong>Update</strong>: I wrote a follow-up article to address further comments and concerns that were raised after this one.  Read this article first and then take a look at <a href="https://treyhunner.com/2019/01/no-really-pathlib-is-great/">the follow-up article here</a>.</p>

<ul data-toc=".entry-content"></ul>


<h2>os.path is clunky</h2>

<p>The <code>os.path</code> module has always been what we reached for to work with paths in Python.
It&rsquo;s got pretty much all you need, but it can be very clunky sometimes.</p>

<p>Should you import it like this?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">os.path</span>
</span><span class='line'>
</span><span class='line'><span class="n">BASE_DIR</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="n">__file__</span><span class="p">)))</span>
</span><span class='line'><span class="n">TEMPLATES_DIR</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">BASE_DIR</span><span class="p">,</span> <span class="s">&#39;templates&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or like this?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">os.path</span> <span class="kn">import</span> <span class="n">abspath</span><span class="p">,</span> <span class="n">dirname</span><span class="p">,</span> <span class="n">join</span>
</span><span class='line'>
</span><span class='line'><span class="n">BASE_DIR</span> <span class="o">=</span> <span class="n">dirname</span><span class="p">(</span><span class="n">dirname</span><span class="p">(</span><span class="n">abspath</span><span class="p">(</span><span class="n">__file__</span><span class="p">)))</span>
</span><span class='line'><span class="n">TEMPLATES_DIR</span> <span class="o">=</span> <span class="n">join</span><span class="p">(</span><span class="n">BASE_DIR</span><span class="p">,</span> <span class="s">&#39;templates&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or maybe that <code>join</code> function is too generically named&hellip; so we could do this instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">os.path</span> <span class="kn">import</span> <span class="n">abspath</span><span class="p">,</span> <span class="n">dirname</span><span class="p">,</span> <span class="n">join</span> <span class="k">as</span> <span class="n">joinpath</span>
</span><span class='line'>
</span><span class='line'><span class="n">BASE_DIR</span> <span class="o">=</span> <span class="n">dirname</span><span class="p">(</span><span class="n">dirname</span><span class="p">(</span><span class="n">abspath</span><span class="p">(</span><span class="n">__file__</span><span class="p">)))</span>
</span><span class='line'><span class="n">TEMPLATES_DIR</span> <span class="o">=</span> <span class="n">joinpath</span><span class="p">(</span><span class="n">BASE_DIR</span><span class="p">,</span> <span class="s">&#39;templates&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I find all of these a bit awkward.
We&rsquo;re passing strings into functions that return strings which we then pass into other functions that return strings.
All of these strings happen to represent paths, but they&rsquo;re still just strings.</p>

<p>The string-in-string-out functions in <code>os.path</code> are really awkward when nested because the code has to be read from the inside out.
Wouldn&rsquo;t it be nice if we could take these nested function calls and turn them into chained method calls instead?</p>

<p>With the <code>pathlib</code> module we can!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
</span><span class='line'>
</span><span class='line'><span class="n">BASE_DIR</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="n">__file__</span><span class="p">)</span><span class="o">.</span><span class="n">resolve</span><span class="p">()</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">parent</span>
</span><span class='line'><span class="n">TEMPLATES_DIR</span> <span class="o">=</span> <span class="n">BASE_DIR</span><span class="o">.</span><span class="n">joinpath</span><span class="p">(</span><span class="s">&#39;templates&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>os.path</code> module requires function nesting, but <strong>the <code>pathlib</code> modules' <code>Path</code> class allows us to chain methods and attributes</strong> on <code>Path</code> objects to get an equivalent path representation.</p>

<p>I know what you&rsquo;re thinking: wait these <code>Path</code> objects aren&rsquo;t the same thing: they&rsquo;re objects, not path strings!
I&rsquo;ll address that later (hint: these can pretty much be used interchangeably with path strings).</p>

<h2>The os module is crowded</h2>

<p>Python&rsquo;s classic <code>os.path</code> module is just for working with paths.
Once you want to actually <em>do</em> something with a path (e.g. create a directory) you&rsquo;ll need to reach for another Python module, often the <code>os</code> module.</p>

<p>The <code>os</code> module has lots of utilities for working with files and directories: <code>mkdir</code>, <code>getcwd</code>, <code>chmod</code>, <code>stat</code>, <code>remove</code>, <code>rename</code>, and <code>rmdir</code>.
Also <code>chdir</code>, <code>link</code>, <code>walk</code>, <code>listdir</code>, <code>makedirs</code>, <code>renames</code>, <code>removedirs</code>, <code>unlink</code> (same as <code>remove</code>), and <code>symlink</code>.
And a bunch of other stuff that isn&rsquo;t related to the filesystems at all: <code>fork</code>, <code>getenv</code>, <code>putenv</code>, <code>environ</code>, <code>getlogin</code>, and <code>system</code>.
Plus dozens of things I didn&rsquo;t mention in this paragraph.</p>

<p><strong>Python&rsquo;s <code>os</code> module does a little bit of everything; it&rsquo;s sort of a junk drawer for system-related stuff</strong>.
There&rsquo;s a lot of lovely stuff in the <code>os</code> module, but it can be hard to find what you&rsquo;re looking for sometimes:
if you&rsquo;re looking for path-related or filesystem-related things in the <code>os</code> module, you&rsquo;ll need to do a bit of digging.</p>

<p>The <code>pathlib</code> module replaces many of these filesystem-related <code>os</code> utilities with methods on the <code>Path</code> object.</p>

<p>Here&rsquo;s some code that makes a <code>src/__pypackages__</code> directory and renames our <code>.editorconfig</code> file to <code>src/.editorconfig</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os.path</span>
</span><span class='line'>
</span><span class='line'><span class="n">os</span><span class="o">.</span><span class="n">makedirs</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s">&#39;src&#39;</span><span class="p">,</span> <span class="s">&#39;__pypackages__&#39;</span><span class="p">),</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'><span class="n">os</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="s">&#39;.editorconfig&#39;</span><span class="p">,</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s">&#39;src&#39;</span><span class="p">,</span> <span class="s">&#39;.editorconfig&#39;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code does the same thing using <code>Path</code> objects:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
</span><span class='line'>
</span><span class='line'><span class="n">Path</span><span class="p">(</span><span class="s">&#39;src/__pypackages__&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="n">parents</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'><span class="n">Path</span><span class="p">(</span><span class="s">&#39;.editorconfig&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="s">&#39;src/.editorconfig&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that the <code>pathlib</code> code puts the path first because of method chaining!</p>

<p>As the Zen of Python says, &ldquo;namespaces are one honking great idea, let&rsquo;s do more of those&rdquo;.
The <code>os</code> module is a very large namespace with a bunch of stuff in it.
<strong>The pathlib.Path class is a much smaller and more specific namespace than the os module</strong>.
Plus the methods in this <code>Path</code> namespace return <code>Path</code> objects, which allows for method chaining instead of nested string-iful function calls.</p>

<h2>Don&rsquo;t forget about the glob module!</h2>

<p>The <code>os</code> and <code>os.path</code> modules aren&rsquo;t the only filepath/filesystem-related utilities in the Python standard library.
The <code>glob</code> module is another handy path-related module.</p>

<p>We can use the <code>glob.glob</code> function for finding files that match a certain pattern:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">glob</span> <span class="kn">import</span> <span class="n">glob</span>
</span><span class='line'>
</span><span class='line'><span class="n">top_level_csv_files</span> <span class="o">=</span> <span class="n">glob</span><span class="p">(</span><span class="s">&#39;*.csv&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">all_csv_files</span> <span class="o">=</span> <span class="n">glob</span><span class="p">(</span><span class="s">&#39;**/*.csv&#39;</span><span class="p">,</span> <span class="n">recursive</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The new <code>pathlib</code> module includes glob-like utilities as well.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
</span><span class='line'>
</span><span class='line'><span class="n">top_level_csv_files</span> <span class="o">=</span> <span class="n">Path</span><span class="o">.</span><span class="n">cwd</span><span class="p">()</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s">&#39;*.csv&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">all_csv_files</span> <span class="o">=</span> <span class="n">Path</span><span class="o">.</span><span class="n">cwd</span><span class="p">()</span><span class="o">.</span><span class="n">rglob</span><span class="p">(</span><span class="s">&#39;*.csv&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>After you&rsquo;ve started using <code>pathlib</code> more heavily, <strong>you can pretty much forget about the glob module entirely</strong>: you&rsquo;ve got all the glob functionality you need with <code>Path</code> objects.</p>

<h2>pathlib makes the simple cases simpler</h2>

<p>The <code>pathlib</code> module makes a number of complex cases somewhat simpler, but <strong>it also makes some of the simple cases even simpler</strong>.</p>

<p>Need to read all the text in one or more files?</p>

<p>You could open the file, read its contents and close the file using a <code>with</code> block:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">glob</span> <span class="kn">import</span> <span class="n">glob</span>
</span><span class='line'>
</span><span class='line'><span class="n">file_contents</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="n">glob</span><span class="p">(</span><span class="s">&#39;**/*.py&#39;</span><span class="p">,</span> <span class="n">recursive</span><span class="o">=</span><span class="bp">True</span><span class="p">):</span>
</span><span class='line'>    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span> <span class="k">as</span> <span class="n">python_file</span><span class="p">:</span>
</span><span class='line'>        <span class="n">file_contents</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">python_file</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or you could use the <code>read_text</code> method on <code>Path</code> objects and a list comprehension to read the file contents into a new list all in one line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
</span><span class='line'>
</span><span class='line'><span class="n">file_contents</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="n">path</span><span class="o">.</span><span class="n">read_text</span><span class="p">()</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">path</span> <span class="ow">in</span> <span class="n">Path</span><span class="o">.</span><span class="n">cwd</span><span class="p">()</span><span class="o">.</span><span class="n">rglob</span><span class="p">(</span><span class="s">&#39;*.py&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>What if you need to write to a file?</p>

<p>You could use the <code>open</code> context manager again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&#39;.editorconfig&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">config</span><span class="p">:</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;# config goes here&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or you could use the <code>write_text</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">Path</span><span class="p">(</span><span class="s">&#39;.editorconfig&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">write_text</span><span class="p">(</span><span class="s">&#39;# config goes here&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you prefer using <code>open</code>, whether as a context manager or otherwise, you could instead use the <code>open</code> method on your <code>Path</code> object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
</span><span class='line'>
</span><span class='line'><span class="n">path</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s">&#39;.editorconfig&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">with</span> <span class="n">path</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">mode</span><span class="o">=</span><span class="s">&#39;wt&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">config</span><span class="p">:</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;# config goes here&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or, as of Python 3.6, you can even pass your <code>Path</code> object to the built-in <code>open</code> function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
</span><span class='line'>
</span><span class='line'><span class="n">path</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s">&#39;.editorconfig&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="s">&#39;wt&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">config</span><span class="p">:</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;# config goes here&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Path objects make your code more explicit</h2>

<p>What do the following 3 variables point to?
What do their values represent?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">person</span> <span class="o">=</span> <span class="s">&#39;{&quot;name&quot;: &quot;Trey Hunner&quot;, &quot;location&quot;: &quot;San Diego&quot;}&#39;</span>
</span><span class='line'><span class="n">pycon_2019</span> <span class="o">=</span> <span class="s">&quot;2019-05-01&quot;</span>
</span><span class='line'><span class="n">home_directory</span> <span class="o">=</span> <span class="s">&#39;/home/trey&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each of those variables points to a string.</p>

<p>Those strings represent different things: one is a JSON blob, one is a date, and one is a file path.</p>

<p>These are a little bit more useful representations for these objects:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">date</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
</span><span class='line'>
</span><span class='line'><span class="n">person</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;name&quot;</span><span class="p">:</span> <span class="s">&quot;Trey Hunner&quot;</span><span class="p">,</span> <span class="s">&quot;location&quot;</span><span class="p">:</span> <span class="s">&quot;San Diego&quot;</span><span class="p">}</span>
</span><span class='line'><span class="n">pycon_2019</span> <span class="o">=</span> <span class="n">date</span><span class="p">(</span><span class="mi">2019</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="n">home_directory</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s">&#39;/home/trey&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>JSON objects deserialize to dictionaries, dates are represented natively using <code>datetime.date</code> objects, and <strong>filesystem paths can now be generically represented using <code>pathlib.Path</code> objects</strong>.</p>

<p>Using <code>Path</code> objects makes your code more explicit.
If you&rsquo;re trying to represent a date, you can use a <code>date</code> object.
If you&rsquo;re trying to represent a filepath, you can use a <code>Path</code> object.</p>

<p>I&rsquo;m not a strong advocate of object-oriented programming.
Classes add another layer of abstraction and abstractions can sometimes add more complexity than simplicity.
But the <code>pathlib.Path</code> class is <strong>a useful abstraction</strong>.
It&rsquo;s also quickly becoming a universally recognized abstraction.</p>

<p>Thanks to <a href="https://www.python.org/dev/peps/pep-0519/#standard-library-changes">PEP 519</a>, file path objects are now becoming the standard for working with paths.
As of Python 3.6, the built-in <code>open</code> function and the various functions in the <code>os</code>, <code>shutil</code>, and <code>os.path</code> modules all work properly with <code>pathlib.Path</code> objects.
<strong>You can start using pathlib today without changing most of your code that works with paths</strong>!</p>

<h2>What&rsquo;s missing from pathlib?</h2>

<p>While <code>pathlib</code> is great, it&rsquo;s not all-encompassing.
There are definitely <strong>a few missing features I&rsquo;ve stumbled upon that I wish the <code>pathlib</code> module included</strong>.</p>

<p>The first gap I&rsquo;ve noticed is the lack of <code>shutil</code> equivalents within the <code>pathlib.Path</code> methods.</p>

<p>While you can pass <code>Path</code> objects (and path-like objects) to the higher-level <code>shutil</code> functions for copying/deleting/moving files and directories, there&rsquo;s no equivalent to these functions on <code>Path</code> objects.</p>

<p>So to copy a file you still have to do something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">shutil</span> <span class="kn">import</span> <span class="n">copyfile</span>
</span><span class='line'>
</span><span class='line'><span class="n">source</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s">&#39;old_file.txt&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">destination</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s">&#39;new_file.txt&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">copyfile</span><span class="p">(</span><span class="n">source</span><span class="p">,</span> <span class="n">destination</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s also no <code>pathlib</code> equivalent of <code>os.chdir</code>.</p>

<p>This just means you&rsquo;ll need to import <code>chdir</code> if you ever need to change the current working directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">os</span> <span class="kn">import</span> <span class="n">chdir</span>
</span><span class='line'>
</span><span class='line'><span class="n">parent</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s">&#39;..&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">chdir</span><span class="p">(</span><span class="n">parent</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>os.walk</code> function has no <code>pathlib</code> equivalent either.
Though you can make your own <code>walk</code>-like functions using <code>pathlib</code> fairly easily.</p>

<p>My hope is that <code>pathlib.Path</code> objects might eventually include methods for some of these missing operations.
But even with these missing features, <strong>I still find it much more manageable to use &ldquo;<code>pathlib</code> and friends&rdquo; than &ldquo;<code>os.path</code> and friends&rdquo;</strong>.</p>

<h2>Should you always use pathlib?</h2>

<p>Since Python 3.6, <strong>pathlib.Path objects work nearly everywhere you&rsquo;re already using path strings</strong>.
So I see no reason <em>not</em> to use <code>pathlib</code> if you&rsquo;re on Python 3.6 (or higher).</p>

<p>If you&rsquo;re on an earlier version of Python 3, you can always wrap your <code>Path</code> object in a <code>str</code> call to get a string out of it when you need an escape hatch back to string land.
It&rsquo;s awkward but it works:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">os</span> <span class="kn">import</span> <span class="n">chdir</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
</span><span class='line'>
</span><span class='line'><span class="n">chdir</span><span class="p">(</span><span class="n">Path</span><span class="p">(</span><span class="s">&#39;/home/trey&#39;</span><span class="p">))</span>  <span class="c"># Works on Python 3.6+</span>
</span><span class='line'><span class="n">chdir</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">Path</span><span class="p">(</span><span class="s">&#39;/home/trey&#39;</span><span class="p">)))</span>  <span class="c"># Works on earlier versions also</span>
</span></code></pre></td></tr></table></div></figure>


<p>Regardless of which version of Python 3 you&rsquo;re on, I would recommend giving <code>pathlib</code> a try.</p>

<p>And if you&rsquo;re stuck on Python 2 still (the clock is ticking!) the third-party <a href="https://github.com/mcmtroffaes/pathlib2">pathlib2</a> module on PyPI is a backport so you can use <code>pathlib</code> on any version of Python.</p>

<p>I find that using <code>pathlib</code> often makes my code more readable.
Most of my code that works with files now defaults to using <code>pathlib</code> and I recommend that you do the same.
<strong>If you can use <code>pathlib</code>, you should</strong>.</p>

<p>If you&rsquo;d like to continue reading about pathlib, check out my follow-up article called <a href="https://treyhunner.com/2019/01/no-really-pathlib-is-great/">No really, pathlib is great</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Cyber Monday Sales 2018]]></title>
    <link href="https://treyhunner.com/2018/11/python-cyber-monday-sales/"/>
    <updated>2018-11-26T07:45:00-08:00</updated>
    <id>https://treyhunner.com/2018/11/python-cyber-monday-sales</id>
    <content type="html"><![CDATA[<p>I&rsquo;m running <a href="https://treyhunner.com/2018/11/python-morsels-sale-52-weeks-of-python/">a sale</a> that ends in 24 hours, but I&rsquo;m not the only one.
This post is a compilation of the different Cyber Monday deals I&rsquo;ve found related to Python and Python learning.</p>

<h3>Python Morsels weekly skill-building</h3>

<p>This is my weekly Python skill-building service.</p>

<p>I&rsquo;m offering 52 weeks of <a href="https://www.pythonmorsels.com/">Python Morsels</a> for 50% off.</p>

<p>You can find <a href="https://treyhunner.com/2018/11/python-morsels-sale-52-weeks-of-python/">more details on this sale here</a>.</p>

<h3>Talk Python Course Bundle</h3>

<p>Michael Kennedy of <a href="https://training.talkpython.fm/courses/bundle/black-friday-2018">Talk Python</a> is offering a 4 course bundle for a number of Python courses.</p>

<h3>Reuven Lerner&rsquo;s Python courses</h3>

<p>Reuven Lerner is also offering a <a href="http://blog.lerner.co.il/last-chance-to-save-40-on-python-and-git-courses/">40% off sale on his courses</a>.
Reuven has courses on Python, Git, and regular expressions.</p>

<h3>PyBites Code Challenges</h3>

<p>Bob and Julian of PyBites are offering a 50% off sale on their <a href="https://gumroad.com/l/ZFrD/black-friday">Code Challenges</a>.
These are a different variety of code challenges than Python Morsels.
You could sign up for both and <a href="https://www.pythonmorsels.com/">Python Morsels</a> if you wanted extra learning every week.</p>

<h3>Hello Web Books</h3>

<p>Tracy Osborn is running a 50% off sale on her <a href="https://hellowebbooks.com/order/">Hello Web Books</a>, which include books on Python and Django for beginners to web programming and books on design for beginners to web design.
You&rsquo;ll need to enter coupon code BLACKFRIDAY2018 to get these deals.</p>

<h3>The pytest book</h3>

<p>Brian Okken&rsquo;s <a href="https://pragprog.com/book/bopytest/python-testing-with-pytest">Python Testing with pytest</a> is on sale today (along with other Pragmatic Bookshelf books) for 40% off with coupon code turkeysale2018.</p>

<h3>More Python Books</h3>

<p>A number of Python book publishers, such as <a href="https://nostarch.com/catalog/python">No Starch</a>, are running big sales on their books.
I took a look at their sale, but haven&rsquo;t gone searching for more of them.</p>

<h3>Other Cyber Monday deals?</h3>

<p>If you have questions about the <a href="https://treyhunner.com/2018/11/python-morsels-sale-52-weeks-of-python/">Python Morsels sale</a>, <a href="mailto:tr%65y%40&amp;#116;%72%75&amp;#116;%68%66u&amp;#108;&amp;#46;&amp;#116;&amp;#101;c%68&amp;#110;%6flo%67%79">email me</a>.</p>

<p>The Python Morsels sale and likely all the other sales above will end in the next 24 hours, probably sooner depending on when you&rsquo;re reading this.</p>

<p>So go check them out!</p>

<p>Did I miss a deal that you know about?
Link to it in the comments!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Black Friday Sale: 50% Off 52 weeks of Python Morsels]]></title>
    <link href="https://treyhunner.com/2018/11/python-morsels-sale-52-weeks-of-python/"/>
    <updated>2018-11-21T11:00:00-08:00</updated>
    <id>https://treyhunner.com/2018/11/python-morsels-sale-52-weeks-of-python</id>
    <content type="html"><![CDATA[<p>I launched a weekly Python skill-building service earlier this year called <a href="https://www.pythonmorsels.com/">Python Morsels</a>.
This week I&rsquo;m running my first sale, which will also likely be the biggest sale that I run on Python Morsels for the foreseeable future (I don&rsquo;t want to say forever, but probably forever).</p>

<p>If you&rsquo;re an experienced programmer and you feel like your Python code could be <em>more Pythonic</em>, <a href="https://www.pythonmorsels.com/">Python Morsels</a> is for you.</p>

<p>Before I jump into details, let me explain what Python Morsels is.</p>

<h2>The inspiration</h2>

<p>I do on-site Python training for teams, which means I work with a lot of developers at a lot of companies.
One question I hear all the time is &ldquo;how can I make my code more Pythonic&rdquo;?</p>

<p>Most of the folks I teach are not new to programming and they&rsquo;re usually not new to Python either, but they also aren&rsquo;t experienced at leveraging the features and idioms that make Python unique.
Being a skilled programmer isn&rsquo;t the same as being a skilled <em>Python</em> programmer</p>

<p>Late last year this conundrum inspired me to create <a href="https://www.pythonmorsels.com/">Python Morsels</a>.</p>

<h2>Learning by doing</h2>

<p>My training courses and workshops are exercise-driven and I find an exercise-heavy style of teaching very effective.</p>

<p>You don&rsquo;t learn by putting information into your head, <strong>you learn by trying to retrieve information from your head</strong>.
You can watch talks and read books and read code, but you&rsquo;ll absorb very little unless you <em>apply</em> what you&rsquo;ve learned.
You learn by doing, which means writing Python code.</p>

<p>That&rsquo;s why Python Morsels is entirely about writing code and reflecting on the code you&rsquo;ve written.</p>

<h2>Python Morsels: exercise-driven learning</h2>

<p>After you sign up for Python Morsels I&rsquo;ll send you <strong>one exercise every week</strong>.
Not an interview questions: a realistic Python exercise inspired by the interesting problems I&rsquo;ve had to solve in the past. The purpose of these exercises is to <strong>inspire you to learn something new about Python each week</strong>.</p>

<p>Each exercise includes a number of bonuses so you can <strong>choose your own difficulty level</strong>.
All exercises also include automated tests so you can test your code quickly.
After you&rsquo;ve solved the exercise I&rsquo;ll send you a number of different solutions to the problem with a discussion about why we might choose one solution over another.
These solutions are meant to help you <strong>reconsider the way you write your code</strong>.</p>

<p>While solving the bonuses is important, the more important thing is that you <strong>get into the habit of time-boxed weekly learning</strong>. You want to spend your time effectively and the best way to do that is to <strong>form a learning habit</strong> and time box that habit.
I suggest that you dedicate 30 minutes every week to solving the exercise, regardless of the difficulty level you choose, as well as 30 minutes to reflecting on the solutions email I send you.</p>

<h2>So how much is this sale for?</h2>

<p>Python Morsels normally costs $16/month (or $160/year on the annual plan).</p>

<p>From now until Monday I&rsquo;m offering a 40% discount off the annual plan, which means you&rsquo;ll get <strong>52 weeks of Python skill-building for $96</strong>.
That&rsquo;s effectively $8/month or <strong>a 50% discount</strong> when compared to the monthly subscription.</p>

<p>I say &ldquo;52 weeks&rdquo; instead of 1 year because Python Morsels subscriptions can be &ldquo;paused&rdquo; at any time, which allows for breaks during vacations and busy periods and ensures you&rsquo;ll get all of the 52 weeks you signed up for.</p>

<p>To take advantage of this discount you&rsquo;ll need to sign up for <a href="https://www.pythonmorsels.com/">Python Morsels</a>, verify your email address, go to the Account page, and click the Subscribe button for the <strong>52 Week Plan</strong>.
The BLACKFRIDAY discount code should be automatically applied from now until the end of the sale on Monday.</p>

<h2>Money back guarantee</h2>

<p>This is the first sale I&rsquo;ve ever held so I&rsquo;m not sure whether it&rsquo;s common to offer a guarantee on sales, but I&rsquo;m going to do it for this one because I&rsquo;m pretty confident in what I&rsquo;m offering.</p>

<p>If you contact me with concerns but I can&rsquo;t find something that works for your needs, I&rsquo;ll send you a full refund.
I want you to improve your Python skills, but I don&rsquo;t want you signing up for something that isn&rsquo;t for you.
If you end up signing up for Python Morsels and you don&rsquo;t improve your Python skills because of it, <strong>you deserve a refund because I&rsquo;ve wasted your time</strong>.</p>

<h2>What do the first 52 weeks of Python Morsels exercises cover?</h2>

<p>Python Morsels starts small, but the exercises increase in difficulty over time.
The first 52 weeks of Python exercises will wander into <strong>a lot of interesting topics</strong>.</p>

<p>Within one year we&rsquo;ll:</p>

<ul>
<li>work with and create our own iterators (both generators and iterator classes)</li>
<li>make text-parsing programs and command-line programs</li>
<li>talk a lot about readability and code style</li>
<li>dive into a number of the built-ins and standard library modules</li>
<li>use operator overloading to make classes that support arithmetic</li>
<li>create our context managers</li>
<li>create our own decorators</li>
<li>use properties and descriptors and even <strong>make our own descriptor</strong></li>
<li>create custom collections (mappings, sequences, strings, sets, etc.)</li>
</ul>


<p>Haven&rsquo;t made a descriptor before?
By this time next year you will have!</p>

<h2>The sale ends on Monday</h2>

<p>This sale will ends on <strong>Monday November 26</strong>, end of day.</p>

<p>To get an effective 50% discount on Python Morsels over the next 52 weeks, <a href="https://www.pythonmorsels.com/accounts/signup/">sign up to Python Morsels</a>, verify your email, go to the Account page, and subscribe to the <strong>52 Week Plan</strong>.</p>

<h2>Share this sale with friends and family</h2>

<p>If you have a friend or colleague who might benefit from weekly Python practice, let them know about this sale!
The BLACKFRIDAY coupon expires on Monday, but there&rsquo;s no limit on the number of signups, so there&rsquo;s no reason to keep this sale a secret.</p>

<p>So please share this email or the discount code with anyone you know who might find value in 52 weeks of Python skill-building.</p>

<h2>Frequently Asked Questions</h2>

<p>These are questions that I&rsquo;ve been asked at least once (that&rsquo;s apparently what &ldquo;frequently&rdquo; means now).</p>

<h4>Is this for someone who is brand new to programming?</h4>

<p>No, it isn&rsquo;t.
Python Morsels is for someone who has been using Python for a while and wants to improve their Python coding practices.
Many of the folks currently signed up write primarily Python code, but have a background in at least one other programming language.
However, there are a handful of folks who are signed up who would call Python their first and only programming language and I do try to accommodate folks in that camp as much as I can.</p>

<p>In general, I recommend Python Morsels for <strong>folks who are currently writing Python code regularly</strong>.</p>

<h4>How is Python Morsels different from a Python course?</h4>

<p>During my on-site trainings I&rsquo;m present as a live instructor and coach.
That&rsquo;s something you won&rsquo;t get from Python Morsels.
During online courses there are videos explaining each topic before it&rsquo;s practiced.
Python Morsels also doesn&rsquo;t have that.</p>

<p>The focus of Python Morsels is a bit different than a course or a training.
If you think of Python course as like taking a tennis class, Python Morsels is more like <strong>weekly tennis practice</strong>.
A Python Morsels subscriber described it to me as <strong>like Hannon&rsquo;s finger exercises for piano or Kreutzer&rsquo;s études for violin</strong>.
Python Morsels is guided <strong>deliberate practice</strong> in the domain of writing readable and maintainable Python code.</p>

<h4>How much time does this require each week?</h4>

<p>I expect that you&rsquo;ll spend <strong>about an hour each week on Python Morsels in total</strong>.</p>

<p>You&rsquo;re a busy person who has production code to write and I don&rsquo;t want to waste your time.
The exercise includes bonuses, but I don&rsquo;t expect you to solve them all each week: instead I want you to time box yourself.
I recommend that you set aside 30 minutes to solve the problem each week, including running the tests and solving as many bonuses as you can.
I&rsquo;d also like you to set aside 30 minutes to reflect on your code while reading the solution email I send each week.
I often link to related resources to read/watch, but I&rsquo;d like you to bookmark those for later.</p>

<p>If you have more than one hour to devote each week, you could sit on the solutions for a couple days and then resolve the exercise without looking at the solutions email.
I don&rsquo;t expect this though.</p>

<h4>What if the exercises are too easy for me and I don&rsquo;t learn anything new?</h4>

<p>If you find the exercises are too easy, email me and I&rsquo;ll see what I can do.
I&rsquo;ve developed quite a few exercises over the last year and I may be able to work with you to ensure the exercises you get are a good fit for your experience level.
If it turns out that Python Morsels simply isn&rsquo;t for you, I&rsquo;ll refund you.</p>

<h4>What if the exercises suddenly get too hard for me?</h4>

<p>If the exercises turn out to be too challenging for you, either immediately or eventually, email me.
I plan to create some easier tracks for Python Morsels eventually (there&rsquo;s certainly demand for this) and I may have some suitable exercises to send to you.
If Python Morsels doesn&rsquo;t suit your needs and I can&rsquo;t easily fix the problem, I&rsquo;ll send you a refund.</p>

<h2>Ready to start a weekly skill-building habit?</h2>

<p>Are you ready to start 52 weeks of Python skill-building for $96 (normally $192)?
That&rsquo;s less than $2/week and about one hour of your time each week (which really is the bigger cost here).</p>

<p>If you have questions that I didn&rsquo;t address above, please <a href="mailto:tr%65y%40&amp;#116;%72%75&amp;#116;%68%66u&amp;#108;&amp;#46;&amp;#116;&amp;#101;c%68&amp;#110;%6flo%67%79">email me</a> and say what you&rsquo;re thinking/feeling.</p>

<p>If you&rsquo;re interested in seeing the opinion of someone who has worked through Python Morsels exercises, see the testimonials <a href="https://www.pythonmorsels.com/">on the homepage</a> or take a look at what some of my Python Morsels friends have said about it on Twitter (<a href="https://twitter.com/AndrewsForge/status/1018597131496710144">Andrew Pinkham</a>, <a href="https://twitter.com/PavelAnni/status/963778202605932544">Pavel Anni</a>, <a href="https://twitter.com/jmwatt3/status/1035314897280794629">Jason Wattier</a>, <a href="https://twitter.com/abqpythonista/status/976202006405595136">Ben Jones</a>).</p>

<p>Ready to sign up?
<a href="https://www.pythonmorsels.com/accounts/signup/">Click here to get 52 weeks of Python Morsels at 50% off</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Asterisks in Python: what they are and how to use them]]></title>
    <link href="https://treyhunner.com/2018/10/asterisks-in-python-what-they-are-and-how-to-use-them/"/>
    <updated>2018-10-11T07:30:00-07:00</updated>
    <id>https://treyhunner.com/2018/10/asterisks-in-python-what-they-are-and-how-to-use-them</id>
    <content type="html"><![CDATA[<p>There are a lot of places you&rsquo;ll see <code>*</code> and <code>**</code> used in Python.
These two operators can be a bit mysterious at times, both for brand new programmers and for folks moving from many other programming languages which may not have completely equivalent operators.
I&rsquo;d like to discuss what those operators are and the many ways they&rsquo;re used.</p>

<p>The <code>*</code> and <code>**</code> operators have grown in ability over the years and I&rsquo;ll be discussing all the ways that you can currently use these operators and noting which uses only work in modern versions of Python.
So if you learned <code>*</code> and <code>**</code> back in the days of Python 2, I&rsquo;d recommend at least skimming this article because Python 3 has added a lot of new uses for these operators.</p>

<p>If you&rsquo;re newer to Python and you&rsquo;re not yet familiar with keyword arguments (a.k.a. named arguments), I&rsquo;d recommend reading my article on <a href="https://treyhunner.com/2018/04/keyword-arguments-in-python/">keyword arguments in Python</a> first.</p>

<ul data-toc=".entry-content"></ul>


<h2>What we&rsquo;re not talking about</h2>

<p>When I discuss <code>*</code> and <code>**</code> in this article, I&rsquo;m talking about the <code>*</code> and <code>**</code> <em>prefix</em> operators, not the <em>infix</em> operators.</p>

<p>So I&rsquo;m not talking about multiplication and exponentiation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="mi">2</span> <span class="o">*</span> <span class="mi">5</span>
</span><span class='line'><span class="go">10</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="mi">2</span> <span class="o">**</span> <span class="mi">5</span>
</span><span class='line'><span class="go">32</span>
</span></code></pre></td></tr></table></div></figure>


<h2>So what are we talking about?</h2>

<p>We&rsquo;re talking about the <code>*</code> and <code>**</code> prefix operators, that is the <code>*</code> and <code>**</code> operators that are used before a variable.  For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">more_numbers</span> <span class="o">=</span> <span class="p">[</span><span class="o">*</span><span class="n">numbers</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">18</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="o">*</span><span class="n">more_numbers</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s">&#39;, &#39;</span><span class="p">)</span>
</span><span class='line'><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">18</span>
</span></code></pre></td></tr></table></div></figure>


<p>Two of the uses of <code>*</code> are shown in that code and no uses of <code>**</code> are shown.</p>

<p>This includes:</p>

<ol>
<li>Using <code>*</code> and <code>**</code> to pass arguments to a function</li>
<li>Using <code>*</code> and <code>**</code> to capture arguments passed into a function</li>
<li>Using <code>*</code> to accept keyword-only arguments</li>
<li>Using <code>*</code> to capture items during tuple unpacking</li>
<li>Using <code>*</code> to unpack iterables into a list/tuple</li>
<li>Using <code>**</code> to unpack dictionaries into other dictionaries</li>
</ol>


<p>Even if you think you&rsquo;re familiar with all of these ways of using <code>*</code> and <code>**</code>, I recommend looking at each of the code blocks below to make sure they&rsquo;re all things you&rsquo;re familiar with.
The Python core developers have continued to add new abilities to these operators over the last few years and it&rsquo;s easy to overlook some of the newer uses of <code>*</code> and <code>**</code>.</p>

<h2>Asterisks for unpacking into function call</h2>

<p>When calling a function, the <code>*</code> operator can be used to unpack an iterable into the arguments in the function call:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;lemon&#39;</span><span class="p">,</span> <span class="s">&#39;pear&#39;</span><span class="p">,</span> <span class="s">&#39;watermelon&#39;</span><span class="p">,</span> <span class="s">&#39;tomato&#39;</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="n">fruits</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">fruits</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">fruits</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">fruits</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span>
</span><span class='line'><span class="go">lemon pear watermelon tomato</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="o">*</span><span class="n">fruits</span><span class="p">)</span>
</span><span class='line'><span class="go">lemon pear watermelon tomato</span>
</span></code></pre></td></tr></table></div></figure>


<p>That <code>print(*fruits)</code> line is passing all of the items in the <code>fruits</code> list into the <code>print</code> function call as separate arguments, without us even needing to know how many arguments are in the list.</p>

<p>The <code>*</code> operator isn&rsquo;t just syntactic sugar here.
This ability of sending in all items in a particular iterable as separate arguments wouldn&rsquo;t be possible without <code>*</code>, unless the list was a fixed length.</p>

<p>Here&rsquo;s another example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">transpose_list</span><span class="p">(</span><span class="n">list_of_lists</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span>
</span><span class='line'>        <span class="nb">list</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="n">list_of_lists</span><span class="p">)</span>
</span><span class='line'>    <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we&rsquo;re accepting a list of lists and returning a &ldquo;transposed&rdquo; list of lists.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">transpose_list</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">9</span><span class="p">]])</span>
</span><span class='line'><span class="go">[[1, 2, 3], [4, 5, 6], [7, 8, 9]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>**</code> operator does something similar, but with keyword arguments.
The <code>**</code> operator allows us to take a dictionary of key-value pairs and unpack it into keyword arguments in a function call.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">date_info</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;year&#39;</span><span class="p">:</span> <span class="s">&quot;2020&quot;</span><span class="p">,</span> <span class="s">&#39;month&#39;</span><span class="p">:</span> <span class="s">&quot;01&quot;</span><span class="p">,</span> <span class="s">&#39;day&#39;</span><span class="p">:</span> <span class="s">&quot;01&quot;</span><span class="p">}</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">filename</span> <span class="o">=</span> <span class="s">&quot;{year}-{month}-{day}.txt&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">**</span><span class="n">date_info</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">filename</span>
</span><span class='line'><span class="go">&#39;2020-01-01.txt&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>From my experience, using <code>**</code> to unpack keyword arguments into a function call isn&rsquo;t particularly common.
The place I see this most is when practicing inheritance: calls to <code>super()</code> often include both <code>*</code> and <code>**</code>.</p>

<p>Both <code>*</code> and <code>**</code> can be used multiple times in function calls, as of Python 3.5.</p>

<p>Using <code>*</code> multiple times can sometimes be handy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;lemon&#39;</span><span class="p">,</span> <span class="s">&#39;pear&#39;</span><span class="p">,</span> <span class="s">&#39;watermelon&#39;</span><span class="p">,</span> <span class="s">&#39;tomato&#39;</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="k">print</span><span class="p">(</span><span class="o">*</span><span class="n">numbers</span><span class="p">,</span> <span class="o">*</span><span class="n">fruits</span><span class="p">)</span>
</span><span class='line'><span class="go">2 1 3 4 7 lemon pear watermelon tomato</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using <code>**</code> multiple times looks similar:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">date_info</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;year&#39;</span><span class="p">:</span> <span class="s">&quot;2020&quot;</span><span class="p">,</span> <span class="s">&#39;month&#39;</span><span class="p">:</span> <span class="s">&quot;01&quot;</span><span class="p">,</span> <span class="s">&#39;day&#39;</span><span class="p">:</span> <span class="s">&quot;01&quot;</span><span class="p">}</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">track_info</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;artist&#39;</span><span class="p">:</span> <span class="s">&quot;Beethoven&quot;</span><span class="p">,</span> <span class="s">&#39;title&#39;</span><span class="p">:</span> <span class="s">&#39;Symphony No 5&#39;</span><span class="p">}</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">filename</span> <span class="o">=</span> <span class="s">&quot;{year}-{month}-{day}-{artist}-{title}.txt&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
</span><span class='line'><span class="gp">... </span>    <span class="o">**</span><span class="n">date_info</span><span class="p">,</span>
</span><span class='line'><span class="gp">... </span>    <span class="o">**</span><span class="n">track_info</span><span class="p">,</span>
</span><span class='line'><span class="gp">... </span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">filename</span>
</span><span class='line'><span class="go">&#39;2020-01-01-Beethoven-Symphony No 5.txt&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You need to be careful when using <code>**</code> multiple times though.
Functions in Python can&rsquo;t have the same keyword argument specified multiple times, so the keys in each dictionary used with <code>**</code> must be distinct or an exception will be raised.</p>

<h2>Asterisks for packing arguments given to function</h2>

<p>When defining a function, the <code>*</code> operator can be used to capture an unlimited number of positional arguments given to the function.
These arguments are captured into a tuple.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">random</span> <span class="kn">import</span> <span class="n">randint</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">roll</span><span class="p">(</span><span class="o">*</span><span class="n">dice</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">sum</span><span class="p">(</span><span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">die</span><span class="p">)</span> <span class="k">for</span> <span class="n">die</span> <span class="ow">in</span> <span class="n">dice</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This function accepts any number of arguments:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">roll</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>
</span><span class='line'><span class="go">18</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">roll</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>
</span><span class='line'><span class="go">9</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">roll</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>
</span><span class='line'><span class="go">8</span>
</span></code></pre></td></tr></table></div></figure>


<p>Python&rsquo;s <code>print</code> and <code>zip</code> functions accept any number of positional arguments.
This argument-packing use of <code>*</code> allows us to make our own function which, like <code>print</code> and <code>zip</code>, accept any number of arguments.</p>

<p>The <code>**</code> operator also has another side to it: we can use <code>**</code> when defining a function to capture any keyword arguments given to the function into a dictionary:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">tag</span><span class="p">(</span><span class="n">tag_name</span><span class="p">,</span> <span class="o">**</span><span class="n">attributes</span><span class="p">):</span>
</span><span class='line'>    <span class="n">attribute_list</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>        <span class="n">f</span><span class="s">&#39;{name}=&quot;{value}&quot;&#39;</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">attributes</span><span class="o">.</span><span class="n">items</span><span class="p">()</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">f</span><span class="s">&quot;&lt;{tag_name} {&#39; &#39;.join(attribute_list)}&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That <code>**</code> will capture any keyword arguments we give to this function into a dictionary which will that <code>attributes</code> arguments will reference.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">tag</span><span class="p">(</span><span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="n">href</span><span class="o">=</span><span class="s">&quot;http://treyhunner.com&quot;</span><span class="p">)</span>
</span><span class='line'><span class="go">&#39;&lt;a href=&quot;http://treyhunner.com&quot;&gt;&#39;</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">tag</span><span class="p">(</span><span class="s">&#39;img&#39;</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">40</span><span class="p">,</span> <span class="n">src</span><span class="o">=</span><span class="s">&quot;face.jpg&quot;</span><span class="p">)</span>
</span><span class='line'><span class="go">&#39;&lt;img height=&quot;20&quot; width=&quot;40&quot; src=&quot;face.jpg&quot;&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Positional arguments with keyword-only arguments</h2>

<p>As of Python 3, we now have a special syntax for accepting keyword-only arguments to functions.
Keyword-only arguments are function arguments which can <em>only</em> be specified using the keyword syntax, meaning they cannot be specified positionally.</p>

<p>To accept keyword-only arguments, we can put named arguments after a <code>*</code> usage when defining our function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_multiple</span><span class="p">(</span><span class="o">*</span><span class="n">keys</span><span class="p">,</span> <span class="n">dictionary</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span>
</span><span class='line'>        <span class="n">dictionary</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">default</span><span class="p">)</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">keys</span>
</span><span class='line'>    <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above function can be used like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">fruits</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;lemon&#39;</span><span class="p">:</span> <span class="s">&#39;yellow&#39;</span><span class="p">,</span> <span class="s">&#39;orange&#39;</span><span class="p">:</span> <span class="s">&#39;orange&#39;</span><span class="p">,</span> <span class="s">&#39;tomato&#39;</span><span class="p">:</span> <span class="s">&#39;red&#39;</span><span class="p">}</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">get_multiple</span><span class="p">(</span><span class="s">&#39;lemon&#39;</span><span class="p">,</span> <span class="s">&#39;tomato&#39;</span><span class="p">,</span> <span class="s">&#39;squash&#39;</span><span class="p">,</span> <span class="n">dictionary</span><span class="o">=</span><span class="n">fruits</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">&#39;unknown&#39;</span><span class="p">)</span>
</span><span class='line'><span class="go">[&#39;yellow&#39;, &#39;red&#39;, &#39;unknown&#39;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The arguments <code>dictionary</code> and <code>default</code> come after <code>*keys</code>, which means they can <em>only</em> be specified as <a href="https://treyhunner.com/2018/04/keyword-arguments-in-python/">keyword arguments</a>.
If we try to specify them positionally we&rsquo;ll get an error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">fruits</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;lemon&#39;</span><span class="p">:</span> <span class="s">&#39;yellow&#39;</span><span class="p">,</span> <span class="s">&#39;orange&#39;</span><span class="p">:</span> <span class="s">&#39;orange&#39;</span><span class="p">,</span> <span class="s">&#39;tomato&#39;</span><span class="p">:</span> <span class="s">&#39;red&#39;</span><span class="p">}</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">get_multiple</span><span class="p">(</span><span class="s">&#39;lemon&#39;</span><span class="p">,</span> <span class="s">&#39;tomato&#39;</span><span class="p">,</span> <span class="s">&#39;squash&#39;</span><span class="p">,</span> <span class="n">fruits</span><span class="p">,</span> <span class="s">&#39;unknown&#39;</span><span class="p">)</span>
</span><span class='line'><span class="gt">Traceback (most recent call last):</span>
</span><span class='line'>  File <span class="nb">&quot;&lt;stdin&gt;&quot;</span>, line <span class="m">1</span>, in <span class="n">&lt;module&gt;</span>
</span><span class='line'><span class="gr">TypeError</span>: <span class="n">get_multiple() missing 1 required keyword-only argument: &#39;dictionary&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This behavior was introduced to Python through <a href="https://www.python.org/dev/peps/pep-3102/">PEP 3102</a>.</p>

<h2>Keyword-only arguments without positional arguments</h2>

<p>That keyword-only argument feature is cool, but what if you want to require keyword-only arguments without capturing unlimited positional arguments?</p>

<p>Python allows this with a somewhat strange <code>*</code>-on-its-own syntax:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">with_previous</span><span class="p">(</span><span class="n">iterable</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">fillvalue</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Yield each iterable item along with the item before it.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">previous</span> <span class="o">=</span> <span class="n">fillvalue</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">iterable</span><span class="p">:</span>
</span><span class='line'>        <span class="k">yield</span> <span class="n">previous</span><span class="p">,</span> <span class="n">item</span>
</span><span class='line'>        <span class="n">previous</span> <span class="o">=</span> <span class="n">item</span>
</span></code></pre></td></tr></table></div></figure>


<p>This function accepts an <code>iterable</code> argument, which can be specified positionally (as the first argument) or by its name and a <code>fillvalue</code> argument which is a keyword-only argument.  This means we can call <code>with_previous</code> like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">with_previous</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="n">fillvalue</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span>
</span><span class='line'><span class="go">[(0, 2), (2, 1), (1, 3)]</span>
</span></code></pre></td></tr></table></div></figure>


<p>But not like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">list</span><span class="p">(</span><span class="n">with_previous</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'><span class="gt">Traceback (most recent call last):</span>
</span><span class='line'>  File <span class="nb">&quot;&lt;stdin&gt;&quot;</span>, line <span class="m">1</span>, in <span class="n">&lt;module&gt;</span>
</span><span class='line'><span class="gr">TypeError</span>: <span class="n">with_previous() takes 1 positional argument but 2 were given</span>
</span></code></pre></td></tr></table></div></figure>


<p>This function accepts two arguments and one of them, <code>fillvalue</code> <em>must be specified as a keyword argument</em>.</p>

<p>I usually use keyword-only arguments while capturing any number of positional arguments, but I do sometimes use this <code>*</code> to enforce an argument to only be specified by its name.</p>

<p>Python&rsquo;s built-in <code>sorted</code> function actually uses this approach.  If you look at the help information on <code>sorted</code> you&rsquo;ll see the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">help</span><span class="p">(</span><span class="nb">sorted</span><span class="p">)</span>
</span><span class='line'><span class="go">Help on built-in function sorted in module builtins:</span>
</span><span class='line'>
</span><span class='line'><span class="go">sorted(iterable, /, *, key=None, reverse=False)</span>
</span><span class='line'><span class="go">    Return a new list containing all items from the iterable in ascending order.</span>
</span><span class='line'>
</span><span class='line'><span class="go">    A custom key function can be supplied to customize the sort order, and the</span>
</span><span class='line'><span class="go">    reverse flag can be set to request the result in descending order.</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s an <code>*</code>-on-its-own, right in the documented arguments for <code>sorted</code>.</p>

<h2>Asterisks in tuple unpacking</h2>

<p>Python 3 also added a new way of using the <code>*</code> operator that is only somewhat related to the <code>*</code>-when-defining-a-function and <code>*</code>-when-calling-a-function features above.</p>

<p>The <code>*</code> operator can also be used in tuple unpacking now:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;lemon&#39;</span><span class="p">,</span> <span class="s">&#39;pear&#39;</span><span class="p">,</span> <span class="s">&#39;watermelon&#39;</span><span class="p">,</span> <span class="s">&#39;tomato&#39;</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">first</span><span class="p">,</span> <span class="n">second</span><span class="p">,</span> <span class="o">*</span><span class="n">remaining</span> <span class="o">=</span> <span class="n">fruits</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">remaining</span>
</span><span class='line'><span class="go">[&#39;watermelon&#39;, &#39;tomato&#39;]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">first</span><span class="p">,</span> <span class="o">*</span><span class="n">remaining</span> <span class="o">=</span> <span class="n">fruits</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">remaining</span>
</span><span class='line'><span class="go">[&#39;pear&#39;, &#39;watermelon&#39;, &#39;tomato&#39;]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">first</span><span class="p">,</span> <span class="o">*</span><span class="n">middle</span><span class="p">,</span> <span class="n">last</span> <span class="o">=</span> <span class="n">fruits</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">middle</span>
</span><span class='line'><span class="go">[&#39;pear&#39;, &#39;watermelon&#39;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re wondering &ldquo;where could I use this in my own code&rdquo;, take a look at the examples in my article on <a href="https://treyhunner.com/2018/03/tuple-unpacking-improves-python-code-readability/">tuple unpacking in Python</a>.
In that article I show how this use of the <code>*</code> operator can sometimes be used as an alternative to sequence slicing.</p>

<p>Usually when I teach <code>*</code> I note that you can only use one <code>*</code> expression in a single multiple assignment call.
That&rsquo;s technically incorrect because it&rsquo;s possible to use two in a nested unpacking (I talk about nested unpacking in my tuple unpacking article):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;lemon&#39;</span><span class="p">,</span> <span class="s">&#39;pear&#39;</span><span class="p">,</span> <span class="s">&#39;watermelon&#39;</span><span class="p">,</span> <span class="s">&#39;tomato&#39;</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="p">((</span><span class="n">first_letter</span><span class="p">,</span> <span class="o">*</span><span class="n">remaining</span><span class="p">),</span> <span class="o">*</span><span class="n">other_fruits</span><span class="p">)</span> <span class="o">=</span> <span class="n">fruits</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">remaining</span>
</span><span class='line'><span class="go">[&#39;e&#39;, &#39;m&#39;, &#39;o&#39;, &#39;n&#39;]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">other_fruits</span>
</span><span class='line'><span class="go">[&#39;pear&#39;, &#39;watermelon&#39;, &#39;tomato&#39;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ve never seen a good use for this though and I don&rsquo;t think I&rsquo;d recommend using it even if you found one because it seems a bit cryptic.</p>

<p>The PEP that added this to Python 3.0 is <a href="https://www.python.org/dev/peps/pep-3132/">PEP 3132</a> and it&rsquo;s not a very long one.</p>

<h2>Asterisks in list literals</h2>

<p>Python 3.5 introduced a ton of new <code>*</code>-related features through <a href="https://www.python.org/dev/peps/pep-0448/">PEP 448</a>.
One of the biggest new features is the ability to use <code>*</code> to dump an iterable into a new list.</p>

<p>Say you have a function that takes any sequence and returns a list with the sequence and the reverse of that sequence concatenated together:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">palindromify</span><span class="p">(</span><span class="n">sequence</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">list</span><span class="p">(</span><span class="n">sequence</span><span class="p">)</span> <span class="o">+</span> <span class="nb">list</span><span class="p">(</span><span class="nb">reversed</span><span class="p">(</span><span class="n">sequence</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>This function needs to convert things to lists a couple times in order to concatenate the lists and return the result.
In Python 3.5, we can type this instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">palindromify</span><span class="p">(</span><span class="n">sequence</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="o">*</span><span class="n">sequence</span><span class="p">,</span> <span class="o">*</span><span class="nb">reversed</span><span class="p">(</span><span class="n">sequence</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code removes some needless list calls so our code is both more efficient and more readable.</p>

<p>Here&rsquo;s another example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">rotate_first_item</span><span class="p">(</span><span class="n">sequence</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="o">*</span><span class="n">sequence</span><span class="p">[</span><span class="mi">1</span><span class="p">:],</span> <span class="n">sequence</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>That function returns a new list where the first item in the given list (or other sequence) is moved to the end of the new list.</p>

<p>This use of the <code>*</code> operator is a great way to concatenate iterables of different types together.
The <code>*</code> operator works for any iterable, whereas using the <code>+</code> operator only works on particular sequences which have to all be the same type.</p>

<p>This isn&rsquo;t just limited to creating lists either.
We can also dump iterables into new tuples or sets:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;lemon&#39;</span><span class="p">,</span> <span class="s">&#39;pear&#39;</span><span class="p">,</span> <span class="s">&#39;watermelon&#39;</span><span class="p">,</span> <span class="s">&#39;tomato&#39;</span><span class="p">]</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="p">(</span><span class="o">*</span><span class="n">fruits</span><span class="p">[</span><span class="mi">1</span><span class="p">:],</span> <span class="n">fruits</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'><span class="go">(&#39;pear&#39;, &#39;watermelon&#39;, &#39;tomato&#39;, &#39;lemon&#39;)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">uppercase_fruits</span> <span class="o">=</span> <span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">upper</span><span class="p">()</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">fruits</span><span class="p">)</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="p">{</span><span class="o">*</span><span class="n">fruits</span><span class="p">,</span> <span class="o">*</span><span class="n">uppercase_fruits</span><span class="p">}</span>
</span><span class='line'><span class="go">{&#39;lemon&#39;, &#39;watermelon&#39;, &#39;TOMATO&#39;, &#39;LEMON&#39;, &#39;PEAR&#39;, &#39;WATERMELON&#39;, &#39;tomato&#39;, &#39;pear&#39;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that the last line above takes a list and a generator and dumps them into a new set.
Before this use of <code>*</code>, there wasn&rsquo;t previously an easy way to do this in one line of code.
There was a way to do this before, but it wasn&rsquo;t easy to remember or discover:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="nb">set</span><span class="p">()</span><span class="o">.</span><span class="n">union</span><span class="p">(</span><span class="n">fruits</span><span class="p">,</span> <span class="n">uppercase_fruits</span><span class="p">)</span>
</span><span class='line'><span class="go">{&#39;lemon&#39;, &#39;watermelon&#39;, &#39;TOMATO&#39;, &#39;LEMON&#39;, &#39;PEAR&#39;, &#39;WATERMELON&#39;, &#39;tomato&#39;, &#39;pear&#39;}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Double asterisks in dictionary literals</h2>

<p>PEP 448 also expanded the abilities of <code>**</code> by allowing this operator to be used for dumping key/value pairs from one dictionary into a new dictionary:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">date_info</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;year&#39;</span><span class="p">:</span> <span class="s">&quot;2020&quot;</span><span class="p">,</span> <span class="s">&#39;month&#39;</span><span class="p">:</span> <span class="s">&quot;01&quot;</span><span class="p">,</span> <span class="s">&#39;day&#39;</span><span class="p">:</span> <span class="s">&quot;01&quot;</span><span class="p">}</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">track_info</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;artist&#39;</span><span class="p">:</span> <span class="s">&quot;Beethoven&quot;</span><span class="p">,</span> <span class="s">&#39;title&#39;</span><span class="p">:</span> <span class="s">&#39;Symphony No 5&#39;</span><span class="p">}</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">all_info</span> <span class="o">=</span> <span class="p">{</span><span class="o">**</span><span class="n">date_info</span><span class="p">,</span> <span class="o">**</span><span class="n">track_info</span><span class="p">}</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">all_info</span>
</span><span class='line'><span class="go">{&#39;year&#39;: &#39;2020&#39;, &#39;month&#39;: &#39;01&#39;, &#39;day&#39;: &#39;01&#39;, &#39;artist&#39;: &#39;Beethoven&#39;, &#39;title&#39;: &#39;Symphony No 5&#39;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I wrote another article on how this is now the <a href="https://treyhunner.com/2016/02/how-to-merge-dictionaries-in-python/">idiomatic way to merge dictionaries in Python</a>.</p>

<p>This can be used for more than just merging two dictionaries together though.</p>

<p>For example we can copy a dictionary while adding a new value to it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">date_info</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;year&#39;</span><span class="p">:</span> <span class="s">&#39;2020&#39;</span><span class="p">,</span> <span class="s">&#39;month&#39;</span><span class="p">:</span> <span class="s">&#39;01&#39;</span><span class="p">,</span> <span class="s">&#39;day&#39;</span><span class="p">:</span> <span class="s">&#39;7&#39;</span><span class="p">}</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">event_info</span> <span class="o">=</span> <span class="p">{</span><span class="o">**</span><span class="n">date_info</span><span class="p">,</span> <span class="s">&#39;group&#39;</span><span class="p">:</span> <span class="s">&quot;Python Meetup&quot;</span><span class="p">}</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">event_info</span>
</span><span class='line'><span class="go">{&#39;year&#39;: &#39;2020&#39;, &#39;month&#39;: &#39;01&#39;, &#39;day&#39;: &#39;7&#39;, &#39;group&#39;: &#39;Python Meetup&#39;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or copy/merge dictionaries while overriding particular values:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='pycon'><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">event_info</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;year&#39;</span><span class="p">:</span> <span class="s">&#39;2020&#39;</span><span class="p">,</span> <span class="s">&#39;month&#39;</span><span class="p">:</span> <span class="s">&#39;01&#39;</span><span class="p">,</span> <span class="s">&#39;day&#39;</span><span class="p">:</span> <span class="s">&#39;7&#39;</span><span class="p">,</span> <span class="s">&#39;group&#39;</span><span class="p">:</span> <span class="s">&#39;Python Meetup&#39;</span><span class="p">}</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">new_info</span> <span class="o">=</span> <span class="p">{</span><span class="o">**</span><span class="n">event_info</span><span class="p">,</span> <span class="s">&#39;day&#39;</span><span class="p">:</span> <span class="s">&quot;14&quot;</span><span class="p">}</span>
</span><span class='line'><span class="gp">&gt;&gt;&gt; </span><span class="n">new_info</span>
</span><span class='line'><span class="go">{&#39;year&#39;: &#39;2020&#39;, &#39;month&#39;: &#39;01&#39;, &#39;day&#39;: &#39;14&#39;, &#39;group&#39;: &#39;Python Meetup&#39;}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Python&rsquo;s asterisks are powerful</h2>

<p>Python&rsquo;s <code>*</code> and <code>**</code> operators aren&rsquo;t just syntactic sugar.
Some of the things they allow you to do could be achieved through other means, but the alternatives to <code>*</code> and <code>**</code> tend to be more cumbersome and more resource intensive.
And some of the features they provide are simply impossible to achieve without them: for example there&rsquo;s no way to accept any number of positional arguments to a function without <code>*</code>.</p>

<p>After reading about all the features of <code>*</code> and <code>**</code>, you might be wondering what the names for these odd operators are.
Unfortunately, they don&rsquo;t really have succinct names.
I&rsquo;ve heard <code>*</code> called the &ldquo;packing&rdquo; and &ldquo;unpacking&rdquo; operator.
I&rsquo;ve also heard it called &ldquo;splat&rdquo; (from the Ruby world) and I&rsquo;ve heard it called simply &ldquo;star&rdquo;.</p>

<p>I tend to call these operators &ldquo;star&rdquo; and &ldquo;double star&rdquo; or &ldquo;star star&rdquo;.
That doesn&rsquo;t distinguish them from their infix relatives (multiplication and exponentiation), but context usually makes it obvious whether we&rsquo;re talking about prefix or infix operators.</p>

<p>If you don&rsquo;t understand <code>*</code> and <code>**</code> or you&rsquo;re concerned about memorizing all of their uses, don&rsquo;t be!
These operators have many uses and memorizing the specific use of each one isn&rsquo;t as important as getting a feel for when you might be able to reach for these operators.
I suggest using this article as <strong>a cheat sheet</strong> or to making your own cheat sheet to help you use <code>*</code> and <code>**</code> in Python.</p>

<h2>Practice makes perfect</h2>

<p>You don&rsquo;t learn by putting information in your head, you learn by attempting to retrieve information from your head.
So you&rsquo;ve just read an article on something new, but <strong>you haven&rsquo;t learned yet</strong>.</p>

<p>I highly recommend you write some code that you uses <code>*</code> and <code>**</code> in a number of different ways today and then quiz yourself on the different ways to use these operators tomorrow.</p>

<p>I&rsquo;d love to send you an exercise on to get some practice with <code>*</code> and <code>**</code> right now.
If you sign up for <a href="https://www.pythonmorsels.com/">Python Morsels</a> using the for below, I&rsquo;ll <strong>send you an exercise that uses <code>*</code> and <code>**</code> right after you sign up</strong>.</p>

<p><form method="post" action="https://www.pythonmorsels.com/accounts/signup/">
    <label><input type="radio" name="exercise_track" value="star1"> I was pretty much brand new to asterisks in Python</label>
    <br>
    <label><input type="radio" name="exercise_track" value="star2"> The keyword-only stuff was new to me</label>
    <br>
    <label><input type="radio" name="exercise_track" value="star3"> Using those operators in list/dict literals isn&rsquo;t something I&rsquo;ve done much</label>
    <br>
    <br>
  <input type="email" name="email" placeholder="Your email" class="subscribe-email form-big" required>
  <input type="hidden" name="exercise_track" value="comprehension">
  <input type="hidden" name="form_id" value="asterisks post">
  <button type="submit" class="subscribe-btn form-big">Get my Python Morsels exercise</button>
<br></p>

<p><small>
  I won&rsquo;t share you info with others (see the <a href="https://www.pythonmorsels.com/privacy/">Python Morsels Privacy Policy</a> for details).<br>
  This form is reCAPTCHA protected (Google <a href="https://policies.google.com/privacy">Privacy Policy</a> &amp; <a href="https://policies.google.com/terms">TOS</a>)
</small></p>

<p></form></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Overusing lambda expressions in Python]]></title>
    <link href="https://treyhunner.com/2018/09/stop-writing-lambda-expressions/"/>
    <updated>2018-09-27T07:30:00-07:00</updated>
    <id>https://treyhunner.com/2018/09/stop-writing-lambda-expressions</id>
    <content type="html"><![CDATA[<p><strong>Note</strong>: This post was originally titled &ldquo;Stop writing lambda expressions in Python&rdquo; but I&rsquo;ve changed the title after deciding that it was a little too extreme.</p>

<p>It&rsquo;s hard for me to teach an in-depth Python class without discussing lambda expressions.
I almost always get questions about them.
My students tend to see them in code on StackOverflow or they see them in a coworker&rsquo;s code (which, realistically, may have also come from StackOverflow).</p>

<p>I get a lot of questions about lambda, I&rsquo;m hesitant to recommend my students embrace Python&rsquo;s lambda expressions.
I have had an aversion to lambda expressions for many years, and since I started teaching Python more regularly a few years ago, my aversion to lambda expressions has only grown stronger.</p>

<p>I&rsquo;m going to explain how I see lambda expressions and why I tend to recommend my students avoid using them.</p>

<ul data-toc=".entry-content"></ul>


<h2>Lambda expressions in Python: what are they?</h2>

<p>Lambda expressions a special syntax in Python for creating <a href="https://en.wikipedia.org/wiki/Anonymous_function">anonymous functions</a>.
I&rsquo;ll call the <code>lambda</code> syntax itself a <strong>lambda expression</strong> and the function you get back from this I&rsquo;ll call a <strong>lambda function</strong>.</p>

<p>Python&rsquo;s lambda expressions allow a function to be created and passed around (often into another function) all in one line of code.</p>

<p>Lambda expressions allow us to take this code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">colors</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;Goldenrod&quot;</span><span class="p">,</span> <span class="s">&quot;Purple&quot;</span><span class="p">,</span> <span class="s">&quot;Salmon&quot;</span><span class="p">,</span> <span class="s">&quot;Turquoise&quot;</span><span class="p">,</span> <span class="s">&quot;Cyan&quot;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">normalize_case</span><span class="p">(</span><span class="n">string</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">string</span><span class="o">.</span><span class="n">casefold</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">normalized_colors</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="n">normalize_case</span><span class="p">,</span> <span class="n">colors</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And turn it into this code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">colors</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;Goldenrod&quot;</span><span class="p">,</span> <span class="s">&quot;Purple&quot;</span><span class="p">,</span> <span class="s">&quot;Salmon&quot;</span><span class="p">,</span> <span class="s">&quot;Turquoise&quot;</span><span class="p">,</span> <span class="s">&quot;Cyan&quot;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="n">normalized_colors</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">s</span><span class="p">:</span> <span class="n">s</span><span class="o">.</span><span class="n">casefold</span><span class="p">(),</span> <span class="n">colors</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lambda expressions are just a special syntax for making functions.
They can only have one statement in them and they return the result of that statement automatically.</p>

<p>The inherent limitations of lambda expressions are actually part of their appeal.
When an experienced Python programmer sees a lambda expression they know that they&rsquo;re working with a function that is <strong>only used in one place</strong> and does <strong>just one thing</strong>.</p>

<p>If you&rsquo;ve ever used anonymous functions in JavaScript before, you can think of Python&rsquo;s lambda expressions as the same, except they have more restrictions and use a very different syntax than the traditional function syntax.</p>

<h2>Where they&rsquo;re usually used</h2>

<p>You&rsquo;ll typically see <code>lambda</code> expressions used when calling functions (or classes) that accept a function as an argument.</p>

<p>Python&rsquo;s built-in <code>sorted</code> function accepts a function as its <code>key</code> argument.  This <em>key function</em> is used to compute a comparison key when determining the sorting order of items.</p>

<p>So <code>sorted</code> is a great example of a place that lambda expressions are often used:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">colors</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;Goldenrod&quot;</span><span class="p">,</span> <span class="s">&quot;purple&quot;</span><span class="p">,</span> <span class="s">&quot;Salmon&quot;</span><span class="p">,</span> <span class="s">&quot;turquoise&quot;</span><span class="p">,</span> <span class="s">&quot;cyan&quot;</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">colors</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">s</span><span class="p">:</span> <span class="n">s</span><span class="o">.</span><span class="n">casefold</span><span class="p">())</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;cyan&#39;</span><span class="p">,</span> <span class="s">&#39;Goldenrod&#39;</span><span class="p">,</span> <span class="s">&#39;purple&#39;</span><span class="p">,</span> <span class="s">&#39;Salmon&#39;</span><span class="p">,</span> <span class="s">&#39;turquoise&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above code returns the given colors sorted in a case-insensitive way.</p>

<p>The <code>sorted</code> function isn&rsquo;t the only use of lambda expressions, but it&rsquo;s a common one.</p>

<h2>The pros and cons of lambda</h2>

<p>I frame my thinking around lambda expressions as a constant comparison to using <code>def</code> to define functions.
Both of these tools give us functions, but they each have different limitations and use a different syntax.</p>

<p>The main ways lambda expressions are different from <code>def</code>:</p>

<ol>
<li>They can be immediately passed around (no variable needed)</li>
<li>They can only have a single line of code within them</li>
<li>They return automatically</li>
<li>They can&rsquo;t have a docstring and they don&rsquo;t have a name</li>
<li>They use a different and unfamiliar syntax</li>
</ol>


<p>The fact that lambda expressions can be passed around is their biggest benefit.  Returning automatically is neat but not a big benefit in my mind.  I find the &ldquo;single line of code&rdquo; limitation is neither good nor bad overall.  The fact that lambda functions can&rsquo;t have docstrings and don&rsquo;t have a name is unfortunate and their unfamiliar syntax can be troublesome for newer Pythonistas.</p>

<p>Overall I feel the cons slightly outweigh the pros of lambda expressions, but my biggest complaint about them is that I find that they tend to be both misused and overused.</p>

<h2>Lambda is both misused and overused</h2>

<p>When I see a lambda expression in unfamiliar code I immediately become skeptical.
When I encounter a lambda expression in the wild, I often find that removing it improves code readability.</p>

<p>Sometimes the issue is that lambda expressions are being misused, meaning they&rsquo;re <strong>used in a way that is nearly always unideal</strong>.
Other times lambda expressions are simply being overused, meaning they&rsquo;re acceptable but I&rsquo;d personally <strong>prefer to see the code written a different way</strong>.</p>

<p>Let&rsquo;s take a look at the various ways lambda expressions are misused and overused.</p>

<h2>Misuse: naming lambda expressions</h2>

<p>PEP8, the official Python style guide, advises never to write code like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">normalize_case</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">s</span><span class="p">:</span> <span class="n">s</span><span class="o">.</span><span class="n">casefold</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above statement makes an anonymous function and then assigns it to a variable.
The above code ignores the reason lambda functions are useful: <strong>lambda functions can be passed around without needing to be assigned to a variable first</strong>.</p>

<p>If you want to create a one-liner function and store it in a variable, you should use <code>def</code> instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">normalize_case</span><span class="p">(</span><span class="n">s</span><span class="p">):</span> <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="n">casefold</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>PEP8 recommends this because named functions are a common and easily understood thing.
This also has the benefit of giving our function a proper name, which could make debugging easier.
Unlike functions defined with <code>def</code>, lambda functions never have a name (it&rsquo;s always <code>&lt;lambda&gt;</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">normalize_case</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">s</span><span class="p">:</span> <span class="n">s</span><span class="o">.</span><span class="n">casefold</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">normalize_case</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">function</span> <span class="o">&lt;</span><span class="k">lambda</span><span class="o">&gt;</span> <span class="n">at</span> <span class="mh">0x7f264d5b91e0</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">normalize_case</span><span class="p">(</span><span class="n">s</span><span class="p">):</span> <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="n">casefold</span><span class="p">()</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">normalize_case</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">function</span> <span class="n">normalize_case</span> <span class="n">at</span> <span class="mh">0x7f247f68fea0</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>If you want to create a function and store it in a variable, define your function using <code>def</code></strong>.
That&rsquo;s exactly what it&rsquo;s for.
It doesn&rsquo;t matter if your function is a single line of code or if you&rsquo;re defining a function inside of another function, <code>def</code> works just fine for those use cases.</p>

<h2>Misuse: needless function calls</h2>

<p>I frequently see lambda expressions used to wrap around a function that was already appropriate for the problem at hand.</p>

<p>For example take this code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">sorted_numbers</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">n</span><span class="p">:</span> <span class="nb">abs</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The person who wrote this code likely learned that lambda expressions are used for making a function that can be passed around.
But they missed out on a slightly bigger picture idea: <strong>all functions in Python (not just lambda functions) can be passed around</strong>.</p>

<p>Since <code>abs</code> (which returns the absolute value of a number) is a function and all functions can be passed around, we could actually have written the above code like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">sorted_numbers</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="nb">abs</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now this example might feel contrived, but it&rsquo;s not terribly uncommon to overuse lambda expressions in this way.  Here&rsquo;s another example I&rsquo;ve seen:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">pairs</span> <span class="o">=</span> <span class="p">[(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">11</span><span class="p">),</span> <span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">),</span> <span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]</span>
</span><span class='line'><span class="n">sorted_by_smallest</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">pairs</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">items</span><span class="p">:</span> <span class="nb">min</span><span class="p">(</span><span class="n">items</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because we&rsquo;re accepting exactly the same arguments as we&rsquo;re passing into <code>min</code>, we don&rsquo;t need that extra function call.  We can just pass the <code>min</code> function to <code>key</code> instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">pairs</span> <span class="o">=</span> <span class="p">[(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">11</span><span class="p">),</span> <span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">),</span> <span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]</span>
</span><span class='line'><span class="n">sorted_by_smallest</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">pairs</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="nb">min</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You don&rsquo;t need a lambda function if you already have another function that does what you want.</p>

<h2>Overuse: simple, but non-trivial functions</h2>

<p>It&rsquo;s common to see lambda expressions used to make a function that returns a couple of values in a tuple:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">colors</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;Goldenrod&quot;</span><span class="p">,</span> <span class="s">&quot;Purple&quot;</span><span class="p">,</span> <span class="s">&quot;Salmon&quot;</span><span class="p">,</span> <span class="s">&quot;Turquoise&quot;</span><span class="p">,</span> <span class="s">&quot;Cyan&quot;</span><span class="p">])</span>
</span><span class='line'><span class="n">colors_by_length</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">colors</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">c</span><span class="p">:</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">c</span><span class="p">),</span> <span class="n">c</span><span class="o">.</span><span class="n">casefold</span><span class="p">()))</span>
</span></code></pre></td></tr></table></div></figure>


<p>That <code>key</code> function here is helping us sort these colors by their length followed by their case-normalized name.</p>

<p>This code is the same as the above code, but I find it more readable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">length_and_alphabetical</span><span class="p">(</span><span class="n">string</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Return sort key: length first, then case-normalized string.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">string</span><span class="p">),</span> <span class="n">string</span><span class="o">.</span><span class="n">casefold</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="n">colors</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;Goldenrod&quot;</span><span class="p">,</span> <span class="s">&quot;Purple&quot;</span><span class="p">,</span> <span class="s">&quot;Salmon&quot;</span><span class="p">,</span> <span class="s">&quot;Turquoise&quot;</span><span class="p">,</span> <span class="s">&quot;Cyan&quot;</span><span class="p">])</span>
</span><span class='line'><span class="n">colors_by_length</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">colors</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">length_and_alphabetical</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code is quite a bit more verbose, but I find the name of that key function makes it clearer what we&rsquo;re sorting by.
We&rsquo;re not just sorting by the length and we&rsquo;re not just sorting by the color: we&rsquo;re sorting by both.</p>

<p><strong>If a function is important, it deserves a name</strong>.
You could argue that most functions that are used in a lambda expression are so trivial that they don&rsquo;t deserve a name, but there&rsquo;s often little downside to naming functions and I find it usually makes my code more readable overall.</p>

<p>Naming functions often makes code more readable, the same way <a href="http://treyhunner.com/2018/03/tuple-unpacking-improves-python-code-readability/">using tuple unpacking to name variables</a> instead of using arbitrary index-lookups often makes code more readable.</p>

<h2>Overuse: when multiple lines would help</h2>

<p>Sometimes the &ldquo;just one line&rdquo; aspect of lambda expressions cause us to write code in convoluted ways.  For example take this code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">points</span> <span class="o">=</span> <span class="p">[((</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="s">&#39;red&#39;</span><span class="p">),</span> <span class="p">((</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="s">&#39;green&#39;</span><span class="p">)]</span>
</span><span class='line'><span class="n">points_by_color</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">points</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">p</span><span class="p">:</span> <span class="n">p</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;re hard-coding an index lookup here to sort points by their color.
If we used a named function we could have used <a href="http://treyhunner.com/2018/03/tuple-unpacking-improves-python-code-readability/">tuple unpacking</a> to make this code more readable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">color_of_point</span><span class="p">(</span><span class="n">point</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Return the color of the given point.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">),</span> <span class="n">color</span> <span class="o">=</span> <span class="n">point</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">color</span>
</span><span class='line'>
</span><span class='line'><span class="n">points</span> <span class="o">=</span> <span class="p">[((</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="s">&#39;red&#39;</span><span class="p">),</span> <span class="p">((</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="s">&#39;green&#39;</span><span class="p">)]</span>
</span><span class='line'><span class="n">points_by_color</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">points</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">color_of_point</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tuple unpacking can improve readability over using hard-coded index lookups.
<strong>Using lambda expressions often means sacrificing some Python language features</strong>, specifically those that require multiple lines of code (like an extra assignment statement).</p>

<h2>Overuse: lambda with map and filter</h2>

<p>Python&rsquo;s map and filter functions are almost always paired with lambda expressions.  It&rsquo;s common to see StackOverflow questions asking &ldquo;what is lambda&rdquo; answered with code examples like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">18</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">squared_numbers</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">n</span><span class="p">:</span> <span class="n">n</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="n">numbers</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">odd_numbers</span> <span class="o">=</span> <span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">n</span><span class="p">:</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="p">,</span> <span class="n">numbers</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I find these examples a bit confusing because <strong>I almost never use map and filter in my code</strong>.</p>

<p>Python&rsquo;s <code>map</code> and <code>filter</code> functions are used for looping over an iterable and making a new iterable that either slightly changes each element or filters the iterable down to only elements that match a certain condition.
We can accomplish both of those tasks just as well with list comprehensions or generator expressions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">18</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">squared_numbers</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">odd_numbers</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">numbers</span> <span class="k">if</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Personally, I&rsquo;d prefer to see the above generator expressions written over multiple lines of code (<a href="http://treyhunner.com/2015/12/python-list-comprehensions-now-in-color/">see my article on comprehensions</a>) but I find even these one-line generator expressions more readable than those <code>map</code> and <code>filter</code> calls.</p>

<p>The general operations of mapping and filtering are useful, but we really don&rsquo;t need the <code>map</code> and <code>filter</code> functions themselves.
Generator expressions are a special syntax that exists just for the tasks of mapping and filtering.
So my advice is to <strong>use generator expressions instead of the <code>map</code> and <code>filter</code> functions</strong>.</p>

<h2>Misuse: sometimes you don&rsquo;t even need to pass a function</h2>

<p>What about cases where you need to pass around a function that performs a single operation?</p>

<p>Newer Pythonistas who are keen on functional programming sometimes write code like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="nb">reduce</span>
</span><span class='line'>
</span><span class='line'><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">18</span><span class="p">]</span>
</span><span class='line'><span class="n">total</span> <span class="o">=</span> <span class="nb">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">,</span> <span class="n">numbers</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code adds all the numbers in the <code>numbers</code> list.
There&rsquo;s an even better way to do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">18</span><span class="p">]</span>
</span><span class='line'><span class="n">total</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Python&rsquo;s built-in <code>sum</code> function was made just for this task.</p>

<p>The <code>sum</code> function, along with a number of other specialized Python tools, are easy to overlook.
But I&rsquo;d encourage you to seek out the more specialized tools when you need them because they often make for more readable code.</p>

<p>Instead of passing functions into other functions, <strong>look into whether there is a more specialized way to solve your problem instead</strong>.</p>

<h2>Overuse: using lambda for very simple operations</h2>

<p>Let&rsquo;s say instead of adding numbers up, we&rsquo;re multiply numbers together:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="nb">reduce</span>
</span><span class='line'>
</span><span class='line'><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">18</span><span class="p">]</span>
</span><span class='line'><span class="n">product</span> <span class="o">=</span> <span class="nb">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span><span class="p">,</span> <span class="n">numbers</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above lambda expression is necessary because we&rsquo;re not allowed to pass the <code>*</code> operator around as if it were a function.
If there was a function that was equivalent to <code>*</code>, we could pass it into the <code>reduce</code> function instead.</p>

<p>Python&rsquo;s standard library actually has a whole module meant to address this problem:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="nb">reduce</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">operator</span> <span class="kn">import</span> <span class="n">mul</span>
</span><span class='line'>
</span><span class='line'><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">18</span><span class="p">]</span>
</span><span class='line'><span class="n">product</span> <span class="o">=</span> <span class="nb">reduce</span><span class="p">(</span><span class="n">mul</span><span class="p">,</span> <span class="n">numbers</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Python&rsquo;s <a href="https://docs.python.org/3/library/operator.html">operator module</a> exists to make various Python operators easy to use as functions.
If you&rsquo;re practicing functional(ish) programming, <strong>Python&rsquo;s <code>operator</code> module is your friend</strong>.</p>

<p>In addition to providing functions corresponding to Python&rsquo;s many operators, the <code>operator</code> module provides a couple common higher level functions for accessing items and attributes and calling methods.</p>

<p>There&rsquo;s <code>itemgetter</code> for accessing indexes of a list/sequence or keys of a dictionary/mapping:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Without operator: accessing a key/index</span>
</span><span class='line'><span class="n">rows_sorted_by_city</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">rows</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">row</span><span class="p">:</span> <span class="n">row</span><span class="p">[</span><span class="s">&#39;city&#39;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="c"># With operator: accessing a key/index</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">operator</span> <span class="kn">import</span> <span class="n">itemgetter</span>
</span><span class='line'><span class="n">rows_sorted_by_city</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">rows</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">itemgetter</span><span class="p">(</span><span class="s">&#39;city&#39;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s also <code>attrgetter</code> for accessing attributes on an object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Without operator: accessing an attribute</span>
</span><span class='line'><span class="n">products_by_quantity</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">products</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">p</span><span class="p">:</span> <span class="n">p</span><span class="o">.</span><span class="n">quantity</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># With operator: accessing an attribute</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">operator</span> <span class="kn">import</span> <span class="n">attrgetter</span>
</span><span class='line'><span class="n">products_by_quantity</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">products</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">attrgetter</span><span class="p">(</span><span class="s">&#39;quantity&#39;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And <code>methodcaller</code> for calling methods on an object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Without operator: calling a method</span>
</span><span class='line'><span class="n">sorted_colors</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">colors</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">s</span><span class="p">:</span> <span class="n">s</span><span class="o">.</span><span class="n">casefold</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="c"># With operator: calling a method</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">operator</span> <span class="kn">import</span> <span class="n">methodcaller</span>
</span><span class='line'><span class="n">sorted_colors</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">colors</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">methodcaller</span><span class="p">(</span><span class="s">&#39;casefold&#39;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>I <em>usually</em> find that <strong>using the functions in the <code>operator</code> module makes my code clearer</strong> than if I&rsquo;d used an equivalent lambda expression.</p>

<h2>Overuse: when higher order functions add confusion</h2>

<p>A function that accepts a function as an argument is called a <a href="https://en.wikipedia.org/wiki/Higher-order_function">higher order function</a>.  Higher order functions are the kinds of functions that we tend to pass lambda functions to.</p>

<p>The use of higher order functions is common when practicing functional programming.  Functional programming isn&rsquo;t the only way to use Python though: Python is a multi-paradigm language so we can mix and match coding disciplines to make our code more readable.</p>

<p>Compare this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="nb">reduce</span>
</span><span class='line'>
</span><span class='line'><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">18</span><span class="p">]</span>
</span><span class='line'><span class="n">product</span> <span class="o">=</span> <span class="nb">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">x</span> <span class="o">*</span> <span class="n">y</span><span class="p">,</span> <span class="n">numbers</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>To this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">multiply_all</span><span class="p">(</span><span class="n">numbers</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Return the product of the given numbers.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">product</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">:</span>
</span><span class='line'>        <span class="n">product</span> <span class="o">*=</span> <span class="n">n</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">product</span>
</span><span class='line'>
</span><span class='line'><span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">18</span><span class="p">]</span>
</span><span class='line'><span class="n">product</span> <span class="o">=</span> <span class="n">multiply_all</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The second code is longer, but folks without a functional programming background will often find it easier to understand.</p>

<p>Anyone who has gone through one of my Python training courses can probably understand what that <code>multiply_all</code> function does, whereas that <code>reduce</code>/<code>lambda</code> combination is likely a bit more cryptic for many Python programmers.</p>

<p>In general, <strong>passing one function into another function, tends to make code more complex, which can hurt readability</strong>.</p>

<h2>Should you ever use lambda expressions?</h2>

<p>So I find the use of lambda expressions problematic because:</p>

<ul>
<li>lambda expressions are an odd and unfamiliar syntax to many Python programmers</li>
<li>lambda functions inherently lack a name or documentation, meaning reading their code is the only way to figure out what they do</li>
<li>lambda expressions can have only one statement in them so certain language features that improve readability, like tuple unpacking, can&rsquo;t be used with them</li>
<li>lambda functions can often be replaced with already existing functions in the standard libray or built-in to Python</li>
</ul>


<p>Lambda expressions are rarely more immediately readable than a well-named function.
While a <code>def</code> statement is often more understandable, <strong>Python also has a number of features that can be used to replace lambda expressions</strong>, including special syntaxes (comprehensions), built-in functions (sum), and standard library functions (in the <code>operators</code> module).</p>

<p>I&rsquo;d say that using lambda expressions is acceptable only if your situation meets all four of these criteria:</p>

<ol>
<li>The operation you&rsquo;re doing is trivial: the function doesn&rsquo;t deserve a name</li>
<li>Having a lambda expression makes your code more understandable than the function names you can think of</li>
<li>You&rsquo;re pretty sure there&rsquo;s not already a function that does what you&rsquo;re looking for</li>
<li>Everyone on your team understands lambda expressions and you&rsquo;ve all agreed to use them</li>
</ol>


<p>If any of those four statements don&rsquo;t fit your situation, I&rsquo;d recommend <strong>writing a new function using <code>def</code></strong> and (whenever possible) <strong>embracing a function that already exists within Python</strong> that already does what you&rsquo;re looking for.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to make an iterator in Python]]></title>
    <link href="https://treyhunner.com/2018/06/how-to-make-an-iterator-in-python/"/>
    <updated>2018-06-21T16:00:00-07:00</updated>
    <id>https://treyhunner.com/2018/06/how-to-make-an-iterator-in-python</id>
    <content type="html"><![CDATA[<p>I wrote an article sometime ago on <a href="http://treyhunner.com/2016/12/python-iterator-protocol-how-for-loops-work/">the iterator protocol that powers Python&rsquo;s <code>for</code> loops</a>.
One thing I left out of that article was <strong>how to make your own iterators</strong>.</p>

<p>In this article I&rsquo;m going to discuss why you&rsquo;d want to make your own iterators and then show you how to do so.</p>

<ul data-toc=".entry-content"></ul>


<h2>What is an iterator?</h2>

<p>First let&rsquo;s quickly address what an iterator is.
For a much more detailed explanation, consider watching my <a href="https://www.youtube.com/watch?v=V2PkkMS2Ack">Loop Better talk</a> or reading <a href="https://opensource.com/article/18/3/loop-better-deeper-look-iteration-python">the article based on the talk</a>.</p>

<p>An <strong>iter<em>able</em></strong> is anything you&rsquo;re able to loop over.</p>

<p>An <strong>iter<em>ator</em></strong> is the object that does the actual iterating.</p>

<p>You can get an iterator from any iterable by calling the built-in <code>iter</code> function on the iterable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">favorite_numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">57</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">95</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">iter</span><span class="p">(</span><span class="n">favorite_numbers</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">list_iterator</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x7fe8e5623160</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can use the built-in <code>next</code> function on an iterator to get the next item from it (you&rsquo;ll get a <code>StopIteration</code> exception if there are no more items).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">favorite_numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">57</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">95</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">my_iterator</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">favorite_numbers</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">next</span><span class="p">(</span><span class="n">my_iterator</span><span class="p">)</span>
</span><span class='line'><span class="mi">6</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">next</span><span class="p">(</span><span class="n">my_iterator</span><span class="p">)</span>
</span><span class='line'><span class="mi">57</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s one more rule about iterators that makes everything interesting: <strong>iterators are also iterables</strong> and their iterator is themselves.
I explain the consequences of that more fully in that <a href="https://www.youtube.com/watch?v=V2PkkMS2Ack">Loop Better talk</a> I mentioned above.</p>

<h2>Why make an iterator?</h2>

<p>Iterators allow you to make an iterable that computes its items as it goes.
Which means that you can make iterables that are <strong>lazy</strong>, in that they don&rsquo;t determine what their next item is until you ask them for it.</p>

<p>Using an iterator instead of a list, set, or another iterable data structure can sometimes allow us to save memory.
For example, we can use <code>itertools.repeat</code> to create an iterable that provides 100 million <code>4</code>&rsquo;s to us:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">repeat</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">lots_of_fours</span> <span class="o">=</span> <span class="n">repeat</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="n">times</span><span class="o">=</span><span class="mi">100</span><span class="n">_000_000</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This iterator takes up 56 bytes of memory on my machine:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">sys</span><span class="o">.</span><span class="n">getsizeof</span><span class="p">(</span><span class="n">lots_of_fours</span><span class="p">)</span>
</span><span class='line'><span class="mi">56</span>
</span></code></pre></td></tr></table></div></figure>


<p>An equivalent list of 100 million <code>4</code>&rsquo;s takes up many megabytes of memory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">lots_of_fours</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">*</span> <span class="mi">100</span><span class="n">_000_000</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">sys</span><span class="o">.</span><span class="n">getsizeof</span><span class="p">(</span><span class="n">lots_of_fours</span><span class="p">)</span>
</span><span class='line'><span class="mi">800000064</span>
</span></code></pre></td></tr></table></div></figure>


<p>While iterators can save memory, they can also save time.
For example if you wanted to print out just the first line of a 10 gigabyte log file, you could do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="s">&#39;giant_log_file.txt&#39;</span><span class="p">)))</span>
</span><span class='line'><span class="n">This</span> <span class="ow">is</span> <span class="n">the</span> <span class="n">first</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">a</span> <span class="n">giant</span> <span class="nb">file</span>
</span></code></pre></td></tr></table></div></figure>


<p>File objects in Python are implemented as iterators.
As you loop over a file, data is read into memory one line at a time.
If we instead used the <code>readlines</code> method to store all lines in memory, we might run out of system memory.</p>

<p>So <strong>iterators can save us memory</strong>, but <strong>iterators can sometimes save us time</strong> also.</p>

<p>Additionally, <strong>iterators have abilities that other iterables don&rsquo;t</strong>.
For example, the laziness of iterators can be used to make iterables that have an unknown length.
In fact, you can even make infinitely long iterators.</p>

<p>For example, the <code>itertools.count</code> utility will give us an iterator that will provide every number from <code>0</code> upward as we loop over it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">count</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">count</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>     <span class="k">print</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="mi">0</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="p">(</span><span class="n">this</span> <span class="n">goes</span> <span class="n">on</span> <span class="n">forever</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>That <code>itertools.count</code> object is essentially an infinitely long iterable.
And it&rsquo;s implemented as an iterator.</p>

<h2>Making an iterator: the object-oriented way</h2>

<p>So we&rsquo;ve seen that iterators can save us memory, save us CPU time, and unlock new abilities to us.</p>

<p>Let&rsquo;s make our own iterators.
We&rsquo;ll start be re-inventing the <code>itertools.count</code> iterator object.</p>

<p>Here&rsquo;s an iterator implemented using a class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Count</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Iterator that counts upward forever.&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">start</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">num</span> <span class="o">=</span> <span class="n">start</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__next__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">num</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">num</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">num</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">num</span>
</span></code></pre></td></tr></table></div></figure>


<p>This class has an initializer that initializes our current number to <code>0</code> (or whatever is passed in as the <code>start</code>).
The things that make this class usable as an iterator are the <code>__iter__</code> and <code>__next__</code> methods.</p>

<p>When an object is passed to the <code>str</code> built-in function, its <code>__str__</code> method is called.
When an object is passed to the <code>len</code> built-in function, its <code>__len__</code> method is called.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">str</span><span class="p">(</span><span class="n">numbers</span><span class="p">),</span> <span class="n">numbers</span><span class="o">.</span><span class="n">__str__</span><span class="p">()</span>
</span><span class='line'><span class="p">(</span><span class="s">&#39;[1, 2, 3]&#39;</span><span class="p">,</span> <span class="s">&#39;[1, 2, 3]&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">numbers</span><span class="p">),</span> <span class="n">numbers</span><span class="o">.</span><span class="n">__len__</span><span class="p">()</span>
</span><span class='line'><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Calling the built-in <code>iter</code> function on an object will attempt to call its <code>__iter__</code> method.
Calling the built-in <code>next</code> function on an object will attempt to call its <code>__next__</code> method.</p>

<p>The <code>iter</code> function is supposed to return an iterator.
So our <code>__iter__</code> function must return an iterator.
But <strong>our object is an iterator</strong>, so should return ourself.
Therefore our <code>Count</code> object returns <code>self</code> from its <code>__iter__</code> method because it is <em>its own iterator</em>.</p>

<p>The <code>next</code> function is supposed to return the next item in our iterator or raise a <code>StopIteration</code> exception when there are no more items.
We&rsquo;re returning the current number and incrementing the number so it&rsquo;ll be larger during the next <code>__next__</code> call.</p>

<p>We can manually loop over our <code>Count</code> iterator class like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="n">Count</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">next</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'><span class="mi">0</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">next</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>We could also loop over our <code>Count</code> object like using a <code>for</code> loop, as with any other iterable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">Count</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>     <span class="k">print</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="mi">0</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="p">(</span><span class="n">this</span> <span class="n">goes</span> <span class="n">on</span> <span class="n">forever</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This object-oriented approach to making an iterator is cool, but it&rsquo;s not the usual way that Python programmers make iterators.
Usually when we want an iterator, we make a generator.</p>

<h2>Generators: the easy way to make an iterator</h2>

<p>The easiest ways to make our own iterators in Python is to create a generator.</p>

<p>There are two ways to make generators in Python.</p>

<p>Given this list of numbers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">favorite_numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">57</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">95</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can make a generator that will lazily provide us with all the squares of these numbers like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">square_all</span><span class="p">(</span><span class="n">numbers</span><span class="p">):</span>
</span><span class='line'><span class="o">...</span>     <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">:</span>
</span><span class='line'><span class="o">...</span>         <span class="k">yield</span> <span class="n">n</span><span class="o">**</span><span class="mi">2</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">squares</span> <span class="o">=</span> <span class="n">square_all</span><span class="p">(</span><span class="n">favorite_numbers</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or we can make the same generator like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">squares</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">favorite_numbers</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first one is called a <strong>generator function</strong> and the second one is called a <strong>generator expression</strong>.</p>

<p>Both of these generator objects work the same way.
They both have a type of <code>generator</code> and they&rsquo;re both iterators that provide squares of the numbers in our numbers list.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="n">squares</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">generator</span><span class="s">&#39;&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">next</span><span class="p">(</span><span class="n">squares</span><span class="p">)</span>
</span><span class='line'><span class="mi">36</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">next</span><span class="p">(</span><span class="n">squares</span><span class="p">)</span>
</span><span class='line'><span class="mi">3249</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;re going to talk about both of these approaches to making a generator, but first let&rsquo;s talk about terminology.</p>

<p>The word &ldquo;generator&rdquo; is used in quite a few ways in Python:</p>

<ul>
<li>A <strong>generator</strong>, also called a <strong>generator object</strong>, is an iterator whose type is <code>generator</code></li>
<li>A <strong>generator function</strong> is a special syntax that allows us to make a function which returns a <strong>generator object</strong> when we call it</li>
<li>A <strong>generator expression</strong> is a comprehension-like syntax that allows you to create a <strong>generator object</strong> inline</li>
</ul>


<p>With that terminology out of the way, let&rsquo;s take a look at each one of these things individually.
We&rsquo;ll look at generator functions first.</p>

<h2>Generator functions</h2>

<p>Generator functions are distinguished from plain old functions by the fact that they have one or more <code>yield</code> statements.</p>

<p>Normally when you call a function, its code is executed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">gimme4_please</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>     <span class="k">print</span><span class="p">(</span><span class="s">&quot;Let me go get that number for you.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>     <span class="k">return</span> <span class="mi">4</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">num</span> <span class="o">=</span> <span class="n">gimme4_please</span><span class="p">()</span>
</span><span class='line'><span class="n">Let</span> <span class="n">me</span> <span class="n">go</span> <span class="n">get</span> <span class="n">that</span> <span class="n">number</span> <span class="k">for</span> <span class="n">you</span><span class="o">.</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">num</span>
</span><span class='line'><span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure>


<p>But if the function has a <code>yield</code> statement in it, it isn&rsquo;t a typical function anymore.
It&rsquo;s now a <strong>generator function</strong>, meaning it will return a <strong>generator object</strong> when called.
That generator object can be looped over to execute it until a <code>yield</code> statement is hit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">gimme4_later_please</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>     <span class="k">print</span><span class="p">(</span><span class="s">&quot;Let me go get that number for you.&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>     <span class="k">yield</span> <span class="mi">4</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">get4</span> <span class="o">=</span> <span class="n">gimme4_later_please</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">get4</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">generator</span> <span class="nb">object</span> <span class="n">gimme4_later_please</span> <span class="n">at</span> <span class="mh">0x7f78b2e7e2b0</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">num</span> <span class="o">=</span> <span class="nb">next</span><span class="p">(</span><span class="n">get4</span><span class="p">)</span>
</span><span class='line'><span class="n">Let</span> <span class="n">me</span> <span class="n">go</span> <span class="n">get</span> <span class="n">that</span> <span class="n">number</span> <span class="k">for</span> <span class="n">you</span><span class="o">.</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">num</span>
</span><span class='line'><span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure>


<p>The mere presence of a <code>yield</code> statement turns a function into a generator function.
If you see a function and there&rsquo;s a <code>yield</code>, you&rsquo;re working with a different animal.
It&rsquo;s a bit odd, but that&rsquo;s the way generator functions work.</p>

<p>Okay let&rsquo;s look at a real example of a generator function.
We&rsquo;ll make a generator function that does the same thing as our <code>Count</code> iterator class we made earlier.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">count</span><span class="p">(</span><span class="n">start</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
</span><span class='line'>    <span class="n">num</span> <span class="o">=</span> <span class="n">start</span>
</span><span class='line'>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>        <span class="k">yield</span> <span class="n">num</span>
</span><span class='line'>        <span class="n">num</span> <span class="o">+=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just like our <code>Count</code> iterator class, we can manually loop over the generator we get back from calling <code>count</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="n">count</span><span class="p">()</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">next</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'><span class="mi">0</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">next</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we can loop over this generator object using a <code>for</code> loop, just like before:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">count</span><span class="p">():</span>
</span><span class='line'><span class="o">...</span>     <span class="k">print</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="mi">0</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="p">(</span><span class="n">this</span> <span class="n">goes</span> <span class="n">on</span> <span class="n">forever</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>But this function is considerably shorter than our <code>Count</code> class we created before.</p>

<h2>Generator expressions</h2>

<p>Generator expressions are a list comprehension-like syntax that allow us to make a generator object.</p>

<p>Let&rsquo;s say we have a list comprehension that filters empty lines from a file and strips newlines from the end:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">lines</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="n">line</span><span class="o">.</span><span class="n">rstrip</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">poem_file</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">line</span> <span class="o">!=</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>We could create a generator instead of a list, by turning the square brackets of that comprehension into parenthesis:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">lines</span> <span class="o">=</span> <span class="p">(</span>
</span><span class='line'>    <span class="n">line</span><span class="o">.</span><span class="n">rstrip</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">poem_file</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">line</span> <span class="o">!=</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just as our list comprehension gave us a list back, our <strong>generator expression</strong> gives us a <strong>generator object</strong> back:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">type</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">generator</span><span class="s">&#39;&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">next</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39; This little bag I hope will prove&#39;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">next</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>
</span><span class='line'><span class="s">&#39;To be not vainly made--&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Generator expressions use a shorter inline syntax compared to generator functions.
They&rsquo;re not as powerful though.</p>

<p>If you can write your generator function in this form:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_a_generator</span><span class="p">(</span><span class="n">some_iterable</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">some_iterable</span><span class="p">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">some_condition</span><span class="p">(</span><span class="n">item</span><span class="p">):</span>
</span><span class='line'>            <span class="k">yield</span> <span class="n">item</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you can replace it with a generator expression:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_a_generator</span><span class="p">(</span><span class="n">some_iterable</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>        <span class="n">item</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">some_iterable</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">some_condition</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you can&rsquo;t write your generator function in that form, then you can&rsquo;t create a generator expression to replace it.</p>

<h2>Generator expressions vs generator functions</h2>

<p>You can think of generator expressions as the list comprehensions of the generator world.</p>

<p>If you&rsquo;re not familiar with list comprehensions, I recommend reading my article on <a href="http://treyhunner.com/2015/12/python-list-comprehensions-now-in-color/">list comprehensions in Python</a>.
I note in that article that you can copy-paste your way from a <code>for</code> loop to a list comprehension.</p>

<p>You can also copy-paste your way from a generator function to a function that returns a generator expression:</p>

<p><img src="https://treyhunner.com/images/generator-expression-copy-paste.gif"></p>

<p>Generator expressions are to generator functions as list comprehensions are to a simple <code>for</code> loop with an append and a condition.</p>

<p>Generator expressions are so similar to comprehensions, that you might even be tempted to say <strong>generator comprehension</strong> instead of generator expression.
That&rsquo;s not technically the correct name, but if you say it everyone will know what you&rsquo;re talking about.
Ned Batchelder actually proposed that we should all <a href="https://nedbatchelder.com/blog/201605/generator_comprehensions.html">start calling generator expressions generator comprehensions</a> and I tend to agree that this would be a clearer name.</p>

<h2>So what&rsquo;s the best way to make an iterator?</h2>

<p>To make an iterator you could create an iterator class, a generator function, or a generator expression.
Which way is the best way though?</p>

<p>Generator expressions are <strong>very succinct</strong>, but they&rsquo;re <strong>not nearly as flexible</strong> as generator functions.
Generator functions are flexible, but if you need to <strong>attach extra methods or attributes</strong> to your iterator object, you&rsquo;ll probably need to switch to using an iterator class.</p>

<p>I&rsquo;d recommend reaching for generator expressions the same way you reach for list comprehensions.
If you&rsquo;re doing a simple <strong>mapping or filtering operation</strong>, a <strong>generator expression</strong> is a great solution.
If you&rsquo;re doing something <strong>a bit more sophisticated</strong>, you&rsquo;ll likely need a <strong>generator function</strong>.</p>

<p>I&rsquo;d recommend using generator functions the same way you&rsquo;d use <code>for</code> loops that append to a list.
Everywhere you&rsquo;d see an <code>append</code> method, you&rsquo;d often see a <code>yield</code> statement instead.</p>

<p>And I&rsquo;d say that you should <strong>almost never create an iterator class</strong>.
If you find you need an iterator class, try to write a generator function that does what you need and see how it compares to your iterator class.</p>

<h2>Generators can help when making iterables too</h2>

<p>You&rsquo;ll see iterator classes in the wild, but there&rsquo;s rarely a good opportunity to write your own.</p>

<p>While it&rsquo;s rare to create your own iterator class, it&rsquo;s not as unusual to make your own iterable class.
And iterable classes require a <code>__iter__</code> method which returns an iterator.
Since generators are the easy way to make an iterator, we can use a generator function or a generator expression to create our <code>__iter__</code> methods.</p>

<p>For example here&rsquo;s an iterable that provides x-y coordinates:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Point</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">yield</span> <span class="bp">self</span><span class="o">.</span><span class="n">x</span>
</span><span class='line'>        <span class="k">yield</span> <span class="bp">self</span><span class="o">.</span><span class="n">y</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that our <code>Point</code> class here creates an <strong>iterable</strong> when called (not an iterator).
That means our <code>__iter__</code> method must return an iterator.
The easiest way to create an iterator is by making a generator function, so that&rsquo;s just what we did.</p>

<p>We stuck <code>yield</code> in our <code>__iter__</code> to make it into a generator function and now our <code>Point</code> class can be looped over, just like any other iterable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">p</span> <span class="o">=</span> <span class="n">Point</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">p</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'><span class="mi">1</span> <span class="mi">2</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Generator functions are a natural fit for creating <code>__iter__</code> methods on your iterable classes.</p>

<h2>Generators are <em>the</em> way to make iterators</h2>

<p>Dictionaries are the typical way to make a mapping in Python.
Functions are the typical way to make a callable object in Python.
Likewise, <strong>generators are the typical way to make an iterator in Python</strong>.</p>

<p>So when you&rsquo;re thinking &ldquo;it sure would be nice to implement an iterable that lazily computes things as it&rsquo;s looped over,&rdquo; think of iterators.</p>

<p>And when you&rsquo;re considering <strong>how to create your own iterator</strong>, think of <strong>generator functions</strong> and <strong>generator expressions</strong>.</p>

<h2>Practice making an iterator right now</h2>

<p>You won&rsquo;t learn new Python skills by reading, you&rsquo;ll learn them by writing code.</p>

<p>If you&rsquo;d like to practice making an iterator right now, sign up for <a href="https://www.pythonmorsels.com/">Python Morsels</a> using the form below and I&rsquo;ll immediately give you an exercise to practice making an iterator.</p>

<p><form method="post" action="https://www.pythonmorsels.com/accounts/signup/">
  <input type="email" name="email" placeholder="Your email" class="subscribe-email form-big" required>
  <input type="hidden" name="exercise_track" value="iterators">
  <input type="hidden" name="form_id" value="make an iterator">
  <button type="submit" class="subscribe-btn form-big">Get my iterator practice exercise</button>
<br></p>

<p><small>
  I won&rsquo;t share you info with others (see the <a href="https://www.pythonmorsels.com/privacy/">Python Morsels Privacy Policy</a> for details).<br>
  This form is reCAPTCHA protected (Google <a href="https://policies.google.com/privacy">Privacy Policy</a> &amp; <a href="https://policies.google.com/terms">TOS</a>)
</small></p>

<p></form></p>
]]></content>
  </entry>
  
</feed>
